<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CMD默认以管理员权限运行</title>
    <url>/blog/2023/09/15/CMD%E9%BB%98%E8%AE%A4%E4%BB%A5%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90%E8%BF%90%E8%A1%8C/</url>
    <content><![CDATA[<p>有很多时候，我们运行cmd需要管理员权限，但是每次都需要关掉重新右键”以管理员身份运行”，贼烦，我们可以通过本地安全策略来实现不管在什么情况下打开cmd都是使用的管理员权限。</p>
<p><code>Win+R</code> 打开运行 输入 <code>secpol.msc</code> 打开本地安全策略</p>
<p>找到 安全设置-》本地策略-》安全选项-》用户帐户控制: 以管理员批准模式运行所有管理员-》选择<font color="red">禁用</font></p>
<p>关机重启，这个时候，无论是从哪进去的cmd，或者bat运行的脚本，都默认已管理员权限运行。</p>
<p><img src="/blog/2023/09/15/CMD%E9%BB%98%E8%AE%A4%E4%BB%A5%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90%E8%BF%90%E8%A1%8C/image-20230915145539466.png" style="display: inline; border-style: none;"></p>
]]></content>
      <categories>
        <category>水漫金山</category>
      </categories>
      <tags>
        <tag>CMD</tag>
      </tags>
  </entry>
  <entry>
    <title>3秒钟解除网页中‘查看全文’的登陆限制</title>
    <url>/blog/2023/09/26/3%E7%A7%92%E9%92%9F%E8%A7%A3%E9%99%A4%E7%BD%91%E9%A1%B5%E4%B8%AD%E2%80%98%E6%9F%A5%E7%9C%8B%E5%85%A8%E6%96%87%E2%80%99%E7%9A%84%E7%99%BB%E9%99%86%E9%99%90%E5%88%B6/</url>
    <content><![CDATA[<p>我们在很多网页中都会遇到“查看全文”等限制，正好查找某个问题的时候遇到了，分享一下解决方法</p>
<img src="/blog/2023/09/26/3%E7%A7%92%E9%92%9F%E8%A7%A3%E9%99%A4%E7%BD%91%E9%A1%B5%E4%B8%AD%E2%80%98%E6%9F%A5%E7%9C%8B%E5%85%A8%E6%96%87%E2%80%99%E7%9A%84%E7%99%BB%E9%99%86%E9%99%90%E5%88%B6/image-20230926161616114.png" alt="image-20230926161616114">

<p><img src="/blog/2023/09/26/3%E7%A7%92%E9%92%9F%E8%A7%A3%E9%99%A4%E7%BD%91%E9%A1%B5%E4%B8%AD%E2%80%98%E6%9F%A5%E7%9C%8B%E5%85%A8%E6%96%87%E2%80%99%E7%9A%84%E7%99%BB%E9%99%86%E9%99%90%E5%88%B6/image-20230926162449276.png" alt="image-20230926162449276" style="display: inline; border-style: none;"></p>
<p>我们右键“查看全文”找到其DOM元素</p>
<p><img src="/blog/2023/09/26/3%E7%A7%92%E9%92%9F%E8%A7%A3%E9%99%A4%E7%BD%91%E9%A1%B5%E4%B8%AD%E2%80%98%E6%9F%A5%E7%9C%8B%E5%85%A8%E6%96%87%E2%80%99%E7%9A%84%E7%99%BB%E9%99%86%E9%99%90%E5%88%B6/image-20230926161733062.png" alt="image-20230926161733062" style="display: inline; border-style: none;"></p>
<p>然后去源码中搜索 <code>unlockarc</code> 方法</p>
<p><img src="/blog/2023/09/26/3%E7%A7%92%E9%92%9F%E8%A7%A3%E9%99%A4%E7%BD%91%E9%A1%B5%E4%B8%AD%E2%80%98%E6%9F%A5%E7%9C%8B%E5%85%A8%E6%96%87%E2%80%99%E7%9A%84%E7%99%BB%E9%99%86%E9%99%90%E5%88%B6/image-20230926161916541.png" alt="image-20230926161916541" style="display: inline; border-style: none;"></p>
<p>很容易就可以看出其逻辑，顺便还找到了登陆过后的处理逻辑，大概逻辑就是</p>
<p>点击弹出登陆框，当微信扫码登陆后会往本地 <code>cookie</code> 中设置一个写死的 <code>olduser</code></p>
<p>所以我们只需要把设置 <code>olduser</code> 的这一行逻辑在 <code>console</code> 控制台中执行一下，然后刷新下页面就可以了~</p>
<p><img src="/blog/2023/09/26/3%E7%A7%92%E9%92%9F%E8%A7%A3%E9%99%A4%E7%BD%91%E9%A1%B5%E4%B8%AD%E2%80%98%E6%9F%A5%E7%9C%8B%E5%85%A8%E6%96%87%E2%80%99%E7%9A%84%E7%99%BB%E9%99%86%E9%99%90%E5%88%B6/image-20230926162236927.png" alt="image-20230926162236927" style="display: inline; border-style: none;"></p>
<p>可以看到以后完整的浏览本页的全部内容了~</p>
<p><img src="/blog/2023/09/26/3%E7%A7%92%E9%92%9F%E8%A7%A3%E9%99%A4%E7%BD%91%E9%A1%B5%E4%B8%AD%E2%80%98%E6%9F%A5%E7%9C%8B%E5%85%A8%E6%96%87%E2%80%99%E7%9A%84%E7%99%BB%E9%99%86%E9%99%90%E5%88%B6/image-20230926162324767.png" alt="image-20230926162324767" style="display: inline; border-style: none;"></p>
<p>也可以看到 <code>cookie</code> 中有了我们自己设置的用户信息</p>
<p><img src="/blog/2023/09/26/3%E7%A7%92%E9%92%9F%E8%A7%A3%E9%99%A4%E7%BD%91%E9%A1%B5%E4%B8%AD%E2%80%98%E6%9F%A5%E7%9C%8B%E5%85%A8%E6%96%87%E2%80%99%E7%9A%84%E7%99%BB%E9%99%86%E9%99%90%E5%88%B6/image-20230926162425977.png" alt="image-20230926162425977" style="display: inline; border-style: none;"></p>
]]></content>
      <categories>
        <category>水漫金山</category>
      </categories>
      <tags>
        <tag>网页限制</tag>
        <tag>查看全文</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo侧边栏添加个性化数字时钟</title>
    <url>/blog/2023/03/23/Hexo%E4%BE%A7%E8%BE%B9%E6%A0%8F%E6%B7%BB%E5%8A%A0%E4%B8%AA%E6%80%A7%E5%8C%96%E6%95%B0%E5%AD%97%E6%97%B6%E9%92%9F/</url>
    <content><![CDATA[<p>​	修改主题下的<code>site-overview.swig</code>文件，路径：<code>...\themes\next\layout\_partials\sidebar\site-overview.swig</code></p>
<p>​	在<code>class</code>为<code>site-author motion-element</code>的div下增加如下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;canvas&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:60%; margin:10px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">var</span> digit=</span></span><br><span class="line"><span class="language-javascript">        [</span></span><br><span class="line"><span class="language-javascript">            [</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript">            ],<span class="comment">//0</span></span></span><br><span class="line"><span class="language-javascript">            [</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</span></span><br><span class="line"><span class="language-javascript">            ],<span class="comment">//1</span></span></span><br><span class="line"><span class="language-javascript">            [</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</span></span><br><span class="line"><span class="language-javascript">            ],<span class="comment">//2</span></span></span><br><span class="line"><span class="language-javascript">            [</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript">            ],<span class="comment">//3</span></span></span><br><span class="line"><span class="language-javascript">            [</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</span></span><br><span class="line"><span class="language-javascript">            ],<span class="comment">//4</span></span></span><br><span class="line"><span class="language-javascript">            [</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript">            ],<span class="comment">//5</span></span></span><br><span class="line"><span class="language-javascript">            [</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript">            ],<span class="comment">//6</span></span></span><br><span class="line"><span class="language-javascript">            [</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript">            ],<span class="comment">//7</span></span></span><br><span class="line"><span class="language-javascript">            [</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript">            ],<span class="comment">//8</span></span></span><br><span class="line"><span class="language-javascript">            [</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript">            ],<span class="comment">//9</span></span></span><br><span class="line"><span class="language-javascript">            [</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript">            ]<span class="comment">//:</span></span></span><br><span class="line"><span class="language-javascript">        ];</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;canvas&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span>(canvas.<span class="property">getContext</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> cxt = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//声明canvas的宽高</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> H = <span class="number">100</span>,W = <span class="number">700</span>;</span></span><br><span class="line"><span class="language-javascript">        canvas.<span class="property">height</span> = H;</span></span><br><span class="line"><span class="language-javascript">        canvas.<span class="property">width</span> = W;</span></span><br><span class="line"><span class="language-javascript">        cxt.<span class="property">fillStyle</span> = <span class="string">&#x27;#f00&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        cxt.<span class="title function_">fillRect</span>(<span class="number">10</span>,<span class="number">10</span>,<span class="number">50</span>,<span class="number">50</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//存储时间数据</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> data = [];</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//存储运动的小球</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> balls = [];</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//设置粒子半径</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> R = canvas.<span class="property">height</span>/<span class="number">20</span>-<span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">        (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> temp = <span class="regexp">/(\d)(\d):(\d)(\d):(\d)(\d)/</span>.<span class="title function_">exec</span>(<span class="keyword">new</span> <span class="title class_">Date</span>());</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//存储时间数字，由十位小时、个位小时、冒号、十位分钟、个位分钟、冒号、十位秒钟、个位秒钟这7个数字组成</span></span></span><br><span class="line"><span class="language-javascript">            data.<span class="title function_">push</span>(temp[<span class="number">1</span>],temp[<span class="number">2</span>],<span class="number">10</span>,temp[<span class="number">3</span>],temp[<span class="number">4</span>],<span class="number">10</span>,temp[<span class="number">5</span>],temp[<span class="number">6</span>]);</span></span><br><span class="line"><span class="language-javascript">        &#125;)();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/*生成点阵数字*/</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">renderDigit</span>(<span class="params">index,num</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; digit[num].<span class="property">length</span>; i++)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; digit[num][i].<span class="property">length</span>; j++)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span>(digit[num][i][j] == <span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        cxt.<span class="title function_">beginPath</span>();</span></span><br><span class="line"><span class="language-javascript">                        cxt.<span class="title function_">arc</span>(<span class="number">14</span>*(R+<span class="number">2</span>)*index + j*<span class="number">2</span>*(R+<span class="number">1</span>)+(R+<span class="number">1</span>),i*<span class="number">2</span>*(R+<span class="number">1</span>)+(R+<span class="number">1</span>),R,<span class="number">0</span>,<span class="number">2</span>*<span class="title class_">Math</span>.<span class="property">PI</span>);</span></span><br><span class="line"><span class="language-javascript">                        cxt.<span class="title function_">closePath</span>();</span></span><br><span class="line"><span class="language-javascript">                        cxt.<span class="title function_">fill</span>();</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/*更新时钟*/</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">updateDigitTime</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> changeNumArray = [];</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> temp = <span class="regexp">/(\d)(\d):(\d)(\d):(\d)(\d)/</span>.<span class="title function_">exec</span>(<span class="keyword">new</span> <span class="title class_">Date</span>());</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> <span class="title class_">NewData</span> = [];</span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">NewData</span>.<span class="title function_">push</span>(temp[<span class="number">1</span>],temp[<span class="number">2</span>],<span class="number">10</span>,temp[<span class="number">3</span>],temp[<span class="number">4</span>],<span class="number">10</span>,temp[<span class="number">5</span>],temp[<span class="number">6</span>]);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span>(<span class="keyword">var</span> i = data.<span class="property">length</span>-<span class="number">1</span>; i &gt;=<span class="number">0</span> ; i--)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//时间发生变化</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span>(<span class="title class_">NewData</span>[i] !== data[i])&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//将变化的数字值和在data数组中的索引存储在changeNumArray数组中</span></span></span><br><span class="line"><span class="language-javascript">                    changeNumArray.<span class="title function_">push</span>(i+<span class="string">&#x27;_&#x27;</span>+(<span class="title class_">Number</span>(data[i])+<span class="number">1</span>)%<span class="number">10</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//增加小球</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; changeNumArray.<span class="property">length</span>; i++)&#123;</span></span><br><span class="line"><span class="language-javascript">                addBalls.<span class="title function_">apply</span>(<span class="variable language_">this</span>,changeNumArray[i].<span class="title function_">split</span>(<span class="string">&#x27;_&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            data = <span class="title class_">NewData</span>.<span class="title function_">concat</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/*更新小球状态*/</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">updateBalls</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; balls.<span class="property">length</span>; i++)&#123;</span></span><br><span class="line"><span class="language-javascript">                balls[i].<span class="property">stepY</span> += balls[i].<span class="property">disY</span>;</span></span><br><span class="line"><span class="language-javascript">                balls[i].<span class="property">x</span> += balls[i].<span class="property">stepX</span>;</span></span><br><span class="line"><span class="language-javascript">                balls[i].<span class="property">y</span> += balls[i].<span class="property">stepY</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span>(balls[i].<span class="property">x</span> &gt; W + R || balls[i].<span class="property">y</span> &gt; H + R)&#123;</span></span><br><span class="line"><span class="language-javascript">                    balls.<span class="title function_">splice</span>(i,<span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">                    i--;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/*增加要运动的小球*/</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">addBalls</span>(<span class="params">index,num</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> numArray = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> colorArray =  [<span class="string">&quot;#3BE&quot;</span>,<span class="string">&quot;#09C&quot;</span>,<span class="string">&quot;#A6C&quot;</span>,<span class="string">&quot;#93C&quot;</span>,<span class="string">&quot;#9C0&quot;</span>,<span class="string">&quot;#690&quot;</span>,<span class="string">&quot;#FB3&quot;</span>,<span class="string">&quot;#F80&quot;</span>,<span class="string">&quot;#F44&quot;</span>,<span class="string">&quot;#C00&quot;</span>];</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; digit[num].<span class="property">length</span>; i++)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; digit[num][i].<span class="property">length</span>; j++)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span>(digit[num][i][j] == <span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">var</span> ball = &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="attr">x</span>:<span class="number">14</span>*(R+<span class="number">2</span>)*index + j*<span class="number">2</span>*(R+<span class="number">1</span>)+(R+<span class="number">1</span>),</span></span><br><span class="line"><span class="language-javascript">                            <span class="attr">y</span>:i*<span class="number">2</span>*(R+<span class="number">1</span>)+(R+<span class="number">1</span>),</span></span><br><span class="line"><span class="language-javascript">                            <span class="attr">stepX</span>:<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">4</span> -<span class="number">2</span>),</span></span><br><span class="line"><span class="language-javascript">                            <span class="attr">stepY</span>:-<span class="number">2</span>*numArray[<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*numArray.<span class="property">length</span>)],</span></span><br><span class="line"><span class="language-javascript">                            <span class="attr">color</span>:colorArray[<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*colorArray.<span class="property">length</span>)],</span></span><br><span class="line"><span class="language-javascript">                            <span class="attr">disY</span>:<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">                        &#125;;</span></span><br><span class="line"><span class="language-javascript">                        balls.<span class="title function_">push</span>(ball);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/*渲染*/</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">render</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//重置画布宽度，达到清空画布的效果</span></span></span><br><span class="line"><span class="language-javascript">            canvas.<span class="property">height</span> = <span class="number">100</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//渲染时钟</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.<span class="property">length</span>; i++)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">renderDigit</span>(i,data[i]);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//渲染小球</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; balls.<span class="property">length</span>; i++)&#123;</span></span><br><span class="line"><span class="language-javascript">                cxt.<span class="title function_">beginPath</span>();</span></span><br><span class="line"><span class="language-javascript">                cxt.<span class="title function_">arc</span>(balls[i].<span class="property">x</span>,balls[i].<span class="property">y</span>,R,<span class="number">0</span>,<span class="number">2</span>*<span class="title class_">Math</span>.<span class="property">PI</span>);</span></span><br><span class="line"><span class="language-javascript">                cxt.<span class="property">fillStyle</span> = balls[i].<span class="property">color</span>;</span></span><br><span class="line"><span class="language-javascript">                cxt.<span class="title function_">closePath</span>();</span></span><br><span class="line"><span class="language-javascript">                cxt.<span class="title function_">fill</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">clearInterval</span>(oTimer);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> oTimer = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//更新时钟</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">updateDigitTime</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//更新小球状态</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">updateBalls</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//渲染</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">render</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;,<span class="number">50</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;)();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​	配置好后，使用<code>hexo g</code>与<code>hexo s</code>命令部署启动查看效果即可</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Git Bash修改默认路径</title>
    <url>/blog/2023/09/15/Git-Bash%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E8%B7%AF%E5%BE%84/</url>
    <content><![CDATA[<p>​	使用Git进行命令行的输入是很便捷的，但是在Windows平台，因为存在盘符的概念，导致路径的切换过程变得繁琐而头疼，在打开Git Bash的时，系统会默认将当前路径设置为C盘的用户路径，但是我们日常使用的时候基本都不会在用户路径，于是我们需要将Git Bash默认路径进行修改，这样很方便的直接使用命令不用在切换目录。</p>
<p>​	首先查看当前的默认路径，输入命令<code>pwd</code>查看当前路径， 得到如下返回结果：</p>
<p><img src="/blog/2023/09/15/Git-Bash%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E8%B7%AF%E5%BE%84/image-20230915170857054.png" alt="image-20230915170857054" style="display: inline; border-style: none;"></p>
<p>可以看到，在我的电脑上的默认路径为C盘Users下的用户文件夹，这个是怎么来的呢？</p>
<p>我们可以在Git Bash上右键，点击【属性】</p>
<p><img src="/blog/2023/09/15/Git-Bash%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E8%B7%AF%E5%BE%84/image-20230915171424924.png" alt="image-20230915171424924" style="display: inline; border-style: none;"></p>
<p>​	可以看到，上图中用红色方框框住的内容就是系统为什么会自动跳转到用户路径的原因，<code>--cd-to-home</code>就是在打开Git Bash的一瞬间会执行的一条语句，将路径切换到home，但是Windows下面没有home，于是它会根据起始位置填写的参数进行查找，<code>%HOMEDRIVE%%HOMEPATH%</code>其实就是一个系统变量，对，就是那个很多软件安装都需要配置的系统变量或者叫环境变量，但是这个是系统内置的，我们不需要手动配置。<br>​	知道了其中的原因之后，我们可以动手修改了，首先将【目标】的<code>--cd-to-home</code>删除，然后将【起始位置】修改到你自己经常需要进入的工作目录，比如我这里就直接改为 <code>D:\hexo-liyao\node_modules\.bin</code></p>
<p><img src="/blog/2023/09/15/Git-Bash%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E8%B7%AF%E5%BE%84/image-20230915171752155.png" alt="image-20230915171752155" style="display: inline; border-style: none;"></p>
<p>​	修改之后点击【确定】，此时可能会提示要管理员权限，点击【是】即可，再次打开Git Bash，输入<code>pwd</code>查看当前路径：</p>
<p>可以看到路径已经修改成功，默认路径为修改过后的路径了。</p>
<p><img src="/blog/2023/09/15/Git-Bash%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E8%B7%AF%E5%BE%84/image-20230915171920346.png" alt="image-20230915171920346" style="display: inline; border-style: none;"></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo升级Font Awesome，以及使用ICON创建自定义菜单</title>
    <url>/blog/2023/03/21/Hexo%E5%8D%87%E7%BA%A7Font-Awesome%EF%BC%8C%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8ICON%E5%88%9B%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E8%8F%9C%E5%8D%95/</url>
    <content><![CDATA[<ol>
<li><strong>查看当前主题中使用的Font Awesome版本<code>_config.yml</code>配置文件</strong></li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">vendors:</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="comment"># Internal version: 5.13.0</span></span><br><span class="line">  <span class="comment"># fontawesome: //cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@5/css/all.min.css</span></span><br><span class="line">  <span class="comment"># fontawesome: //cdnjs.cloudflare.com/ajax/libs/font-awesome/5.13.0/css/all.min.css</span></span><br><span class="line">  <span class="attr">fontawesome:</span></span><br><span class="line">  <span class="string">...</span></span><br></pre></td></tr></table></figure>

<p> 可以看出目前使用的版本是<code>5.13.0</code>，我们去Font Awesome官网下载最新<code>6.3</code>版本（For The Web）</p>
<p><a href="https://fontawesome.com/download">Font Awesome Download</a> </p>
<p>下载完成后将压缩包解压到主题目录下 <code>\themes\next\source\lib\font-awesome</code>覆盖更新，这样就升级成功了。</p>
<ol start="2">
<li><strong>使用ICON创建自定义菜单</strong></li>
</ol>
<p>&lt;1&gt;. 首先需要使用Hexo新建我们的菜单页面, 代码如下：</p>
<p><code>hexo new page &quot;life&quot;</code>  &#x2F;&#x2F; 新建名为“life”的菜单</p>
<p>创建成功后得到路径：</p>
<p><code>Created: ...\source\life\index.md</code></p>
<p>&lt;2&gt;. 在主题<code>_config.yml</code>配置文件中<code>menu</code>节点下新增菜单<code>life</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">copywriter:</span> <span class="string">/copywriter/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-mug-hot</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="attr">life:</span> <span class="string">/life/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-camera</span></span><br></pre></td></tr></table></figure>

<p>其中key为菜单code，value为 <code>路径/ || ICON图标名称</code></p>
<p>&lt;3&gt;. 主题语言配置文件中映射菜单Code与中文的关系</p>
<p><code>...\themes\next\languages\zh-CN.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">首页</span></span><br><span class="line">  <span class="attr">copywriter:</span> <span class="string">文案</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="attr">life:</span> <span class="string">生活</span></span><br></pre></td></tr></table></figure>

<p>配置好后，使用<code>hexo g</code>与<code>hexo s</code>命令部署启动查看效果即可</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Font Awesome</tag>
      </tags>
  </entry>
  <entry>
    <title>BT种子相关知识, 以及下载慢的原因</title>
    <url>/blog/2023/09/15/BT%E7%A7%8D%E5%AD%90%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86-%E4%BB%A5%E5%8F%8A%E4%B8%8B%E8%BD%BD%E6%85%A2%E7%9A%84%E5%8E%9F%E5%9B%A0/</url>
    <content><![CDATA[<p><strong>BT下载慢原因</strong></p>
<p>要想知道为什么BT下载速度慢，首先要简单了解BT的原理及运作机制。<br>BT下载是P2P下载的一种，既每个用户都是服务器，每个用户都可以向互联网上正在下载同一文件的人发送数据，每个用户都可以收到互联网上其他人发送过来的数据。BT下载的速度都是其他人向你发送文件给你的，也就是说同时下载该文件的人越多，发送接收的数据就越多，速度就越快。<br>在BT下载中，你下载的文件来自于其他用户的分享，你的下载速度来自于其他分享者的上传速度。</p>
<p><strong>原因1: 缺少开放环境</strong><br>因为中国网络起步相对世界整体来说较晚，所以分到的IPV4地址只有4亿个，但中国却有14亿人口，与之相反的是美国，它们只有3亿人口却拥有15亿个IPv4地址。<br>国内的IPv4地址是不够分的，于是各大运营商干脆不发放IPv4地址，转而使用内网IP。<br>内网IP在BT下载中速度不受限制，但在上传做种中受到运营商的限制只能在内网IP池内分享。<br>传统的BT下载是在全球范围内组成BT网络，而国内的BT下载只能在国内甚至省内组成BT网络。<br>这样的结果就是同时下载的用户数量少，无法组成一个较为庞大的BT网络来互相分享文件。进而下载速度下降</p>
<p><strong>原因2: 带宽上下行不对等</strong><br>如果你测过网速你就会发现，自己的宽带只有下行带宽达到了运营商宣传的速度，而上行带宽只有下行带宽的三分之一或四分之一甚至更少。</p>
<p><strong>原因3: 流氓软件(吸血用户)</strong><br>迅雷只下载，不上传或仅在迅雷用户内上传，结合上面内网IP+上下行不对等，迅雷已经实现了国内BT垄断。<br>ABCDEF六位用户同时用BT下载一个文件，组成了一个6人的BT网。但因为DEF用的下载工具是迅雷，所以ABC无法接收到DEF发送的数据，原本6人的BT网在ABC视角只能获得3人的收益，但DEF却可以靠ABC发送的数据达到原本6人网络的速度。迅雷上传数据只发给用自己软件的用户，同时还吸其他用户的上传数据：</p>
<ol>
<li>把用户下载的文件私自存到自己服务器里，来达到冷门资源只有迅雷才有速度这一现象。</li>
<li>用P2P这种本来用户对用户互惠互利的免费下载协议收费，只有迅雷下载会员才能用迅雷的“高速“下载</li>
<li>把非会员作为会员的吸血工具，非会员下载到一定程度时会自动限速，延长下载时间给会员用户做种</li>
</ol>
<p>国内用户想高速下载BT文件只有选择加入迅雷的吸血网络，而随着用户的加入，迅雷的BT网络也越来越大，速度也随之提升，速度的提升又吸引一批用户加入，再扩大，再提速，再吸引。已经形成了一个闭环。</p>
<p><strong>原因4: 无人做种</strong><br>BT下载速度取决于其他用户的上传速度，在每个人上传速度都不理想的情况下整个BT下载的速度就不理想。<br>做种指将自己的上传带宽贡献出来，来方便BT网络中的其他人下载。最简单的做法是下载后不移动下载好的文件，不关闭下载软件。<br>BT网络建立起来的本意是所有人一起贡献自己的带宽，来达到所有人高速下载。但现实中又有多少人贡献过自己的带宽呢？<br>国内用户大部分不了解P2P也不愿意去了解什么是P2P，不懂BT的基本原理。知道种子原理的人很少，愿意做种且自身硬件支持做种的就更少了。</p>
<p>因为一些种子没人保种，就会出现断种死种的情况，断种就是下了一半，另一半下不动了，死种就是根本下不了的种子。</p>
<p><strong>原因5: 网盘崛起</strong><br>网盘靠着不会坏种，超长时间保存，方便管理文件等优点在近年抢走了大量的BT用户。<br>用户越多速度越快，网盘逐渐增加，导致BT用户总量变少了，很少人使用BT下载，速度自然就慢下来了</p>
]]></content>
      <categories>
        <category>水漫金山</category>
      </categories>
      <tags>
        <tag>BT下载慢</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo开启本地搜索功能</title>
    <url>/blog/2023/03/23/Hexo%E5%BC%80%E5%90%AF%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<p>​	修改主题配置文件&#96;_config.yml，开启本地搜索功能</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>​	<code>enable</code> 为是否启用本地搜索<br>​	<code>trigger</code> 选auto则搜索时输入自动出现结果，选manual则搜索时输入完成需手动点击回车或搜索按钮出结果<br>​	<code>top_n_per_article</code> 显示每篇文章的top n个结果，通过设置为-1显示所有结果<br>​	<code>unescape</code> 将html字符串转换为可读的字符串<br>​	<code>preload</code> 在页面加载时预加载搜索数据。</p>
<p>​	启用此功能需要安装<code>hexo-generator-searchdb</code>，在根目录下使用以下命令安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<p>​	最后再主题配置文件<code>_config.yml</code>添加如下配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>

<p>​	配置好后，使用<code>hexo g</code>与<code>hexo s</code>命令部署启动查看效果即可</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo文章添加字数统计功能</title>
    <url>/blog/2023/03/21/Hexo%E6%96%87%E7%AB%A0%E6%B7%BB%E5%8A%A0%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<p>1.首先在博客目录下使用<code>npm</code>安装插件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-wordcount</span><br></pre></td></tr></table></figure>

<p>2.在主题配置文件<code>_config.yml</code>中增加配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启字数统计</span></span><br><span class="line"><span class="attr">word_count:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>3.检查配置中是否<code>symbols_count_time</code>项，没有的话加上</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-symbols-count-time</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">false</span> <span class="string">//是否与常规post-meta条目换行</span></span><br><span class="line">  <span class="attr">item_text_post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>4.如果需要在页面底部网站信息处也加上字数统计需要修改<code>footer.swig</code>文件信息</p>
<p>文件路径：<code>...\themes\next\layout\_partials\footer.swig</code></p>
<p>在文件的最后添加如下内容：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">“theme-info”</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">“powered-by”</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">“post-count”</span>&gt;</span>共&#123;&#123; totalcount(site) &#125;&#125;字<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置好后，使用<code>hexo g</code>与<code>hexo s</code>命令部署启动查看效果即可</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo添加GitHub链接效果</title>
    <url>/blog/2023/03/22/Hexo%E6%B7%BB%E5%8A%A0GitHub%E9%93%BE%E6%8E%A5%E6%95%88%E6%9E%9C/</url>
    <content><![CDATA[<p>​	1、通过 <a href="https://tholman.com/github-corners/">GitHub Corners</a> 获取到链接效果代码，例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://github.com/handsomeliyao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;github-corner&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;View source on GitHub&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;80&quot;</span> <span class="attr">height</span>=<span class="string">&quot;80&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 250 250&quot;</span> <span class="attr">style</span>=<span class="string">&quot;fill:#151513; color:#fff; position: absolute; top: 0; border: 0; right: 0;&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">style</span>=<span class="string">&quot;transform-origin: 130px 106px;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;octo-arm&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;octo-body&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">	<span class="selector-class">.github-corner</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:octocat-wave <span class="number">560ms</span> ease-in-out&#125;<span class="keyword">@keyframes</span> octocat-wave&#123;<span class="number">0%</span>,<span class="number">100%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">0</span>)&#125;<span class="number">20%</span>,<span class="number">60%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(-<span class="number">25deg</span>)&#125;<span class="number">40%</span>,<span class="number">80%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">10deg</span>)&#125;&#125;<span class="keyword">@media</span> (<span class="attribute">max-width</span>:<span class="number">500px</span>)&#123;<span class="selector-class">.github-corner</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:none&#125;<span class="selector-class">.github-corner</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:octocat-wave <span class="number">560ms</span> ease-in-out&#125;&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​	2、然后粘贴刚才复制的代码到<code>themes/next/layout/_layout.swig</code>文件中(放在<code>&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</code>的下面)，并把<code>href</code>改为你的github地址</p>
<img src="/blog/2023/03/22/Hexo%E6%B7%BB%E5%8A%A0GitHub%E9%93%BE%E6%8E%A5%E6%95%88%E6%9E%9C/image-20230322190942690.png" style="display: inline; border-style: none;">

<p>​	配置好后，使用<code>hexo g</code>与<code>hexo s</code>命令部署启动查看效果即可</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo添加自定义样式配置/主页背景图片设置</title>
    <url>/blog/2023/03/24/Hexo%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%B7%E5%BC%8F%E9%85%8D%E7%BD%AE-%E4%B8%BB%E9%A1%B5%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h4 id="修改主题配置文件-config-yml"><a href="#修改主题配置文件-config-yml" class="headerlink" title="修改主题配置文件_config.yml"></a>修改主题配置文件_config.yml</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Define custom file paths.</span></span><br><span class="line"><span class="comment"># Create your custom files in site directory `source/_data` and uncomment needed files below.</span></span><br><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.swig</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.swig</span></span><br><span class="line">  <span class="comment">#sidebar: source/_data/sidebar.swig</span></span><br><span class="line">  <span class="comment">#postMeta: source/_data/post-meta.swig</span></span><br><span class="line">  <span class="comment">#postBodyEnd: source/_data/post-body-end.swig</span></span><br><span class="line">  <span class="comment">#footer: source/_data/footer.swig</span></span><br><span class="line">  <span class="comment">#bodyEnd: source/_data/body-end.swig</span></span><br><span class="line">  <span class="comment">#variable: source/_data/variables.styl</span></span><br><span class="line">  <span class="comment">#mixin: source/_data/mixins.styl</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>

<p>​	把<code>style</code>属性值打开，这就是我们自定义样式的文件及路径</p>
<p>​	如果该路径下没有文件需要自行创建</p>
<h4 id="修改styles-styl文件"><a href="#修改styles-styl文件" class="headerlink" title="修改styles.styl文件"></a>修改styles.styl文件</h4><p>​	在文件中加入以下代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 添加背景图片</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">      <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">/images/background.png</span>);//自己喜欢的图片地址</span><br><span class="line">      <span class="attribute">background-size</span>: cover;</span><br><span class="line">      <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">      <span class="attribute">background-attachment</span>: fixed;</span><br><span class="line">      <span class="attribute">background-position</span>: <span class="number">50%</span> <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//博客内容透明化</span><br><span class="line">//文章内容的透明度设置</span><br><span class="line"><span class="selector-class">.content-wrap</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.85</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//侧边框的透明度设置</span><br><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.85</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//菜单栏的透明度设置</span><br><span class="line"><span class="selector-class">.header-inner</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.85</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//搜索框（local-search）的透明度设置</span><br><span class="line"><span class="selector-class">.popup</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.85</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​	注意到这里的图片文件的实际位置是：<code>.../themes/next/source/images/</code></p>
<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>​	如果部署报一下错误，这需要调整Hexo配置</p>
<img src="/blog/2023/03/24/Hexo%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%B7%E5%BC%8F%E9%85%8D%E7%BD%AE-%E4%B8%BB%E9%A1%B5%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87%E8%AE%BE%E7%BD%AE/image-20230324175213736.png" style="display: inline; border-style: none;">

<p>​	找到<code>...\themes\next\source\css</code>路径下的<code>main.styl</code>文件，修改如下配置</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Custom Layer</span></span><br><span class="line"><span class="comment">// --------------------------------------------------</span></span><br><span class="line"><span class="comment">// for $inject_style in hexo-config(&#x27;injects.style&#x27;)</span></span><br><span class="line"><span class="comment">//  @import $inject_style;</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../_data/styles.styl&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>​	这里特别要注意<code>styles.styl</code>文件的路径一定要对，是相对于<code>main.style</code>文件的路径！</p>
<p>​	配置好后，使用<code>hexo g</code>与<code>hexo s</code>命令部署启动查看效果即可</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo添加萌妹子看板效果</title>
    <url>/blog/2023/03/22/Hexo%E6%B7%BB%E5%8A%A0%E8%90%8C%E5%A6%B9%E5%AD%90%E7%9C%8B%E6%9D%BF%E6%95%88%E6%9E%9C/</url>
    <content><![CDATA[<p>​	首先需要了解每个动漫人物效果都是一个<code>live2d</code>模型</p>
<p>​	以下是目前支持的一些模型（每个模型是什么效果可以自行去搜索以下）：</p>
<ul>
<li><code>live2d-widget-model-chitose</code></li>
<li><code>live2d-widget-model-epsilon2_1</code></li>
<li><code>live2d-widget-model-gf</code></li>
<li><code>live2d-widget-model-haru/01 (use npm install --save live2d-widget-model-haru)</code></li>
<li><code>live2d-widget-model-haru/02 (use npm install --save live2d-widget-model-haru)</code></li>
<li><code>live2d-widget-model-haruto</code></li>
<li><code>live2d-widget-model-hibiki</code></li>
<li><code>live2d-widget-model-hijiki</code></li>
<li><code>live2d-widget-model-izumi</code></li>
<li><code>live2d-widget-model-koharu</code></li>
<li><code>live2d-widget-model-miku</code></li>
<li><code>live2d-widget-model-ni-j</code></li>
<li><code>live2d-widget-model-nico</code></li>
<li><code>live2d-widget-model-nietzsche</code></li>
<li><code>live2d-widget-model-nipsilon</code></li>
<li><code>live2d-widget-model-nito</code></li>
<li><code>live2d-widget-model-shizuku</code></li>
<li><code>live2d-widget-model-tororo</code></li>
<li><code>live2d-widget-model-tsumiki</code></li>
<li><code>live2d-widget-model-unitychan</code></li>
<li><code>live2d-widget-model-wanko</code></li>
<li><code>live2d-widget-model-z16</code></li>
</ul>
<p>​	1、安装组件，执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure>

<p>​	2、安装自己喜欢的人物模型，以<code>nipsilon</code>为例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install live2d-widget-model-nipsilon</span><br></pre></td></tr></table></figure>

<p>​	3、在全局<code>_config.yml</code>配置文件中添加配置（注意：是全局的配置文件，不是主题中的配置文件！）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加动漫人物效果</span></span><br><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span>  </span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-nipsilon</span></span><br><span class="line">  <span class="attr">display:</span>    </span><br><span class="line">    <span class="attr">position:</span> <span class="string">right</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">200</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">320</span></span><br><span class="line">    <span class="attr">hOffset:</span> <span class="number">50</span></span><br><span class="line">    <span class="attr">vOffset:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>​	(其中<code>hOffset</code>是水平方向上的位置调整，<code>vOffset</code>是竖直方向的位置调整)</p>
<p>​	<code>use</code>属性值：模型组件的名字</p>
<p>​	配置好后，使用<code>hexo g</code>与<code>hexo s</code>命令部署启动查看效果即可</p>
<img src="/blog/2023/03/22/Hexo%E6%B7%BB%E5%8A%A0%E8%90%8C%E5%A6%B9%E5%AD%90%E7%9C%8B%E6%9D%BF%E6%95%88%E6%9E%9C/image-20230322143028549.png" style="display: inline; border-style: none;">
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo添加评论功能</title>
    <url>/blog/2023/03/21/Hexo%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<p>网上的评论软件有很多，例如：</p>
<p><a href="https://livere.com/">来必力</a>，<a href="https://www.leancloud.cn/">Valine</a></p>
<p>我们采用<code>Valine</code>来进行评论功能的实现</p>
<p>首先需要去<code>Valine</code>官网注册一个用户，然后创建一个应用</p>
<img src="/blog/2023/03/21/Hexo%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/image-20230321180534287.png" style="display: inline; border-style: none;">

<p>创建成功后获取到<code>AppID</code>与<code>AppKey</code></p>
<img src="/blog/2023/03/21/Hexo%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/image-20230321181431996.png" style="display: inline; border-style: none;"> 

<p>最后修改主题配置文件<code>_config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Valine</span></span><br><span class="line"><span class="comment"># For more information: https://valine.js.org, https://github.com/xCss/Valine</span></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">appid:</span> <span class="string">t4ThrZRx82oOYRpon1mO6hI1-gzGzoHsz</span></span><br><span class="line">  <span class="attr">appkey:</span> <span class="string">ccBvr06mKTNJ3hZwKVWWz2Yz</span></span><br><span class="line">  <span class="attr">notify:</span> <span class="literal">false</span> <span class="comment"># Mail notifier</span></span><br><span class="line">  <span class="attr">verify:</span> <span class="literal">false</span> <span class="comment"># Verification code</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">ヾﾉ≧∀≦)o</span> <span class="string">来呀！吐槽一番吧！</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">mm</span> <span class="comment"># Gravatar style</span></span><br><span class="line">  <span class="attr">guest_info:</span> <span class="string">nick,mail</span> <span class="comment"># Custom comment header</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># Pagination size</span></span><br><span class="line">  <span class="attr">language:</span> <span class="comment"># Language, available values: en, zh-cn</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">false</span> <span class="comment"># Article reading statistic</span></span><br><span class="line">  <span class="attr">comment_count:</span> <span class="literal">true</span> <span class="comment"># If false, comment count will only be displayed in post page, not in home page</span></span><br><span class="line">  <span class="attr">recordIP:</span> <span class="literal">false</span> <span class="comment"># Whether to record the commenter IP</span></span><br><span class="line">  <span class="attr">serverURLs:</span> <span class="comment"># When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)</span></span><br><span class="line">  <span class="comment">#post_meta_order: 0</span></span><br></pre></td></tr></table></figure>

<p>配置好后，使用<code>hexo g</code>与<code>hexo s</code>命令部署启动查看效果即可</p>
<img src="/blog/2023/03/21/Hexo%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/image-20230321181707134.png" style="display: inline; border-style: none;">

 
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo添加鼠标点击桃心特效/网站底部添加网站运行时间</title>
    <url>/blog/2023/03/23/Hexo%E6%B7%BB%E5%8A%A0%E9%BC%A0%E6%A0%87%E7%82%B9%E5%87%BB%E6%A1%83%E5%BF%83%E7%89%B9%E6%95%88-%E7%BD%91%E7%AB%99%E5%BA%95%E9%83%A8%E6%B7%BB%E5%8A%A0%E7%BD%91%E7%AB%99%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4/</url>
    <content><![CDATA[<h4 id="添加鼠标点击桃心特效"><a href="#添加鼠标点击桃心特效" class="headerlink" title="添加鼠标点击桃心特效"></a>添加鼠标点击桃心特效</h4><p>在主题目录的<code>source</code>目录下新建<code>love.js</code> <code> ...\themes\next\source\love.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">!<span class="keyword">function</span>(<span class="params">e,t,a</span>)&#123;<span class="keyword">function</span> <span class="title function_">n</span>(<span class="params"></span>)&#123;<span class="title function_">c</span>(<span class="string">&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 500%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;</span>),<span class="title function_">o</span>(),<span class="title function_">r</span>()&#125;<span class="keyword">function</span> <span class="title function_">r</span>(<span class="params"></span>)&#123;<span class="keyword">for</span>(<span class="keyword">var</span> e=<span class="number">0</span>;e&lt;d.<span class="property">length</span>;e++)d[e].<span class="property">alpha</span>&lt;=<span class="number">0</span>?(t.<span class="property">body</span>.<span class="title function_">removeChild</span>(d[e].<span class="property">el</span>),d.<span class="title function_">splice</span>(e,<span class="number">1</span>)):(d[e].<span class="property">y</span>--,d[e].<span class="property">scale</span>+=<span class="number">.004</span>,d[e].<span class="property">alpha</span>-=<span class="number">.013</span>,d[e].<span class="property">el</span>.<span class="property">style</span>.<span class="property">cssText</span>=<span class="string">&quot;left:&quot;</span>+d[e].<span class="property">x</span>+<span class="string">&quot;px;top:&quot;</span>+d[e].<span class="property">y</span>+<span class="string">&quot;px;opacity:&quot;</span>+d[e].<span class="property">alpha</span>+<span class="string">&quot;;transform:scale(&quot;</span>+d[e].<span class="property">scale</span>+<span class="string">&quot;,&quot;</span>+d[e].<span class="property">scale</span>+<span class="string">&quot;) rotate(45deg);background:&quot;</span>+d[e].<span class="property">color</span>+<span class="string">&quot;;z-index:99999&quot;</span>);<span class="title function_">requestAnimationFrame</span>(r)&#125;<span class="keyword">function</span> <span class="title function_">o</span>(<span class="params"></span>)&#123;<span class="keyword">var</span> t=<span class="string">&quot;function&quot;</span>==<span class="keyword">typeof</span> e.<span class="property">onclick</span>&amp;&amp;e.<span class="property">onclick</span>;e.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params">e</span>)&#123;t&amp;&amp;<span class="title function_">t</span>(),<span class="title function_">i</span>(e)&#125;&#125;<span class="keyword">function</span> <span class="title function_">i</span>(<span class="params">e</span>)&#123;<span class="keyword">var</span> a=t.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);a.<span class="property">className</span>=<span class="string">&quot;heart&quot;</span>,d.<span class="title function_">push</span>(&#123;<span class="attr">el</span>:a,<span class="attr">x</span>:e.<span class="property">clientX</span>-<span class="number">5</span>,<span class="attr">y</span>:e.<span class="property">clientY</span>-<span class="number">5</span>,<span class="attr">scale</span>:<span class="number">1</span>,<span class="attr">alpha</span>:<span class="number">1</span>,<span class="attr">color</span>:<span class="title function_">s</span>()&#125;),t.<span class="property">body</span>.<span class="title function_">appendChild</span>(a)&#125;<span class="keyword">function</span> <span class="title function_">c</span>(<span class="params">e</span>)&#123;<span class="keyword">var</span> a=t.<span class="title function_">createElement</span>(<span class="string">&quot;style&quot;</span>);a.<span class="property">type</span>=<span class="string">&quot;text/css&quot;</span>;<span class="keyword">try</span>&#123;a.<span class="title function_">appendChild</span>(t.<span class="title function_">createTextNode</span>(e))&#125;<span class="keyword">catch</span>(t)&#123;a.<span class="property">styleSheet</span>.<span class="property">cssText</span>=e&#125;t.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;head&quot;</span>)[<span class="number">0</span>].<span class="title function_">appendChild</span>(a)&#125;<span class="keyword">function</span> <span class="title function_">s</span>(<span class="params"></span>)&#123;<span class="keyword">return</span><span class="string">&quot;rgb(&quot;</span>+~~(<span class="number">255</span>*<span class="title class_">Math</span>.<span class="title function_">random</span>())+<span class="string">&quot;,&quot;</span>+~~(<span class="number">255</span>*<span class="title class_">Math</span>.<span class="title function_">random</span>())+<span class="string">&quot;,&quot;</span>+~~(<span class="number">255</span>*<span class="title class_">Math</span>.<span class="title function_">random</span>())+<span class="string">&quot;)&quot;</span>&#125;<span class="keyword">var</span> d=[];e.<span class="property">requestAnimationFrame</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">return</span> e.<span class="property">requestAnimationFrame</span>||e.<span class="property">webkitRequestAnimationFrame</span>||e.<span class="property">mozRequestAnimationFrame</span>||e.<span class="property">oRequestAnimationFrame</span>||e.<span class="property">msRequestAnimationFrame</span>||<span class="keyword">function</span>(<span class="params">e</span>)&#123;<span class="built_in">setTimeout</span>(e,<span class="number">1e3</span>/<span class="number">60</span>)&#125;&#125;(),<span class="title function_">n</span>()&#125;(<span class="variable language_">window</span>,<span class="variable language_">document</span>);</span><br></pre></td></tr></table></figure>

<p>修改主题的<code>_layout.swig</code>文件，路径：<code>...\themes\next\layout\_layout.swig</code></p>
<p>在<code>&lt;head&gt;</code>标签中添加<code>love.js</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/love.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id><a href="#" class="headerlink" title></a></h6><h4 id="网站底部添加网站运行时间"><a href="#网站底部添加网站运行时间" class="headerlink" title="网站底部添加网站运行时间"></a>网站底部添加网站运行时间</h4><p>修改主题下<code>...\themes\next\layout\_partials\footer.swig</code>，并添加内容如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 网站运行时间的设置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;timeDate&quot;</span>&gt;</span>载入天数...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;times&quot;</span>&gt;</span>载入时分秒...<span class="tag">&lt;/<span class="name">span</span>&gt;</span>  Sometimes your whole life boils down to one insame move.</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">createtime</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> grt= <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;01/05/2020 00:00:00&quot;</span>);<span class="comment">//此处修改你的建站时间或者网站上线时间</span></span></span><br><span class="line"><span class="language-javascript">        now.<span class="title function_">setTime</span>(now.<span class="title function_">getTime</span>()+<span class="number">250</span>);</span></span><br><span class="line"><span class="language-javascript">        days = (now - grt ) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>; dnum = <span class="title class_">Math</span>.<span class="title function_">floor</span>(days);</span></span><br><span class="line"><span class="language-javascript">        hours = (now - grt ) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> - (<span class="number">24</span> * dnum); hnum = <span class="title class_">Math</span>.<span class="title function_">floor</span>(hours);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(<span class="title class_">String</span>(hnum).<span class="property">length</span> ==<span class="number">1</span> )&#123;hnum = <span class="string">&quot;0&quot;</span> + hnum;&#125; minutes = (now - grt ) / <span class="number">1000</span> /<span class="number">60</span> - (<span class="number">24</span> * <span class="number">60</span> * dnum) - (<span class="number">60</span> * hnum);</span></span><br><span class="line"><span class="language-javascript">        mnum = <span class="title class_">Math</span>.<span class="title function_">floor</span>(minutes); <span class="keyword">if</span>(<span class="title class_">String</span>(mnum).<span class="property">length</span> ==<span class="number">1</span> )&#123;mnum = <span class="string">&quot;0&quot;</span> + mnum;&#125;</span></span><br><span class="line"><span class="language-javascript">        seconds = (now - grt ) / <span class="number">1000</span> - (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * dnum) - (<span class="number">60</span> * <span class="number">60</span> * hnum) - (<span class="number">60</span> * mnum);</span></span><br><span class="line"><span class="language-javascript">        snum = <span class="title class_">Math</span>.<span class="title function_">round</span>(seconds); <span class="keyword">if</span>(<span class="title class_">String</span>(snum).<span class="property">length</span> ==<span class="number">1</span> )&#123;snum = <span class="string">&quot;0&quot;</span> + snum;&#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;timeDate&quot;</span>).<span class="property">innerHTML</span> = <span class="string">&quot;本站已安全运行 &quot;</span>+dnum+<span class="string">&quot; 天 &quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;times&quot;</span>).<span class="property">innerHTML</span> = hnum + <span class="string">&quot; 小时 &quot;</span> + mnum + <span class="string">&quot; 分 &quot;</span> + snum + <span class="string">&quot; 秒&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="built_in">setInterval</span>(<span class="string">&quot;createtime()&quot;</span>,<span class="number">250</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置好后，使用<code>hexo g</code>与<code>hexo s</code>命令部署启动查看效果即可</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo美化赞赏按钮样式</title>
    <url>/blog/2023/03/24/Hexo%E7%BE%8E%E5%8C%96%E8%B5%9E%E8%B5%8F%E6%8C%89%E9%92%AE%E6%A0%B7%E5%BC%8F/</url>
    <content><![CDATA[<p>​	要对赞赏按钮进行美化，首先需要找到赞赏功能的组件以及组件样式文件，以下是路径：</p>
<p>​	组件路径：<code>...\themes\next\layout\_partials\post\post-reward.swig</code></p>
<p>​	组件样式路径：<code>...\themes\next\source\css\_common\components\post\post-reward.styl</code></p>
<h4 id="修改赞赏组件文件"><a href="#修改赞赏组件文件" class="headerlink" title="修改赞赏组件文件"></a>修改赞赏组件文件</h4><p>​	修改文件中的button按钮</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;reward-container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; page.reward_settings.comment &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;var qr = document.getElementById(&#x27;qr&#x27;); qr.style.display = (qr.style.display === &#x27;none&#x27;) ? &#x27;block&#x27; : &#x27;none&#x27;;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;cursor:pointer;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-qrcode fa-2x&quot;</span> <span class="attr">style</span>=<span class="string">&quot;line-height:35px;font:normal normal normal 25px/1 FontAwesome;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;qr&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &#123;%- for name, image in theme.reward %&#125;</span><br><span class="line">      &#123;%- set builtin = [&#x27;wechatpay&#x27;, &#x27;alipay&#x27;, &#x27;paypal&#x27;, &#x27;bitcoin&#x27;] %&#125;</span><br><span class="line">      &#123;%- if builtin.includes(name) %&#125;</span><br><span class="line">        &#123;%- set translation = __(&#x27;reward.&#x27; + name) %&#125;</span><br><span class="line">      &#123;% else %&#125;</span><br><span class="line">        &#123;%- set translation = name %&#125;</span><br><span class="line">      &#123;%- endif %&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;display: inline-block;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; url_for(image) &#125;&#125;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&#123;&#123; author &#125;&#125; &#123;&#123; translation &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; translation &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;%- endfor %&#125;</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="修改赞赏组件样式文件"><a href="#修改赞赏组件样式文件" class="headerlink" title="修改赞赏组件样式文件"></a>修改赞赏组件样式文件</h4><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.reward-container</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">90%</span>;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#e4303038</span>;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">0.2s</span> ease-out;</span><br><span class="line"></span><br><span class="line">    <span class="selector-pseudo">&amp;:hover</span> &#123;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">      <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">      -webkit-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">16px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.2</span>), <span class="number">0</span> <span class="number">6px</span> <span class="number">20px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.19</span>);</span><br><span class="line">      -moz-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">16px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.2</span>), <span class="number">0</span> <span class="number">6px</span> <span class="number">20px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.19</span>);</span><br><span class="line">      <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">16px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.2</span>), <span class="number">0</span> <span class="number">6px</span> <span class="number">20px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.19</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​	根据自己的需求，可能用到的赞赏配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">reward_settings:</span></span><br><span class="line">  <span class="comment"># If true, reward will be displayed in every article by default.</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">animation:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">comment:</span> <span class="string">赞赏一杯咖啡</span></span><br></pre></td></tr></table></figure>

<p>​	以下是效果图</p>
<img src="/blog/2023/03/24/Hexo%E7%BE%8E%E5%8C%96%E8%B5%9E%E8%B5%8F%E6%8C%89%E9%92%AE%E6%A0%B7%E5%BC%8F/reward.gif" style="display: inline; border-style: none;">
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA常用插件</title>
    <url>/blog/2023/04/07/IDEA%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<h4 id="Arthas-Idea"><a href="#Arthas-Idea" class="headerlink" title="Arthas Idea"></a><a href="https://plugins.jetbrains.com/plugin/13581-arthas-idea">Arthas Idea</a></h4><p>Java 应用诊断利器，Arthas 是一款线上监控诊断产品，通过全局视角实时查看应用 load、内存、gc、线程的状态信息，并能在不修改应用代码的情况下，对业务问题进行诊断，包括查看方法调用的出入参、异常，监测方法执行耗时，类加载信息等，大大提升线上问题排查效率。</p>
<hr>
<h4 id="Chinese-Simplified-Language-Pack-x2F-中文语言包"><a href="#Chinese-Simplified-Language-Pack-x2F-中文语言包" class="headerlink" title="Chinese (Simplified) Language Pack &#x2F; 中文语言包"></a><strong><a href="https://plugins.jetbrains.com/plugin/13710-chinese-simplified-language-pack----">Chinese (Simplified) Language Pack &#x2F; 中文语言包</a></strong></h4><p>中文语言包将为您的 IntelliJ IDEA, AppCode, CLion, DataGrip, GoLand, PyCharm, PhpStorm, RubyMine, WebStorm, 和Rider 带来完全中文化的界面</p>
<hr>
<h4 id="SonarLint"><a href="#SonarLint" class="headerlink" title="SonarLint"></a><a href="https://plugins.jetbrains.com/plugin/7973-sonarlint">SonarLint</a></h4><p>SonarLint是一个免费的IDE扩展，可以实时查找和修复编码问题，在编码时标记问题，就像拼写检查器一样。它不仅提供了一个linter，还提供了丰富的上下文指导，帮助开发人员理解为什么存在问题，评估风险，并教育他们如何解决问题。这有助于提高他们的技能，提高他们的生产力，并拥有他们的代码，将linting提升到一个不同的水平。</p>
<hr>
<h4 id="Easy-Javadoc"><a href="#Easy-Javadoc" class="headerlink" title="Easy Javadoc"></a><a href="https://plugins.jetbrains.com/plugin/12977-easy-javadoc">Easy Javadoc</a></h4><p>这个插件可以帮助您快速完成中文javadoc&#x2F;kdoc文档。支持三种类型的javadoc&#x2F;kdoc：字段、方法和类。</p>
<hr>
<h4 id="Grep-Console"><a href="#Grep-Console" class="headerlink" title="Grep Console"></a><a href="https://plugins.jetbrains.com/plugin/7125-grep-console">Grep Console</a></h4><p>更改匹配文本的颜色；将输出填充到新的控制台选项卡中；使用自定义groovy脚本或插件更改输出或执行任何操作；过滤掉不需要的线路；stdout&#x2F;stderr流混合的解决方案；折叠输出；清除匹配的控制台；</p>
<hr>
<h4 id="Indent-Rainbow"><a href="#Indent-Rainbow" class="headerlink" title="Indent Rainbow"></a><a href="https://plugins.jetbrains.com/plugin/13308-indent-rainbow">Indent Rainbow</a></h4><p>一个简单的扩展，使缩进更具可读性；这个扩展为文本前面的缩进着色，每一步交替使用六种不同的颜色。</p>
<hr>
<h4 id="Json-Parser"><a href="#Json-Parser" class="headerlink" title="Json Parser"></a><a href="https://plugins.jetbrains.com/plugin/10650-json-parser">Json Parser</a></h4><p>Simple JSON Parser是一个用于验证和格式化JSON字符串的IntelliJ IDE插件</p>
<hr>
<h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a><a href="https://plugins.jetbrains.com/plugin/12820-redis">Redis</a></h4><p>该插件可以方便我们快速查看Redis缓存中的数据，支持多种键值类型查看，也可以快速新增删除缓存数据</p>
<hr>
<h4 id="Restful-Fast-Request"><a href="#Restful-Fast-Request" class="headerlink" title="Restful Fast Request"></a><a href="https://plugins.jetbrains.com/plugin/16988-restful-fast-request">Restful Fast Request</a></h4><p>Restful Fast Request 是一个类似于 Postman 的 IDEA 插件，可帮助开发人员有效地调试 API。它是一个功能强大的 restful 工具包（http 客户端）插件，可帮助您通过现有方法快速生成 URL 和参数。插件 &#x3D; API 调试工具 + API 管理器工具 + API 搜索工具<br>插件有一个漂亮的界面来撰写请求、检查服务器响应、存储您的 API 请求和导出 API 请求</p>
<hr>
<h4 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a><a href="https://plugins.jetbrains.com/plugin/6317-lombok/versions">Lombok</a></h4><p>可以使用注解帮我们自动生成get&#x2F;set等一系列方法；可以使用@Builder注解快速构建对象等等…简化日常开发</p>
<hr>
<h4 id="JProfiler"><a href="#JProfiler" class="headerlink" title="JProfiler"></a><a href="https://plugins.jetbrains.com/plugin/253-jprofiler">JProfiler</a></h4><p>由ej-technologies为JProfiler提供的官方JProfiler插件。使用此插件，可以从 IDEA 中使用 JProfiler 分析选定的运行配置。</p>
<hr>
]]></content>
      <categories>
        <category>IDEA</category>
        <category>常用插件</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合Arthas诊断利器</title>
    <url>/blog/2023/04/01/SpringBoot%E6%95%B4%E5%90%88Arthas%E8%AF%8A%E6%96%AD%E5%88%A9%E5%99%A8/</url>
    <content><![CDATA[<h4 id="什么是Arthas"><a href="#什么是Arthas" class="headerlink" title="什么是Arthas"></a>什么是Arthas</h4><p>Arthas 是一款线上监控诊断产品，通过全局视角实时查看应用 load、内存、gc、线程的状态信息，并能在不修改应用代码的情况下，对业务问题进行诊断，包括查看方法调用的出入参、异常，监测方法执行耗时，类加载信息等，大大提升线上问题排查效率。</p>
<h4 id="Arthas（阿尔萨斯）能为你做什么"><a href="#Arthas（阿尔萨斯）能为你做什么" class="headerlink" title="Arthas（阿尔萨斯）能为你做什么"></a>Arthas（阿尔萨斯）能为你做什么</h4><p>Arthas 是 Alibaba 开源的 Java 诊断工具，深受开发者喜爱。<br>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>
<ol>
<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>
<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>
<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>
<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>
<li>是否有一个全局视角来查看系统的运行状况？</li>
<li>有什么办法可以监控到 JVM 的实时运行状态？</li>
<li>怎么快速定位应用的热点，生成火焰图？</li>
<li>怎样直接从 JVM 内查找某个类的实例？</li>
</ol>
<p>Arthas 支持 JDK 6+，支持 Linux&#x2F;Mac&#x2F;Windows，采用命令行交互模式，同时提供丰富的 Tab 自动补全功能，进一步方便进行问题的定位和诊断。</p>
<h4 id="在SpringBoot项目中导入Arthas依赖"><a href="#在SpringBoot项目中导入Arthas依赖" class="headerlink" title="在SpringBoot项目中导入Arthas依赖"></a>在SpringBoot项目中导入Arthas依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.taobao.arthas<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>arthas-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果仓库没有该依赖可以去官网下载jar包，<a href="https://arthas.aliyun.com/doc/download.html">Arthas 下载</a></p>
<h4 id="启动Arthas"><a href="#启动Arthas" class="headerlink" title="启动Arthas"></a>启动Arthas</h4><p>引入<code>arthas-spring-boot-starter</code>后，在启动程序时便会attach自身进程</p>
<img src="/blog/2023/04/01/SpringBoot%E6%95%B4%E5%90%88Arthas%E8%AF%8A%E6%96%AD%E5%88%A9%E5%99%A8/image-20230401165306175.png" style="display: inline; border-style: none;">

<p>看到 <code>c.a.a.spring.ArthasConfiguration: Arthas agent start success.</code>表示 Arthas 已经启动成功了</p>
<p>默认IP和端口地址是：<a href="http://localhost:8563/">http://localhost:8563/</a></p>
<p>如果要修改IP和端口，可以参考官网yaml配置，配置在自己的项目中</p>
<img src="/blog/2023/04/01/SpringBoot%E6%95%B4%E5%90%88Arthas%E8%AF%8A%E6%96%AD%E5%88%A9%E5%99%A8/image-20230401165523423.png" style="display: inline; border-style: none;">

<p>到此我们就可以使用命令查看接口耗时情况等等..  <a href="https://arthas.aliyun.com/doc/commands.html">Arthas 命令列表</a></p>
<h4 id="IDEA-使用-Arthas插件，快速生成命令"><a href="#IDEA-使用-Arthas插件，快速生成命令" class="headerlink" title="IDEA 使用 Arthas插件，快速生成命令"></a>IDEA 使用 Arthas插件，快速生成命令</h4><p>在IDEA -&gt; Marketplace中搜索：<code>Arthas Idea</code>，安装即可</p>
<img src="/blog/2023/04/01/SpringBoot%E6%95%B4%E5%90%88Arthas%E8%AF%8A%E6%96%AD%E5%88%A9%E5%99%A8/image-20230401165959917.png" style="display: inline; border-style: none;">

<p>安装好后，找到想要诊断的方法，右键菜单会出现 Arthas Command 命令菜单，选择自己想要的命令，就会自动生成到剪切板</p>
<img src="/blog/2023/04/01/SpringBoot%E6%95%B4%E5%90%88Arthas%E8%AF%8A%E6%96%AD%E5%88%A9%E5%99%A8/image-20230401170249009.png" style="display: inline; border-style: none;">

<h4 id="在Arthas控制台使用命令查看接口耗时情况（Trace-命令）"><a href="#在Arthas控制台使用命令查看接口耗时情况（Trace-命令）" class="headerlink" title="在Arthas控制台使用命令查看接口耗时情况（Trace 命令）"></a>在Arthas控制台使用命令查看接口耗时情况（<a href="https://arthas.aliyun.com/doc/trace.html">Trace 命令</a>）</h4><img src="/blog/2023/04/01/SpringBoot%E6%95%B4%E5%90%88Arthas%E8%AF%8A%E6%96%AD%E5%88%A9%E5%99%A8/image-20230401171039094.png" style="display: inline; border-style: none;">

]]></content>
      <categories>
        <category>SpringBoot</category>
        <category>Arthas</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
        <tag>SpringBoot</tag>
        <tag>Arthas</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Spring特性实现接口多实现类的动态调用</title>
    <url>/blog/2023/04/10/Spring%E6%8E%A5%E5%8F%A3%E5%AD%98%E5%9C%A8%E5%A4%9A%E4%B8%AA%E5%AE%9E%E7%8E%B0%E7%B1%BB%E6%97%B6%E7%9A%84%E5%8A%A8%E6%80%81%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<h4 id="问题的提出"><a href="#问题的提出" class="headerlink" title="问题的提出"></a>问题的提出</h4><p>在实际工作中，我们经常会遇到一个接口及多个实现类的情况，并且在不同的条件下会使用不同的实现类。从使用方式上看，有些类似SPI的用法，但是由于SPI的</p>
<p>使用并不是太方便，那么怎么办呢？我们可以借助ApplicationContext的getBeansOfType来实现我们需要的结果。</p>
<p>首先我们看一下这个方法的签名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;T&gt; Map&lt;String, T&gt; <span class="title function_">getBeansOfType</span><span class="params">(Class&lt;T&gt; type)</span> <span class="keyword">throws</span> BeansException;</span><br></pre></td></tr></table></figure>

<p>从上面的代码上我们可以看出来这个方法能返回一个接口的全部实现类（前提是所有实现类都必须由Spring IoC容器管理）。</p>
<p><code>org.springframework.beans</code>及<code>org.springframework.context</code>这两个包是Spring IoC容器的基础，</p>
<p>其中重要的类有<code>BeanFactory</code>，<code>BeanFactory</code>是<code>IoC</code>容器的核心接口，其职责包括：实例化、定位、配置应用程序中的对象及建立这些对象间的依赖关系。</p>
<p><code>ApplicationContext</code>作为<code>BeanFactory</code>的子类，在<code>Bean</code>管理的功能上得到了很大的增强，也更易于与<code>Spring AOP</code>集成使用。</p>
<p><code>ApplicationContext</code>的一种实际应用方式，如果Bean实现了<code>ApplicationContextAware</code>接口的话，<code>Spring</code>将调用<code>Bean</code>的<code>setApplicationContext()</code>方</p>
<p>法，将<code>bean</code>所在应用上下文引用传入进来。</p>
<h4 id="工作实例"><a href="#工作实例" class="headerlink" title="工作实例"></a>工作实例</h4><p>我们有N多个报表，每个报表需要实现不同的查询功能，同时，我们可以用一个枚举类型类标识不同的报表，以下是具体实现</p>
<p>枚举类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ReportEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">    R004_FISP(<span class="string">&quot;R004_FISP&quot;</span>),</span><br><span class="line"></span><br><span class="line">    R004_PBOC(<span class="string">&quot;R004_PBOC&quot;</span>),</span><br><span class="line"></span><br><span class="line">    R004_AMAC(<span class="string">&quot;R004_AMAC&quot;</span>),</span><br><span class="line"></span><br><span class="line">    R004_CUS(<span class="string">&quot;R004_CUS&quot;</span>),</span><br><span class="line"></span><br><span class="line">    R004_SAC(<span class="string">&quot;R004_SAC&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String type;</span><br><span class="line"></span><br><span class="line">    ReportEnum(String type) &#123;</span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现字符串转枚举的静态方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type 类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> ReportEnum&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ReportEnum <span class="title function_">fromType</span><span class="params">(String type)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> EnumSet.allOf(ReportEnum.class).stream()</span><br><span class="line">                .filter(s -&gt; s.toString().equals(type))</span><br><span class="line">                .findAny()</span><br><span class="line">                .orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Invalid type: &quot;</span> + type));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接口类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AssociatedProcessService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 报表枚举</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> ReportEnum&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ReportEnum <span class="title function_">getCode</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取细节信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> List&#125;&lt;&#123;<span class="doctag">@link</span> AssociatedProcessDetailVo&#125;&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;AssociatedProcessDetailVo&gt; <span class="title function_">getDetail</span><span class="params">(Map&lt;String, Object&gt; request)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AssProFispServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AssociatedProcessService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ReportEnum <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ReportEnum.R004_FISP;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;AssociatedProcessDetailVo&gt; <span class="title function_">getDetail</span><span class="params">(Map&lt;String, Object&gt; request)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>工厂类&#x2F;工具类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringContextUtil</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;ReportEnum, AssociatedProcessService&gt; associatedProcessBeanMap;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">    Map&lt;String, AssociatedProcessService&gt; map = applicationContext.getBeansOfType(AssociatedProcessService.class);</span><br><span class="line">    associatedProcessBeanMap = <span class="keyword">new</span> <span class="title class_">EnumMap</span>&lt;&gt;(ReportEnum.class);</span><br><span class="line">    map.forEach((key, value) -&gt; associatedProcessBeanMap.put(value.getCode(), value));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">AssociatedProcessService</span>&gt; T <span class="title function_">getAssociatedProcessService</span><span class="params">(ReportEnum code)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (T) associatedProcessBeanMap.get(code);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>控制器调用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询关联流程详情</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request 基础数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> ObjectRestResponse&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResourceDeclare(sysId = BaseConst.SYS_ID, note = &quot;&quot;, type = BaseConst.PUBLIC_URL)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/queryAssociatedProcessesDetail&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;查询关联流程详情&quot;, notes = &quot;查询关联流程详情&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ObjectRestResponse&lt;List&lt;AssociatedProcessDetailVo&gt;&gt; <span class="title function_">queryAssociatedProcessesDetail</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;String, Object&gt; request)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;开始处理-查询关联流程详情接口逻辑, request:&#123;&#125;&quot;</span>, request);</span><br><span class="line">            <span class="type">String</span> <span class="variable">reportType</span> <span class="operator">=</span> (String) request.get(<span class="string">&quot;reportType&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ObjectRestResponse</span>&lt;List&lt;AssociatedProcessDetailVo&gt;&gt;()</span><br><span class="line">                    .data(SpringContextUtil.getAssociatedProcessService(ReportEnum.fromType(reportType)).getDetail(request))</span><br><span class="line">                    .rel(<span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BaseException</span>(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SpringBoot</category>
        <category>接口动态调用</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>接口动态调用</tag>
      </tags>
  </entry>
  <entry>
    <title>Valine评论丢失问题</title>
    <url>/blog/2023/03/28/Valine%E8%AF%84%E8%AE%BA%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>​	起因是今天发现之前在文章下的评论消失不见了，于是开始思考问题出在哪里</p>
<p>​	首先打开F12控制台，看下Valine评论调用接口是否正常，如下</p>
<img src="/blog/2023/03/28/Valine%E8%AF%84%E8%AE%BA%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98/image-20230328111131681.png" style="display: inline; border-style: none;">

<p>​	可以看到状态是200没问题，但是切换到Response发现并没有数据返回</p>
<img src="/blog/2023/03/28/Valine%E8%AF%84%E8%AE%BA%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98/image-20230328111352583.png" style="display: inline; border-style: none;">

<p>​	这就奇怪了，明明之前是有评论数据的，为什么没有返回，于是想着去 <a href="https://console.leancloud.cn/">LeanCloud</a> 控制台看一下</p>
<img src="/blog/2023/03/28/Valine%E8%AF%84%E8%AE%BA%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98/image-20230328111743416.png" style="display: inline; border-style: none;">

<p>​	从控制台也可以看出是有评论数据的，带着疑问继续往下探索，我们点开某一条评论的详细信息查看</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;nick&quot;</span><span class="punctuation">:</span> <span class="string">&quot;一尘不染的真心&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;updatedAt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2023-03-28T02:33:59.001Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ACL&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;*&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;read&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;objectId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;642252179cc5f14274a130b9&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;mail&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ua&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;insertedAt&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;__type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Date&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;iso&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2023-03-28T02:33:58.865Z&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;createdAt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2023-03-28T02:33:59.001Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;link&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;comment&quot;</span><span class="punctuation">:</span> <span class="string">&quot;测试评论... :dog:&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/2023/03/21/Hexo添加评论功能/&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;QQAvatar&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>​	从中注意到有一个属性很关键，没错那就是 <code>url</code>，突然想到前几天网站<code>root</code>路径进行了迁移，但是 <a href="https://console.leancloud.cn/">LeanCloud</a> 中的评论路径还是老的</p>
<p>​	由此可以看出再请求 <a href="https://console.leancloud.cn/">LeanCloud</a> 时是跟文章的 <code>url</code> 有关的（其实从请求参数上也可以看出，只不过被转码了）</p>
   <img src="/blog/2023/03/28/Valine%E8%AF%84%E8%AE%BA%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98/1A32B358.gif" style="display: inline; border-style: none;">

<p>​	问题找到了，我们修改一下评论的<code>url</code>再看下，发现问题解决了！</p>
<p>​	url: <code>/blog/2023/03/21/Hexo添加评论功能/</code></p>
<img src="/blog/2023/03/28/Valine%E8%AF%84%E8%AE%BA%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98/image-20230328133653297.png" style="display: inline; border-style: none;">
]]></content>
      <categories>
        <category>Valine</category>
        <category>问题处理</category>
      </categories>
      <tags>
        <tag>Valine</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Windows系统日志中COM服务本地激活权限的问题，事件ID：10016</title>
    <url>/blog/2023/09/22/%E8%A7%A3%E5%86%B3Windows%E7%B3%BB%E7%BB%9F%E6%97%A5%E5%BF%97%E4%B8%ADCOM%E6%9C%8D%E5%8A%A1%E6%9C%AC%E5%9C%B0%E6%BF%80%E6%B4%BB%E6%9D%83%E9%99%90%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%8C%E4%BA%8B%E4%BB%B6ID%EF%BC%9A10016/</url>
    <content><![CDATA[<p>最近电脑开机后查看Windows日志发现系统日志中有这么一个警告，事件ID：<code>10016</code>，来源：<code>DistributedCOM</code></p>
<p>于是想办法解决掉这个警告⚠顺便可以提升我们对Windows运行的理解</p>
<p><img src="/blog/2023/09/22/%E8%A7%A3%E5%86%B3Windows%E7%B3%BB%E7%BB%9F%E6%97%A5%E5%BF%97%E4%B8%ADCOM%E6%9C%8D%E5%8A%A1%E6%9C%AC%E5%9C%B0%E6%BF%80%E6%B4%BB%E6%9D%83%E9%99%90%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%8C%E4%BA%8B%E4%BB%B6ID%EF%BC%9A10016/image-20230922105355466.png" alt="image-20230922105355466" style="display: inline; border-style: none;"></p>
<p>在这个警告中我们需要关注2个点</p>
<p>第一：关系到哪个<code>组或用户名</code> -》可以看到是 <code>LOCAL SERVICE </code></p>
<p>第二：关系到哪个<code>APPID（应用程序ID）</code> -》可以看到是 <code>4839DDB7-58C2-48F5-8283-E1D1807D0D7D</code></p>
<p>好了，有了这两个关键信息我们就可以调整权限策略了</p>
<p>打开 <code>regedit</code> 注册表编辑器，搜索刚才的<code>APPID</code>，也可以在此路径下自行查找<code>计算机\HKEY_CLASSES_ROOT\AppID\</code></p>
<p><img src="/blog/2023/09/22/%E8%A7%A3%E5%86%B3Windows%E7%B3%BB%E7%BB%9F%E6%97%A5%E5%BF%97%E4%B8%ADCOM%E6%9C%8D%E5%8A%A1%E6%9C%AC%E5%9C%B0%E6%BF%80%E6%B4%BB%E6%9D%83%E9%99%90%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%8C%E4%BA%8B%E4%BB%B6ID%EF%BC%9A10016/image-20230922110042915.png" alt="image-20230922110042915" style="display: inline; border-style: none;"></p>
<p>我们通过搜索可以看到APPID以及对应的应用程序的名称，这样我们可以方便的去组件服务中去查找信息</p>
<p>打开 <code>dcomcnfg</code> 组件服务，进入<code>DCOM 配置</code> 找到刚才的应用程序名称</p>
<p><img src="/blog/2023/09/22/%E8%A7%A3%E5%86%B3Windows%E7%B3%BB%E7%BB%9F%E6%97%A5%E5%BF%97%E4%B8%ADCOM%E6%9C%8D%E5%8A%A1%E6%9C%AC%E5%9C%B0%E6%BF%80%E6%B4%BB%E6%9D%83%E9%99%90%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%8C%E4%BA%8B%E4%BB%B6ID%EF%BC%9A10016/image-20230922110335168.png" alt="image-20230922110335168" style="display: inline; border-style: none;"></p>
<p>右键属性 -》安全 -》自定义 -》编辑 -》找到需要更改权限的组或用户名（没有的去添加）-》最后勾选下面的本地激活即可</p>
<p><img src="/blog/2023/09/22/%E8%A7%A3%E5%86%B3Windows%E7%B3%BB%E7%BB%9F%E6%97%A5%E5%BF%97%E4%B8%ADCOM%E6%9C%8D%E5%8A%A1%E6%9C%AC%E5%9C%B0%E6%BF%80%E6%B4%BB%E6%9D%83%E9%99%90%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%8C%E4%BA%8B%E4%BB%B6ID%EF%BC%9A10016/image-20230922110559592.png" alt="image-20230922110559592" style="display: inline; border-style: none;"></p>
<p>下图是如何查找添加组和用户名：</p>
<p><img src="/blog/2023/09/22/%E8%A7%A3%E5%86%B3Windows%E7%B3%BB%E7%BB%9F%E6%97%A5%E5%BF%97%E4%B8%ADCOM%E6%9C%8D%E5%8A%A1%E6%9C%AC%E5%9C%B0%E6%BF%80%E6%B4%BB%E6%9D%83%E9%99%90%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%8C%E4%BA%8B%E4%BB%B6ID%EF%BC%9A10016/image-20230922110806887.png" alt="image-20230922110806887" style="display: inline; border-style: none;"></p>
<p>最后更改后，重启电脑就会发现刚才的警告就没有了<del>大功告成</del></p>
]]></content>
      <categories>
        <category>Windows</category>
        <category>Windows 日志</category>
      </categories>
      <tags>
        <tag>Windows 日志</tag>
        <tag>Windows 事件</tag>
      </tags>
  </entry>
  <entry>
    <title>转载：计算机网络相关知识</title>
    <url>/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<p><a name="pQzyw"></a></p>
<h1 id="📚计算机网络基础"><a href="#📚计算机网络基础" class="headerlink" title="📚计算机网络基础"></a>📚计算机网络基础</h1><hr>
<p><a name="L4fTH"></a></p>
<h2 id="请你简单说一下计算机网络的分层模型"><a href="#请你简单说一下计算机网络的分层模型" class="headerlink" title="请你简单说一下计算机网络的分层模型"></a>请你简单说一下计算机网络的分层模型</h2><p>计算机网络体系结构，一般有三种：OSI 七层模型、TCP&#x2F;IP 四层模型、五层结构。</p>
<p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696497708426-7f8c6a38-e590-4738-b6d5-72f004f977ac.png" style="display: inline; border-style: none;"></p>
<p>简单说，OSI是一个理论上的网络通信模型，TCP&#x2F;IP是实际上的网络通信模型，五层结构就是为了介绍网络原理而折中的网络通信模型。</p>
<blockquote>
<p><a name="NyxrN"></a></p>
</blockquote>
<h3 id="OSI-七层模型"><a href="#OSI-七层模型" class="headerlink" title="OSI 七层模型"></a>OSI 七层模型</h3><p>OSI 七层模型是国际标准化组织（International Organization for Standardization）制定的一个用于计算机或通信系统间互联的标准体系。</p>
<ul>
<li>应用层：通过应用进程之间的交互来完成特定网络应用，应用层协议定义的是应用进程间通信和交互的规则，常见的协议有：<strong>HTTP FTP  SMTP SNMP DNS</strong>.</li>
<li>表示层：数据的表示、安全、压缩。确保一个系统的应用层所发送的信息可以被另一个系统的应用层读取。</li>
<li>会话层：建立、管理、终止会话，是用户应用程序和网络之间的接口。</li>
<li>运输层：提供源端与目的端之间提供可靠的透明数据传输，传输层协议为不同主机上运行的进程提供逻辑通信。</li>
<li>网络层：将网络地址翻译成对应的物理地址，实现不同网络之间的路径选择, 协议有 <strong>ICMP IGMP IP 等</strong>.</li>
<li>数据链路层：在物理层提供比特流服务的基础上，建立相邻结点之间的数据链路。</li>
<li>物理层：建立、维护、断开物理连接。</li>
</ul>
<blockquote>
<p><a name="ysToc"></a></p>
</blockquote>
<h3 id="TCP-x2F-IP-四层模型"><a href="#TCP-x2F-IP-四层模型" class="headerlink" title="TCP&#x2F;IP 四层模型"></a>TCP&#x2F;IP 四层模型</h3><ul>
<li>应用层：对应于 OSI 参考模型的（应用层、表示层、会话层）。</li>
<li>传输层: 对应 OSI 的传输层，为应用层实体提供端到端的通信功能，保证了数据包的顺序传送及数据的完整性。</li>
<li>网际层：对应于 OSI 参考模型的网络层，主要解决主机到主机的通信问题。</li>
<li>网络接口层：与 OSI 参考模型的数据链路层、物理层对应。</li>
</ul>
<blockquote>
<p><a name="iP8tM"></a></p>
</blockquote>
<h3 id="TCP-x2F-IP-五层体系结构"><a href="#TCP-x2F-IP-五层体系结构" class="headerlink" title="TCP &#x2F; IP 五层体系结构"></a>TCP &#x2F; IP 五层体系结构</h3><ul>
<li>应用层：对应于 OSI 参考模型的（应用层、表示层、会话层）。</li>
<li>传输层：对应 OSI 参考模型的的传输层</li>
<li>网络层：对应 OSI 参考模型的的网络层</li>
<li>数据链路层：对应 OSI 参考模型的的数据链路层</li>
<li>物理层：对应 OSI 参考模型的的物理层。<br>  <a name="CbtIh"></a></li>
</ul>
<h2 id="每一层对应的网络协议有哪些？"><a href="#每一层对应的网络协议有哪些？" class="headerlink" title="每一层对应的网络协议有哪些？"></a>每一层对应的网络协议有哪些？</h2><p>下面用一张图来总结一下常见的网络协议，大家记住下面这张图就可以了。<br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696498191789-332522e5-12f2-4959-b302-9c210c250d36.png" style="display: inline; border-style: none;"><br><a name="CLPv4"></a></p>
<h2 id="聊聊五层计算机网络体系结构中，每一层对应的网络协议有哪些？"><a href="#聊聊五层计算机网络体系结构中，每一层对应的网络协议有哪些？" class="headerlink" title="聊聊五层计算机网络体系结构中，每一层对应的网络协议有哪些？"></a>聊聊五层计算机网络体系结构中，每一层对应的网络协议有哪些？</h2><p>这里为了方便大家记忆，我画了一个思维导图，思维导图如下：</p>
<p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696498569452-d5dfd6d7-d256-44b2-b2a5-ccd0a87000bd.png" style="display: inline; border-style: none;"><br><br><a name="RIpaQ"></a></p>
<h2 id="不同层之间的数据是怎么进行传输的？"><a href="#不同层之间的数据是怎么进行传输的？" class="headerlink" title="不同层之间的数据是怎么进行传输的？"></a>不同层之间的数据是怎么进行传输的？</h2><p>对于发送方而言，从上层到下层层层包装，对于接收方而言，从下层到上层，层层解开包装。</p>
<ul>
<li>发送方的应用进程向接收方的应用进程传送数据</li>
<li>AP先将数据交给本主机的应用层，应用层加上本层的控制信息H5就变成了下一层的数据单元</li>
<li>传输层收到这个数据单元后，加上本层的控制信息H4，再交给网络层，成为网络层的数据单元</li>
<li>到了数据链路层，控制信息被分成两部分，分别加到本层数据单元的首部（H2）和尾部（T2）</li>
<li>最后的物理层，进行比特流的传输</li>
</ul>
<p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696498283604-74075f3f-589f-4f5d-ba32-6c4975fab591.png" style="display: inline; border-style: none;"></p>
<p>这个过程和寄快递的包装过程有点类似，寄一个快递，每到一层，就加一个箱子，写上关于地址的信息。到了目的地之后，就一层层地拆开箱子，直到打开最后一层箱子，快递里的东西就到你的手里了。</p>
<p><a name="MsaB4"></a></p>
<h1 id="🔖计算机网络综合"><a href="#🔖计算机网络综合" class="headerlink" title="🔖计算机网络综合"></a>🔖计算机网络综合</h1><hr>
<p><a name="uY0UG"></a></p>
<h2 id="你从浏览器地址栏输入-url-，到最后主页的显示，经历了哪几个过程？"><a href="#你从浏览器地址栏输入-url-，到最后主页的显示，经历了哪几个过程？" class="headerlink" title="你从浏览器地址栏输入 url ，到最后主页的显示，经历了哪几个过程？"></a>你从浏览器地址栏输入 url ，到最后主页的显示，经历了哪几个过程？</h2><p>这道题大概的过程比较简单，但是有很多可以细挖的点。如DNS解析、HTTP报文格式、TCP三次握手、TCP四次挥手等等,所以复习这道题的时候可以结合后面的八股文一起看。</p>
<ol>
<li>DNS 解析：将域名解析成对应的 IP 地址。</li>
<li>TCP连接：与服务器通过三次握手，建立 TCP 连接</li>
<li>向服务器发送 HTTP 请求</li>
<li>服务器处理请求，返回 http 响应</li>
<li>浏览器解析并渲染页面</li>
<li>断开连接：TCP 四次挥手，连接结束</li>
</ol>
<p>这里用大家最熟悉的百度的网址（<a href="http://www.baidu.com)/">www.baidu.com）</a> 和 谷歌浏览器为例：<br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696498847514-9f5751a5-87bf-400a-8d38-b941e8f31260.png" style="display: inline; border-style: none;"></p>
<blockquote>
<p><strong>看完上面这个图之后，我们来探讨一下，这个过程的各个步骤使用了哪些协议呢？</strong></p>
</blockquote>
<p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696498936510-e15711cd-5a2f-4c67-90b9-595e92c24314.png" style="display: inline; border-style: none;"><br><a href="http://www.baidu.comliu到显示主页过程使用的协议/">www.baidu.comliu到显示主页过程使用的协议</a><br><a name="grRzh"></a></p>
<h2 id="DNS-的解析过程是什么样的？"><a href="#DNS-的解析过程是什么样的？" class="headerlink" title="DNS 的解析过程是什么样的？"></a>DNS 的解析过程是什么样的？</h2><p>DNS，英文全称是 <strong>Domain Name System</strong>，域名解析系统，它的作用也很明确，就是域名和 IP 相互映射。<br>DNS 的解析过程如下图所示：<br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696530114843-e0991dd2-e633-436f-b01a-d8711c32e576.png" style="display: inline; border-style: none;"><br>DNS解析流程<br>如果你要查询 <a href="http://www.baidu.com/">www.baidu.com</a> 的 IP 地址：</p>
<ul>
<li>首先会查找浏览器的缓存,看看是否能找到<strong><a href="http://www.baidu.com/">www.baidu.com</a></strong>对应的IP地址，找到就直接返回；否则进行下一步。</li>
<li>将请求发往给本地DNS服务器，如果查找到也直接返回，否则继续进行下一步；</li>
</ul>
<p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696530186814-1c855dea-c65c-4124-aa97-7d69d1a3436b.png" style="display: inline; border-style: none;"></p>
<ul>
<li>本地DNS服务器向<strong>根域名服务器</strong>发送请求，根域名服务器返回负责 <strong>com</strong> 的顶级域名服务器的IP地址的列表。</li>
<li>本地DNS服务器再向其中一个负责 <strong>com</strong> 的顶级域名服务器发送一个请求，返回负责 <strong>baidu.com</strong> 的权限域名服务器的IP地址列表。</li>
<li>本地DNS服务器再向其中一个权限域名服务器发送一个请求，返回 **<a href="http://www.baidu.com/">www.baidu.com</a> **所对应的IP地址。</li>
<li>找到本地地址后，本地 DNS 服务器会将 <a href="http://www.baidu.com/">www.baidu.com</a> 这个服务器的 IP 地址存储在本地的 DNS 缓存中，方便下次 DNS 服务器的寻找<br>  <a name="jlwPN"></a></li>
</ul>
<h2 id="请你说一下常见的端口以及其对应的服务"><a href="#请你说一下常见的端口以及其对应的服务" class="headerlink" title="请你说一下常见的端口以及其对应的服务"></a>请你说一下常见的端口以及其对应的服务</h2><p>常见端口这个应该后端程序员都不陌生，这里就不献丑了，我随便举几个例子，然后面试的时候可以根据自己熟悉的直接说就可以了：</p>
<p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696530520992-65d0507f-03ce-49ca-85db-8343cc07eb0e.png" style="display: inline; border-style: none;"><br><a name="lgQ9w"></a></p>
<h2 id="请你说一下WebSocket-与-Socket-之间的区别"><a href="#请你说一下WebSocket-与-Socket-之间的区别" class="headerlink" title="请你说一下WebSocket 与 Socket 之间的区别?"></a>请你说一下WebSocket 与 Socket 之间的区别?</h2><ul>
<li>Socket 在计算机网络中有“套接字”的意思，其实就是等于 <strong>IP 地址 + 端口 + 协议</strong>。</li>
</ul>
<blockquote>
<p>说具体点的，Socket 就是一套标准，它实现了对于 TCP&#x2F;IP 的高度封装，可以屏蔽网络细节，以方便开发者更好地进行网络编程。</p>
</blockquote>
<ul>
<li>而 WebSocket 就是在 Socket 的基础上实现的一个扩展，其是一个<strong>持久化的协议</strong>,它是伴随着 HTML 5 的出现一同产生的，用来解决 <strong>HTTP 不支持持久化连接</strong>问题的解决方案。</li>
</ul>
<blockquote>
<p>HTTP 为什么不支持持久化连接：<br><strong>HTTP 协议自身不对请求和响应之间的通信状态进行保存。 也就是说在 HTTP 这个级别，协议对于发送过的请求或响应都 不做持久化处理</strong> 。 不保留之前一切的请求或响应报文的信息，每当有新的请求发送时，就会有对应的新响应产生， 这是为了更快地处理大量事务，确保协议的可伸缩性。</p>
</blockquote>
<p>回到正题，WebSocket 和 Socket 之间有什么区别吗？</p>
<ul>
<li>Socket 一个是<strong>网编编程的标准接口（即套接字）</strong>，而 WebSocket 则是应用层的一种通信协议，其是在 Socket 的基础上实现的一种扩展。<br>  <a name="hhucj"></a></li>
</ul>
<h2 id="客户端的端口可以重复使用吗？"><a href="#客户端的端口可以重复使用吗？" class="headerlink" title="客户端的端口可以重复使用吗？"></a>客户端的端口可以重复使用吗？</h2><ul>
<li>在客户端执行 connect 函数的时候，只要<strong>客户端连接的服务器不是同一个</strong>，<strong>内核允许端口重复使用</strong>。</li>
</ul>
<blockquote>
<p>TCP 连接是由<strong>四元组（源IP地址，源端口，目的IP地址，目的端口）</strong>唯一确认的，那么只要四元组中其中一个元素发生了变化，那么就表示不同的 TCP 连接的。 </p>
</blockquote>
<p>所以，如果客户端已使用端口 64992 与服务端 A 建立了连接，那么客户端要与服务端 B 建立连接，还是可以使用端口 64992 的，因为内核是通过四元祖信息来定位一个 TCP 连接的，并不会因为客户端的端口号相同，而导致连接冲突的问题。<br><a name="wXPLb"></a></p>
<h2 id="Forward-和-Redirect的区别？"><a href="#Forward-和-Redirect的区别？" class="headerlink" title="Forward 和 Redirect的区别？"></a>Forward 和 Redirect的区别？</h2><blockquote>
<p><a name="pfgUJ"></a></p>
<h3 id="什么是-Forward-和-Redirect-？"><a href="#什么是-Forward-和-Redirect-？" class="headerlink" title="什么是  Forward 和 Redirect ？"></a>什么是  Forward 和 Redirect ？</h3></blockquote>
<ul>
<li><strong>直接转发方式（Forward）</strong> ，客户端和浏览器只发出一次请求，Servlet、HTML、JSP或其它信息资源，由第二个信息资源响应该请求，在请求对象request中，保存的对象对于每个信息资源是共享的。</li>
<li><strong>间接转发方式（Redirect）</strong> 实际是两次HTTP请求，服务器端在响应第一次请求的时候，让浏览器再向另外一个URL发出请求，从而达到转发的目的。</li>
</ul>
<p>这里举个通俗的例子：</p>
<ul>
<li>直接转发就相当于：“A找B借钱，B说没有，B去找C借，借到借不到都会把消息传递给A”；</li>
<li>间接转发就相当于：”A找B借钱，B说没有，让A去找C借”。</li>
</ul>
<p>看下这两个图，可以更容易理解一些:</p>
<ul>
<li>Redirect 的工作原理：</li>
</ul>
<p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696579379823-cbb8f7c0-e0f6-43e8-945a-dc173df71db3.png" style="display: inline; border-style: none;"></p>
<ul>
<li>forward 的工作原理</li>
</ul>
<p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696579380596-c3803810-33c1-4810-a62f-e262340deaca.png" style="display: inline; border-style: none;"></p>
<p><a name="q7yNe"></a></p>
<h1 id="🕸️HTTP"><a href="#🕸️HTTP" class="headerlink" title="🕸️HTTP"></a>🕸️HTTP</h1><hr>
<p><a name="HiMco"></a></p>
<h2 id="说一下-HTTP-常用的状态码及其含义"><a href="#说一下-HTTP-常用的状态码及其含义" class="headerlink" title="说一下 HTTP 常用的状态码及其含义?"></a>说一下 HTTP 常用的状态码及其含义?</h2><p>HTTP状态码首先应该知道个大概的分类：</p>
<p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696531229989-5a466086-1e9f-4afc-899e-9fe8ec08854e.png" style="display: inline; border-style: none;"></p>
<p>下面我列举一下几个常用的状态码，大家最好记一下，因为这个无论是在开发中还是在平时，都是非常重要的知识点，希望大家能记住吧：</p>
<p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696531540735-fe6d82da-a904-4033-81a5-2e9b9919a6eb.png" style="display: inline; border-style: none;"></p>
<p>这里找了一个之前看到的文章：程序员五一被拉去相亲，结果彻底搞懂了HTTP常用状态码，希望可以帮助大家记住常用的状态码：</p>
<blockquote>
<p>我有一个朋友……<br>叫小星，是个北漂程序员。<br>小星年纪不小了，还是个单身狗。家里很着急，小星也很着急。<br>可是，小星起身一看，眼前一闪闪闪闪闪闪闪闪闪……<br>——全是秃头抠脚大汉……<br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696531753097-18a9cf14-194c-4b8c-87ee-aa898869b2df.webp" style="display: inline; border-style: none;"><br>前一阵子好不容易来个实习生小姑娘，分给小星带，小星高兴坏了，结果姑娘没呆三天，受不了公司的九九六跑了。<br>所以，部门彻底沦为了和尚部门，拔剑四顾心茫然，不见妹子只见男。</p>
</blockquote>
<blockquote>
<p><strong>404（Not Found）：服务器无法根据客户端的请求找到资源（网页）</strong></p>
</blockquote>
<blockquote>
<p>老妈打电话又催了，小星说工作忙，没有女同事。<br>老妈问和你一起长大的小美还联系吗？<br>小美已经嫁做人妇，孩子都会叫爸爸了。</p>
</blockquote>
<blockquote>
<p><strong>301（Moved Permanently）：永久移动。请求的资源已被永久的移动到新URI。</strong></p>
</blockquote>
<blockquote>
<p>那你大学时谈过的小静呢？<br>小静已经重新开始，找了新的男朋友。</p>
</blockquote>
<blockquote>
<p><strong>302（Found）：临时移动。与301类似。但资源只是临时被移动。</strong><br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696531853118-5c92190b-e33a-4103-b109-67b5db590443.webp" style="display: inline; border-style: none;"></p>
</blockquote>
<blockquote>
<p>那我帮你安排相亲好了。<br>什么……好吧。<br>五一回家，老妈给小星安排了相亲。小星蔫头巴脑地去见相亲的小姐姐了，没想到，小姐姐还挺白净，小星一下子就支棱起来了。<br>小星高兴地和妹子聊了起来。妹子说她最近去过西安旅游，平时会去游泳，喜欢吃一些小吃。<br>——这，九九六的工作节奏基本剥夺了小星的业余生活，小星冷汗连连，只能“嗯”、“啊”。<br>终于，妹子问了一句，你的工作怎么样？<br>小星的脸上一下子泛起了红光，眼神里带着一种神圣的色彩。<br>你知道能应对亿级流量的高并发架构如何搭建吗？你知道高并发下保证幂等性的几种方式吗？你知道保证Redis高可用的几种方法吗……啊吧啊吧</p>
</blockquote>
<blockquote>
<p><strong>400（Bad Request）：客户端请求的语法错误，服务器无法理解。</strong><br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696531986381-5d159f2b-6915-4df8-bd0b-b8cc5f5216ae.webp" style="display: inline; border-style: none;"></p>
</blockquote>
<blockquote>
<p>妹子说，我吹了风，感觉头有点疼，今天就先到这吧。</p>
</blockquote>
<blockquote>
<p><strong>500（Internal Server Error）：服务器内部错误，无法完成请求。</strong><br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696532023669-974bc995-de0b-490d-b5a2-f11253937aae.webp" style="display: inline; border-style: none;"></p>
</blockquote>
<blockquote>
<p>小星垂头丧气地回家了，老妈一看小星这个样子，就知道什么情况。<br>— 没有关系，明天我给你安排了第二场，好好休息准备，明天好好表现。<br>小星夜里失眠了，辗转反侧。<br>明天的姑娘是什么样？和照片上差别大吗？应该很温柔吧？……<br>到了半夜，小星终于睡着了。<br>小星做了一个好梦，他和一个叫小萌的姑娘在一起了。过了一段时间，小星想๑乛◡乛๑，小萌：๑ ͡° ͜◡ ͡° ๑，讨厌,，才确定关系多久。</p>
</blockquote>
<blockquote>
<p><strong>403（Forbidden）：服务器理解请求客户端的请求，但是拒绝执行此请求。</strong></p>
</blockquote>
<p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696532073718-7088bc96-0fc2-4061-adc1-d90f5109c197.webp" style="display: inline; border-style: none;"></p>
<blockquote>
<p>但是耐不住小星的软磨硬泡，还是……结果闹出人命了，但是孩子还不能生。<br>因为没有结婚证和准生证。</p>
</blockquote>
<blockquote>
<p><strong>401（Unauthorized）：请求需要有通过HTTP认证（BASIC认证，DIGEST认证）的认证信息。</strong></p>
</blockquote>
<p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696532104481-9f06f8d9-b2c4-4cc1-afe1-a96f9ced0343.webp" style="display: inline; border-style: none;"></p>
<blockquote>
<p>后来，小星和小萌结婚了，生了一个可爱的孩子，一家三口过上了幸福的生活。</p>
</blockquote>
<blockquote>
<p><strong>200（OK）：请求成功。</strong></p>
</blockquote>
<blockquote>
<p>突然，一个容嬷嬷跳了出来。<br>臭小子，彩礼钱没给够，挨我一针吧！<br>小星一下子惊醒。<br>还好，只是一场梦。<br>天已经亮了，小星强打精神，去参加今天的相亲了。<br><strong>至于结果，标题里已经说明了。</strong><br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696532141021-55ef3a93-8af0-48a2-aef1-8785e0f39184.webp" style="display: inline; border-style: none;"></p>
</blockquote>
<hr>
<p>故事到这里，就结束了，希望这个简单的小故事，可以帮你更加深刻地理解什么是状态码，那就来开始进入下一个问题了。<br><a name="U0jzr"></a></p>
<h2 id="HTTP-状态码-301-和-302-之间有什么区别"><a href="#HTTP-状态码-301-和-302-之间有什么区别" class="headerlink" title="HTTP 状态码 301 和 302 之间有什么区别"></a>HTTP 状态码 301 和 302 之间有什么区别</h2><p>上面已经说了，这里再说讲一遍：</p>
<ul>
<li><p><strong>301（Moved Permanently）：永久性移动。请求的资源已被永久的移动到新URI。</strong>服务器返回此响应时，会返回新的资源地址。</p>
</li>
<li><p><strong>302（Found）：临时性移动。与301类似。但资源只是临时被移动。</strong>服务器从另外的地址响应资源，但是客户端还应该使用这个地址。</p>
</li>
</ul>
<p>这里拿上面那个例子来说，301 就好比是已经嫁人了的小美，而 302 则是一个找到了新男友的小静。<br><a name="LwXAy"></a></p>
<h2 id="HTTP-有哪些常用的请求方式以及用途"><a href="#HTTP-有哪些常用的请求方式以及用途" class="headerlink" title="HTTP 有哪些常用的请求方式以及用途?"></a>HTTP 有哪些常用的请求方式以及用途?</h2><p>HTTP 的请求方式对于开发人员来说，应该不是很陌生。其中，<strong>POST、DELETE、PUT、GET</strong>的含义分别对应我们开发中最常用的 RestFul 接口开发规范，即最熟悉的增、删、改、查，然后这里全部进行列举一下：</p>
<p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696532725383-2410ecf7-b8fe-4578-aeeb-fac4fea887b5.png" style="display: inline; border-style: none;"></p>
<p><a name="zOUiw"></a></p>
<h2 id="请说一下-Get-和-Post-请求之间的区别"><a href="#请说一下-Get-和-Post-请求之间的区别" class="headerlink" title="请说一下 Get 和  Post 请求之间的区别"></a>请说一下 Get 和  Post 请求之间的区别</h2><p>上面说完请求方式，然后我们在开发中最常用的便是 Get 和 Post 请求，以下从几个方面来说明GET和POST之间的区别：</p>
<p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696533314260-516c50d8-c589-42c3-a052-af8740cb1a1c.png" style="display: inline; border-style: none;"></p>
<ol>
<li><p><strong>传参方式</strong>：这个从报文层面来看，<strong>Get 请求将信息放在 URL，Post 将请求信息放在请求体中</strong>。从这一点来看，可以发现 Get 请求可以携带的数据量是有限制的，因为 URL 本身是有长度限制的，而 POST 请求的数据存放在报文体中，因此对大小没有限制。而且从形式上看，<strong>GET  请求把数据放 URL 上不太安全，而 POST 请求把数据放在请求体里想比较而言安全一些</strong>，所以，对于一般重要的信息，如密码、账户信息等，其传递的方式都是用 Post 请求多一些。</p>
</li>
<li><p><strong>幂等性以及安全性</strong>：这个主要从数据库的方面来说，Get 请求更加符合幂等性以及安全性的要求，而 Post 请求反而没那么符合，这个主要和Http  设置的 Get&#x2F;Post 请求的作用有关。按照 HTTP 的约定，GET 请求用于查看信息，不会改变服务器上的信息；而 POST 请求用来改变服务器上的信息。正因为 GET  请求只查看信息，不改变信息，对数据库的一次或多次操作获得的结果是一致的，认为它符合幂等性。安全性是指对数据库操作没有改变数据库中的数据。</p>
</li>
<li><p><strong>能否被缓存</strong>：从浏览器缓存层面来看的，Get 请求能够直接保存在浏览器的浏览记录里面，而且 Get 请求的 URL 可以在浏览器收藏页面，这些是 Post 请求所没有的。可以这样说，Get 请求之所以被广泛的应用，就是因为其支持缓存的特性，而他之所以被选择作为缓存的方式，也是因为其幂等性以及安全性，除了返回结果以外不会对原有的数据做任务的操作，因此，绝大部分的 Get 请求都被 CDN 缓存起来了，大大减少了 Web 服务器的负担。<br> <a name="EWmpv"></a></p>
</li>
</ol>
<h2 id="Get-请求的长度限制是多少？"><a href="#Get-请求的长度限制是多少？" class="headerlink" title="Get 请求的长度限制是多少？"></a>Get 请求的长度限制是多少？</h2><p>在上面说过，在HTTP请求中，GET请求是通过获取 URL 中的参数来传递数据的，但是 URL 并没有对数据集的长度是没有限制的，所以真正限制 Get 长度的东西是什么呢？答案已经显而易见了，就是浏览器。</p>
<p>例如IE浏览器对URL的最大限制是2000多个字符，大概2kb左右，像Chrome、Firefox等浏览器支持的URL字符数更多，其中FireFox中URL的最大长度限制是65536个字符，Chrome则是8182个字符。</p>
<p>在这里补充一点：<strong>URL 的长度限制也不是针对数据部分，而是针对整个URL</strong>。<br><a name="P49jk"></a></p>
<h2 id="请简单说一下HTTP-请求的过程与原理"><a href="#请简单说一下HTTP-请求的过程与原理" class="headerlink" title="请简单说一下HTTP 请求的过程与原理"></a>请简单说一下HTTP 请求的过程与原理</h2><p>HTTP协议定义了浏览器怎么向服务器请求文档，以及服务器怎么把文档传给浏览器。</p>
<p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696565681614-9fb9b8e0-85b5-4672-aeeb-8b14ce24a4ae.png" style="display: inline; border-style: none;"></p>
<ul>
<li>每个服务器都有一个进程，它不断监听TCP的端口80，以便发现是否有浏览器向它发出连接建立请求</li>
<li>监听到连接请求，就会建立TCP连接</li>
<li>浏览器向服务器发出浏览某个页面的请求，服务器接着就返回所请求的页面作为响应</li>
<li>最后，释放TCP连接</li>
</ul>
<blockquote>
<p>在浏览器和服务器之间的请求和相应的交互，必须按照规定的格式和遵循一定的规则，这些格式个规则就是<strong>超文本传输协议 HTTP</strong>。</p>
</blockquote>
<p>这道题其是和上面浏览器那道浏览器地址栏输入 url ，到最后主页的显示，经历了哪几个过程？这道题差不多，这两道题可以对比来进行记忆。<br><a name="jyKsp"></a></p>
<h2 id="说一下-HTTP-的报文结构"><a href="#说一下-HTTP-的报文结构" class="headerlink" title="说一下 HTTP 的报文结构"></a>说一下 HTTP 的报文结构</h2><p>HTTP 的报文有两种，分别是 **HTTP 请求报文 和 HTTP 响应报文 **。<br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696566127154-78acc08f-6cda-42e1-b395-43e350267645.png" style="display: inline; border-style: none;"></p>
<ul>
<li><strong>HTTP 请求报文</strong></li>
</ul>
<p>HTTP 请求报文的格式如下：<br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696566295531-ff811d59-8254-4fb8-9d22-5b39365b770d.png" alt="image.png" style="display: inline; border-style: none;"></p>
<p>HTTP 请求报文的第一行叫做请求行，后面的行都叫做首部行，首部行后面还可以跟一个实体主体。请求首部之后有一个空行，这个空行不能省略，它是用来划分首部与实体的。</p>
<blockquote>
<p><strong>请求行包含三个字段：</strong></p>
<ul>
<li><strong>方法字段</strong>：包括POST、GET等请方法。</li>
<li><strong>URL 字段</strong></li>
<li><strong>HTTP 报文字段</strong></li>
</ul>
</blockquote>
<ul>
<li><strong>HTTP 响应报文</strong></li>
</ul>
<p>HTTP 响应报文的格式如下：<br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696566568013-966bf9fd-28d9-45f4-b131-eb4c98698635.png" alt="image.png" style="display: inline; border-style: none;"></p>
<p>HTTP 响应报文的第一行叫做<strong>状态行</strong>，后面的行是<strong>首部行</strong>，最后是<strong>实体主体</strong>。</p>
<ul>
<li><strong>状态行</strong>包含了三个字段<ul>
<li><strong>协议版本字段</strong></li>
<li><strong>状态码</strong></li>
<li><strong>相应的状态信息</strong></li>
</ul>
</li>
<li><strong>实体部分</strong>是报文的主要部分，它包含了所请求的对象。</li>
<li><strong>首部行</strong>首部可以分为<strong>四种首部，请求首部、响应首部、通用首部和实体首部</strong>。通用首部和实体首部在请求报文和响应报文中都可以设置，区别在于请求首部和响应首部。<ul>
<li>常见的请求首部有 Accept 可接收媒体资源的类型、Accept-Charset 可接收的字符集、Host 请求的主机名。</li>
<li>常见的响应首部有 ETag 资源的匹配信息，Location 客户端重定向的 URI。</li>
<li>常见的通用首部有 Cache-Control 控制缓存策略、Connection 管理持久连接。</li>
<li>常见的实体首部有 Content-Length 实体主体的大小、Expires 实体主体的过期时间、Last-Modified 资源的最后修改时间。<br>  <a name="iohMb"></a></li>
</ul>
</li>
</ul>
<h2 id="说一下-URL-和-URI-之间的区别"><a href="#说一下-URL-和-URI-之间的区别" class="headerlink" title="说一下 URL 和 URI 之间的区别"></a>说一下 URL 和 URI 之间的区别</h2><p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696566981246-b5c625bb-9f86-4539-aba0-a5fb2f9ada61.png" style="display: inline; border-style: none;"></p>
<ul>
<li><p>URI，**统一资源标识符(Uniform Resource Identifier， URI)**，标识的是Web上每一种可用的资源，如 HTML文档、图像、视频片段、程序等都是由一个URI进行标识的。</p>
</li>
<li><p>URL，**统一资源定位符（Uniform Resource Location, URL)**，它是URI的一种子集，主要作用是提供资源的路径。</p>
</li>
</ul>
<blockquote>
<p>URL 和 URI 之间的主要区别如下:</p>
<ul>
<li><strong>URL 除了提供资源的表示外，还提供了资源的访问方式</strong>，这也是为什么我们为什么以在浏览器输入 URL 就可以找到特定网页的原因。 </li>
<li><strong>URI 相比 URL 的直接定位，其更多的是给出一个标识的东西</strong>，相当于人们常说的身份证。</li>
</ul>
</blockquote>
<p>这里举一个生动形象的例子：URI 是人的身份证，上面标注了人的各种信息，包括地址、生日等等，而 URL 则是一个人家里的地址，他告诉了你怎么去找到这个人，以及这个人的家庭地址在哪里，从而帮助你去找到这个人。<br><a name="sCIkT"></a></p>
<h2 id="说一下HTTP-x2F-1-0，1-1，2-0-之间的区别？"><a href="#说一下HTTP-x2F-1-0，1-1，2-0-之间的区别？" class="headerlink" title="说一下HTTP&#x2F;1.0，1.1，2.0 之间的区别？"></a>说一下HTTP&#x2F;1.0，1.1，2.0 之间的区别？</h2><p>这里关键的点在于一个：<strong>HTTP&#x2F;1.0 默认是短连接，可以强制开启，HTTP&#x2F;1.1 默认长连接，HTTP&#x2F;2.0 采用多路复用。</strong></p>
<blockquote>
<p><strong>HTTP&#x2F;1.0</strong></p>
<ul>
<li>默认采用的是<strong>短连接</strong>的连接方式，每次请求都需要建立一个 TCP 连接。它可以设置 <strong>Connection：keep-alive</strong> 这个字段，强制开启长连接。</li>
</ul>
<p><strong>HTTP&#x2F;1.1</strong></p>
<ul>
<li>引入了<strong>持久化连接</strong>的概念：与 HTTP&#x2F;1.0 的TCP 连接方式（每次请求都需要建立一个 TCP 连接不同），其 TCP 连接默认不关闭，可以被多个请求复用。</li>
<li><strong>分块传输编码</strong>：即服务端每产生一块数据，就发送一块的数据，用” 流模式” 替代了” 缓存模式”。</li>
<li><strong>管道机制</strong>：在同一个 TCP 连接里面，客户端可以同时发送多个请求给服务端。</li>
</ul>
<p><strong>HTTP&#x2F;2.0</strong></p>
<ul>
<li><strong>二进制协议：</strong>1.1 版本的头部信息采用的是文本（ASCII 编码）的形式，数据体可以是文本或者二进制；而在 2.0 当中，其头部信息和数据体都是二进制的形式</li>
</ul>
<p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696568616087-463c610c-0e6a-4a9b-8a2d-99ac565e9443.webp" style="display: inline; border-style: none;"></p>
<ul>
<li><strong>报头压缩</strong>：HTTP 协议不带有状态，每次请求都必须附上所有信息。Http&#x2F;2.0 引入了<strong>头信息压缩机制</strong>，<strong>使用 gzip 或 compress 压缩后再发送</strong>。</li>
</ul>
<p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696568625837-0c777891-4f79-4fd7-a0c8-53bf1f0b63c1.webp" style="display: inline; border-style: none;"></p>
<ul>
<li><strong>完全多路复用</strong>：在 HTTP &#x2F;1.0的基础上实现了扩展，即在一个连接里面了，客户端和浏览器都可以同时发送多个请求或回应，而且不用按照顺序一一进行对应。</li>
</ul>
<p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696568650193-a64d9454-a17d-4b3c-a8e7-f183ff3af1f9.webp" style="display: inline; border-style: none;"></p>
<ul>
<li><p><strong>数据流优先级</strong>：在HTTP&#x2F;2中，每个请求都可以带一个<strong>31bit <strong>的优先值，</strong>0表示最高优先级， 数值越大优先级越低</strong>。 有了这个优先值，客户端和服务器就可以在处理不同的流时采取不同的策略，以最优的方式发送流、消息和帧。</p>
</li>
<li><p><strong>服务端推送</strong>：HTTP&#x2F;2 新增的另一个强大的新功能是，服务器可以对一个客户端请求发送多个响应。 换句话说，除了对最初请求的响应外，客户端允许服务器未经请求，主动地向客户端发送资源。</p>
</li>
</ul>
<p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696568808595-16b4d870-63ca-4726-9287-0fa9ed7b1815.webp" style="display: inline; border-style: none;"></p>
</blockquote>
<p><a name="gkVqs"></a></p>
<h2 id="有了解过HTTP-x2F-3吗？"><a href="#有了解过HTTP-x2F-3吗？" class="headerlink" title="有了解过HTTP&#x2F;3吗？"></a>有了解过HTTP&#x2F;3吗？</h2><blockquote>
<p>HTTP&#x2F;3 在前面三个协议的基础上发生了两大变化</p>
<ul>
<li><strong>传输层基于UDP</strong></li>
<li>使用 <strong>QUIC保证UDP可靠性</strong></li>
</ul>
</blockquote>
<p>在 说到 HTTP &#x2F; 3 之前，我们先来说一下 HTTP &#x2F; 2 存在的一些不足：</p>
<ol>
<li><strong>建立连接时间长</strong>,没办法，谁让它爸是TCP呢？我们知道，TCP三次握手的过程客户端和服务端之间需要交互三次，也就是说需要消耗1.5RTT，还有TLS加密握手，所以大概需要3RTT左右。而具体消耗的时长根据服务器和客户端之间的距离则不尽相同，如果比较近的话，消耗在100ms以内，对于用来说可能没什么感知，但是如果一个RTT的耗时达到300-400ms，那么，一次连接建立过程总耗时可能要达到一秒钟左右，这时候，用户就会明显的感知到网页加载很慢。</li>
</ol>
<blockquote>
<p>网络延迟又称为 **RTT(Round Trip Time)**。他是指一个请求从客户端浏览器发送一个请求数据包到服务器，再从服务器得到响应数据包的这段时间。其是反映网络性能的一个重要指标。<br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696569880618-1c780b4a-b27f-4109-9b4a-13deb8c9573a.webp" style="display: inline; border-style: none;"></p>
</blockquote>
<ol start="2">
<li><strong>队头阻塞问题</strong>。这里有同学会问，http2 不是解决了队头阻塞的问题吗？这里只说对了一半，http2 只解决了http消息队头阻塞问题，并没有解决TCP队头阻塞问题。</li>
</ol>
<blockquote>
<p>在远古的http1.1时代就存在<strong>队头阻塞问题</strong>，如果大家对于http的历史有一定了解的话，就会知道 http1.1 相较于http1.0最主要的改进就是**引入了持久连接(keep-alive)**。<br>所谓的持久连接：在一个TCP连接上可以传送多个http请求和响应，减少了建立和关闭连接的消耗和延迟。<br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696570078151-71f997b6-75b4-4991-bcc4-a3ba098b4abb.webp" style="display: inline; border-style: none;"><br>另外，HTTP&#x2F;1.1允许在持久连接上使用请求管道，是相对于持久连接的又一性能优化。<br>所谓请求管道，就是在HTTP响应到达之前，可以将多条请求放入队列，当第一条HTTP请求通过网络流向服务器时，第二条和第三条请求也可以开始发送了。在高时延网络条件下，这样做可以降低网络的环回时间，提高性能。<br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696570077901-8cad6e10-7fa9-4515-8dd3-c871928b1908.webp" style="display: inline; border-style: none;"><br>但是，对于管道连接还是有一定的限制和要求的，其中一个比较关键的就是服务端必须按照与请求相同的顺序回送HTTP响应。<br>这也就意味着，如果一个响应返回发生了延迟，那么其后续的响应都会被延迟，直到队头的响应送达。这就是所谓的HTTP队头阻塞。<br>HTTP队头阻塞问题在HTTP2中得到了很好的解决，HTTP2废弃了管道化大的方式，而引入帧、消息和数据流的概念，客户端和服务端可以把HTTP消息分解为互不依赖的帧，然后乱序发送，最后再在另一端把它们重新组合起来。<br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696570078306-f8b31b2d-389c-49a6-938d-361171b62317.webp" style="display: inline; border-style: none;"><br>http2 虽然很好的解决了HTTP队头阻塞的问题。但是http2仍然会存在TCP队头阻塞的问题，因为http2还是基于TCP协议实现的。<br>TCP传输过程中会把数据拆分成一个一个小的有序的数据包，然后经过路由器、集线器、交换机等中间设备转发，最终到达目的地。如果其中某一个数据包没有按序到达，接收端就会保持连接等待数据包返回。这时就会阻塞后续的请求，就造成了TCP队头阻塞。<br>HTTP&#x2F;1.1 管道化持久连接也是使得同一个TCP连接可以被多个HTTP使用，但是HTTP&#x2F;1.1中规定一个域名可以有6个TCP连接，而HTTP&#x2F;2中，同一个域名只使用一个TCP连接，一旦HTTP&#x2F;2中TCP队头阻塞所造成的影响会更大，因为HTTP&#x2F;2的多路复用技术使得多个请求其实是基于同一个TCP连接的，如果某一个请求造成了TCP队头阻塞，那么多个请求都会受到影响。</p>
</blockquote>
<p>说完 HTTP&#x2F;2 存在的问题，接下来我们来说 HTTP&#x2F;3，因为 HTTP 2 本身存在的问题是由于TCP本身的特性导致的，所以HTTP&#x2F;3在QUIC的基础上进行了发展。</p>
<blockquote>
<p><strong>QUIC（Quick UDP Connections</strong>）直译为快速UDP网络连接，底层使用 **UDP **进行数据传输。</p>
</blockquote>
<p>HTTP&#x2F;3主要有这些特点：</p>
<ul>
<li>使用UDP作为传输层进行通信</li>
<li>在UDP的基础上QUIC协议保证了HTTP&#x2F;3的安全性，在传输的过程中就完成了TLS加密握手</li>
<li>HTTPS 要建⽴⼀个连接，要花费 6 次交互，先是建⽴三次握⼿，然后是 TLS&#x2F;1.3 的三次握⼿。QUIC 直接把以往的 TCP 和 TLS&#x2F;1.3 的 6 次交互合并成了 <strong>3</strong> 次，减少了交互次数。</li>
<li>QUIC 有⾃⼰的⼀套机制可以保证传输的可靠性的。当某个流发⽣丢包时，只会阻塞这个流，其他流不会受到影响。</li>
</ul>
<p>我们拿一张图看一下HTTP协议的变迁：<br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696571325129-1d03689d-3101-4d79-8e08-2ffed33500d6.png" style="display: inline; border-style: none;"><br>然后这里补充一下<strong>HTTP&#x2F;1.1、HTTP&#x2F;2、QUIC的数据传输过程的图片，</strong>希望可以帮助你更加深刻地理解其区别<strong>。</strong><br>HTTP&#x2F;1.1<br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696571400827-6475c624-c648-4ec9-8270-d1d8cadbbe90.webp" style="display: inline; border-style: none;"><br>HTTP&#x2F;2<br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696571400825-ca66d85a-5805-4a89-b390-94392ecca63b.webp" style="display: inline; border-style: none;"><br>QUIC<br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696571400940-b43f28da-7f51-4e38-a4b8-1daf085c6eb6.webp" style="display: inline; border-style: none;"><br><a name="lldh2"></a></p>
<h2 id="什么是-HTTP-的长连接，HTTP-如何设置长连接？在什么时候会超时？"><a href="#什么是-HTTP-的长连接，HTTP-如何设置长连接？在什么时候会超时？" class="headerlink" title="什么是 HTTP 的长连接，HTTP 如何设置长连接？在什么时候会超时？"></a>什么是 HTTP 的长连接，HTTP 如何设置长连接？在什么时候会超时？</h2><blockquote>
<p><a name="Jn9mU"></a></p>
</blockquote>
<h3 id="什么是-HTTP-的长连接？"><a href="#什么是-HTTP-的长连接？" class="headerlink" title="什么是 HTTP 的长连接？"></a>什么是 HTTP 的长连接？</h3><ol>
<li><p>HTTP 分为长连接和短连接，<strong>本质上说的是 TCP 的长短连接</strong>。TCP 连接是一个双向的通道，它是可以保持一段时间不关闭的，因此 TCP 连接才具有真正的长连接和短连接这一说法。</p>
</li>
<li><p>TCP 长连接可以复用一个 TCP 连接，来发起多次的 HTTP 请求，这样就可以减少资源消耗，比如一次请求 HTML，如果是短连接的话，可能还需要请求后续的 JS&#x2F;CSS。</p>
</li>
</ol>
<blockquote>
<p><a name="HBf2E"></a></p>
</blockquote>
<h3 id="如何设置长连接？"><a href="#如何设置长连接？" class="headerlink" title="如何设置长连接？"></a>如何设置长连接？</h3><p>通过在头部（请求和响应头）设置 <strong>Connection</strong> 字段指定为** keep-alive** ，HTTP&#x2F;1.0 协议支持，但是是默认关闭的，从 HTTP&#x2F;1.1 以后，连接默认都是长连接。</p>
<blockquote>
<p><a name="GbGkT"></a></p>
</blockquote>
<h3 id="在什么时候会超时呢？"><a href="#在什么时候会超时呢？" class="headerlink" title="在什么时候会超时呢？"></a>在什么时候会超时呢？</h3><ul>
<li><p>HTTP 一般会有 httpd 守护进程，里面可以设置 <strong>keep-alive timeout</strong>，当 tcp 连接闲置超过这个时间就会关闭，也可以在 HTTP 的 header 里面设置超时时间</p>
</li>
<li><p>TCP 的 <strong>keep-alive</strong> 包含三个参数，支持在系统内核的 net.ipv4 里面设置；当 TCP 连接之后，闲置了 <strong>tcp_keepalive_time</strong>，则会发生侦测包，如果没有收到对方的 ACK，那么会每隔 <strong>tcp_keepalive_intvl</strong> 再发一次，直到发送了 <strong>tcp_keepalive_probes</strong>，就会丢弃该连接。</p>
</li>
</ul>
<p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696571686464-735a732f-53f5-4f7b-9e4c-5d9993408b11.png" alt="image.png" style="display: inline; border-style: none;"><br><a name="Ny2Xz"></a></p>
<h2 id="在交互过程中如果数据传送完了，还不想断开连接怎么办，怎么维持？"><a href="#在交互过程中如果数据传送完了，还不想断开连接怎么办，怎么维持？" class="headerlink" title="在交互过程中如果数据传送完了，还不想断开连接怎么办，怎么维持？"></a>在交互过程中如果数据传送完了，还不想断开连接怎么办，怎么维持？</h2><blockquote>
<p>这个问题记住** keep-alive** 就好，也就是说，在HTTP中响应体的 <strong>Connection <strong>字段指定为</strong> keep-alive</strong> 就可以了</p>
</blockquote>
<p><a name="PZtGC"></a></p>
<h2 id="说一下HTTP-与-HTTPS-有哪些区别？"><a href="#说一下HTTP-与-HTTPS-有哪些区别？" class="headerlink" title="说一下HTTP 与 HTTPS 有哪些区别？"></a>说一下HTTP 与 HTTPS 有哪些区别？</h2><p>这个问题可以从<strong>安全性，数据是否加密、默认端口</strong>等这几个方面去回答。</p>
<ol>
<li>HTTP 是超⽂本传输协议，信息是明⽂传输，存在安全⻛险的问题。HTTPS 则解决 HTTP 不安全的缺陷，在TCP 和 HTTP ⽹络层之间加⼊了 SSL&#x2F;TLS 安全协议，使得报⽂能够加密传输。</li>
<li>HTTP 连接建⽴相对简单， TCP 三次握⼿之后便可进⾏ HTTP 的报⽂传输。⽽ HTTPS 在 TCP 三次握⼿之后，还需进⾏ SSL&#x2F;TLS 的握⼿过程，才可进⼊加密报⽂传输。</li>
<li>HTTP 的端⼝号是 80，HTTPS 的端⼝号是 443。</li>
<li>HTTPS 协议需要向 CA（证书权威机构）申请数字证书，来保证服务器的身份是可信的。<br> <a name="Og0do"></a></li>
</ol>
<h2 id="为什么要用HTTPS？解决了哪些问题？"><a href="#为什么要用HTTPS？解决了哪些问题？" class="headerlink" title="为什么要用HTTPS？解决了哪些问题？"></a>为什么要用HTTPS？解决了哪些问题？</h2><p>因为HTTP 是明⽂传输，存在安全上的风险：<br><strong>窃听⻛险</strong>，⽐如通信链路上可以获取通信内容，用户账号被盗取。<br><strong>篡改⻛险</strong>，⽐如强制植⼊垃圾⼴告，造成视觉污染。<br><strong>冒充⻛险</strong>，⽐如冒充淘宝⽹站，导致用户金钱损失。</p>
<p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696572408685-5b275179-e643-4456-852d-d60b45ba1604.png" style="display: inline; border-style: none;"></p>
<p>所以引入了HTTPS，HTTPS 在 HTTP 与 TCP 层之间加⼊了 SSL&#x2F;TLS 协议，可以很好的解决了这些风险：</p>
<ul>
<li><strong>信息加密</strong>：交互信息⽆法被窃取。</li>
<li><strong>校验机制</strong>：⽆法篡改通信内容，篡改了就不能正常显示。</li>
<li><strong>身份证书</strong>：能证明淘宝是真淘宝。</li>
</ul>
<p>所以SSL&#x2F;TLS 协议是能保证通信是安全的。</p>
<p><a name="a9DsF"></a></p>
<h2 id="HTTPS工作流程是怎样的？"><a href="#HTTPS工作流程是怎样的？" class="headerlink" title="HTTPS工作流程是怎样的？"></a>HTTPS工作流程是怎样的？</h2><p>这道题有几个要点：<strong>公私钥、数字证书、加密、对称加密、非对称加密</strong>。<br>首先对于 HTTPS 涉及的协议进行一个简单的解析：</p>
<blockquote>
<ul>
<li><strong>HTTPS &#x3D; HTTP + SSL&#x2F;TLS</strong>，也就是用SSL&#x2F;TLS对数据进行加密和解密，Http进行传输。</li>
<li><strong>SSL，即Secure Sockets Layer（安全套接层协议）</strong>，是网络通信提供安全及数据完整性的一种安全协议。</li>
<li>**TLS，即Transport Layer Security(安全传输层协议)**，它是SSL3.0的后续版本。</li>
</ul>
</blockquote>
<p>那现在来说一下HTTPS 主要工作流程：</p>
<ol>
<li>客户端发起 HTTPS 请求，连接到服务端的 443 端口。</li>
<li>服务端有一套数字证书（证书内容有公钥、证书颁发机构、失效日期等）。</li>
<li>服务端将自己的数字证书发送给客户端（公钥在证书里面，私钥由服务器持有）。</li>
<li>客户端收到数字证书之后，会验证证书的合法性。如果证书验证通过，就会生成一个随机的对称密钥，用证书的公钥加密。</li>
<li>客户端将公钥加密后的密钥发送到服务器。</li>
<li>服务器接收到客户端发来的密文密钥之后，用自己之前保留的私钥对其进行非对称解密，解密之后就得到客户端的密钥，然后用客户端密钥对返回数据进行对称加密，酱紫传输的数据都是密文啦。</li>
<li>服务器将加密后的密文返回到客户端。</li>
<li>客户端收到后，用自己的密钥对其进行对称解密，得到服务器返回的数据。</li>
</ol>
<p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696572529586-9eb57956-4d66-403d-b9ba-d37721b75cae.png" style="display: inline; border-style: none;"></p>
<p>如果上面的图不过瘾，这里还画了一张更详尽的图：</p>
<p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696572529959-8113ccb5-71c8-4c03-b665-67831347a323.jpeg" style="display: inline; border-style: none;"></p>
<p><a name="SDgyt"></a></p>
<h2 id="说说什么是数字签名？什么是数字证书？"><a href="#说说什么是数字签名？什么是数字证书？" class="headerlink" title="说说什么是数字签名？什么是数字证书？"></a>说说什么是数字签名？什么是数字证书？</h2><p>这道题感觉面试官如果要问的话，应该不仅仅会问数字签名，数字证书，很可能也会问 https 的原理，因为https原理跟数字证书有关，所以最好的话还是了解一下 Https 的原理。<br>数字证书是指在互联网通讯中标志通讯各方身份信息的一个数字认证，人们可以在网上用它来识别对方的身份。它的出现，是为了避免身份被篡改冒充的。比如Https的数字证书，就是为了避免公钥被中间人冒充篡改：</p>
<p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696573014803-9220d840-6494-4ea0-82f7-82fe46783561.png" style="display: inline; border-style: none;"></p>
<p><strong>数字证书构成：</strong>证书包含三部分内容：<strong>证书内容、证书签名算法和签名</strong>，签名是为了验证身份。</p>
<ul>
<li>公钥和个人等信息，经过<strong>Hash摘要算法</strong>加密，形成消息摘要；将消息摘要拿到拥有公信力的认证中心（CA），<strong>用它的私钥对消息摘要加密</strong>，形成<strong>数字签名</strong>。</li>
<li>公钥和个人信息、数字签名共同构成<strong>数字证书</strong>。</li>
</ul>
<blockquote>
<p><a name="Yv6hu"></a></p>
</blockquote>
<h3 id="浏览器验证数字证书的过程？"><a href="#浏览器验证数字证书的过程？" class="headerlink" title="浏览器验证数字证书的过程？"></a>浏览器验证数字证书的过程？</h3><ol>
<li>获取证书，得到证书内容、证书签名算法和数字签名。</li>
<li>用CA机构的公钥<strong>对数字签名解密</strong>（由于是浏览器信任的机构，所以浏览器会保存它的公钥）。</li>
<li>用证书里的签名算法<strong>对证书内容进行hash运算</strong>。</li>
<li>比较解密后的数字签名和对证书内容做hash运算后得到的哈希值，相等则表明证书可信。<br> <a name="JAjtX"></a></li>
</ol>
<h2 id="客户端怎么去校验证书的合法性？"><a href="#客户端怎么去校验证书的合法性？" class="headerlink" title="客户端怎么去校验证书的合法性？"></a>客户端怎么去校验证书的合法性？</h2><blockquote>
<p><a name="nC3hM"></a></p>
</blockquote>
<h3 id="首先，服务端的证书从哪来的呢？"><a href="#首先，服务端的证书从哪来的呢？" class="headerlink" title="首先，服务端的证书从哪来的呢？"></a>首先，服务端的证书从哪来的呢？</h3><p>为了让服务端的公钥被⼤家信任，服务端的证书都是由 CA （_Certificate Authority_，证书认证机构）签名的，CA就是⽹络世界⾥的公安局、公证中⼼，具有极⾼的可信度，所以由它来给各个公钥签名，信任的⼀⽅签发的证书，那必然证书也是被信任的。<br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696573191438-a524d5ba-af05-4c3e-890e-a80140be073c.png" style="display: inline; border-style: none;"></p>
<p>CA 签发证书的过程，如上图左边部分：</p>
<ul>
<li>⾸先 CA 会把持有者的公钥、⽤途、颁发者、有效时间等信息打成⼀个包，然后对这些信息进⾏ Hash 计算，得到⼀个 Hash 值；</li>
<li>然后 CA 会使⽤⾃⼰的私钥将该 Hash 值加密，⽣成 Certificate Signature，也就是 CA 对证书做了签名；</li>
<li>最后将 Certificate Signature 添加在⽂件证书上，形成数字证书；</li>
</ul>
<p>客户端校验服务端的数字证书的过程，如上图右边部分：</p>
<ul>
<li>⾸先客户端会使⽤同样的 Hash 算法获取该证书的 Hash 值 H1；</li>
<li>通常浏览器和操作系统中集成了 CA 的公钥信息，浏览器收到证书后可以使⽤ CA 的公钥解密 Certificate</li>
<li>Signature 内容，得到⼀个 Hash 值 H2 ；</li>
<li>最后⽐较 H1 和 H2，如果值相同，则为可信赖的证书，否则则认为证书不可信。</li>
</ul>
<p>假如在HTTPS的通信过程中，中间人篡改了证书原文，由于他没有CA机构的私钥，所以CA公钥解密的内容就不一致。<br><a name="bjvTn"></a></p>
<h2 id="如何理解-HTTP-协议是无状态的？"><a href="#如何理解-HTTP-协议是无状态的？" class="headerlink" title="如何理解 HTTP 协议是无状态的？"></a>如何理解 HTTP 协议是无状态的？</h2><p>这个 **无状态 **的的 <strong>状态</strong> 值的是什么？是客户端的状态，所以字面意思，就是HTTP协议中服务端不会保存客户端的任何信息。<br>比如当浏览器第一次发送请求给服务器时，服务器响应了；如果同个浏览器发起第二次请求给服务器时，它还是会响应，但是呢，服务器不知道你就是刚才的那个浏览器。</p>
<blockquote>
<p><strong>那有没有什么方法可以记录这个这个状态呢？</strong><br>答案是有的，就是我们接下来要说的 Cookie 和 Session。</p>
</blockquote>
<p><a name="nrkXe"></a></p>
<h2 id="说一下-Cookie-和-Session-之间有什么联系和有什么区别"><a href="#说一下-Cookie-和-Session-之间有什么联系和有什么区别" class="headerlink" title="说一下 Cookie 和 Session 之间有什么联系和有什么区别?"></a>说一下 Cookie 和 Session 之间有什么联系和有什么区别?</h2><p>首先，我们来看一下什么是 Cookie 和 Session：</p>
<ul>
<li><p>Cookie 是保存在客户端的一小块文本串的数据。客户端向服务器发起请求时，服务端会向客户端发送一个 Cookie，客户端就把 Cookie 保存起来。在客户端下次向同一服务器再发起请求时，Cookie 被携带发送到服务器。服务端可以根据这个Cookie判断用户的身份和状态。</p>
</li>
<li><p>Session 指的就是服务器和客户端一次会话的过程。它是另一种记录客户状态的机制。不同的是cookie保存在客户端浏览器中，而session保存在服务器上。客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上，这就是session。客户端浏览器再次访问时只需要从该session中查找用户的状态。</p>
</li>
</ul>
<p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696573847948-55c65e8b-0f02-45d7-a2b8-a712d410c690.png" style="display: inline; border-style: none;"></p>
<blockquote>
<p><a name="EM5jl"></a></p>
</blockquote>
<h3 id="那-Cookie-和-Session-有什么不一样吗？"><a href="#那-Cookie-和-Session-有什么不一样吗？" class="headerlink" title="那 Cookie 和 Session 有什么不一样吗？"></a>那 Cookie 和 Session 有什么不一样吗？</h3><ol>
<li><strong>存储位置不同</strong>，Cooike 存储在客户端，Session 存储在服务器端。</li>
<li><strong>存储数据类型不同</strong>，Cookie 只能保存ASCII，Session可以存任意数据类型，一般情况下我们可以在 Session 中保持一些常用变量信息，比如说 UserId 等。</li>
<li><strong>有效期不同</strong>，<strong>Cookie 可设置为长时间保持，</strong>比如我们经常使用的默认登录功能，<strong>Session 一般有效时间较短</strong>，客户端关闭或者 Session 超时都会失效。</li>
<li><strong>隐私策略不同</strong>，Cookie 存储在客户端，比较容易遭到不法获取，早期有人将用户的登录名和密码存储在 Cookie 中导致信息被窃取；Session 存储在服务端，安全性相对 Cookie 要好一些。</li>
<li><strong>存储大小不同</strong>，单个Cookie保存的数据不能超过4K，Session可存储数据远高于 Cookie。</li>
</ol>
<blockquote>
<p><a name="RNbGa"></a></p>
</blockquote>
<h3 id="Session-和-Cookie-之间有什么关联吗？"><a href="#Session-和-Cookie-之间有什么关联吗？" class="headerlink" title="Session 和 Cookie 之间有什么关联吗？"></a>Session 和 Cookie 之间有什么关联吗？</h3><p>可以使用Cookie记录Session的标识。<br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696574296720-d4982e40-d5a2-44ea-add0-d04847d20ada.png" style="display: inline; border-style: none;"></p>
<ul>
<li>用户第一次请求服务器时，服务器根据用户提交的信息，创建对应的 Session，请求返回时将此 Session 的唯一标识信息 SessionID 返回给浏览器，浏览器接收到服务器返回的 SessionID 信息后，会将此信息存入 Cookie 中，同时 Cookie 记录此 SessionID 是属于哪个域名。</li>
<li>当用户第二次访问服务器时，请求会自动判断此域名下是否存在 Cookie 信息，如果存在，则自动将 Cookie 信息也发送给服务端，服务端会从 Cookie 中获取 SessionID，再根据 SessionID 查找对应的 Session 信息，如果没有找到，说明用户没有登录或者登录失效，如果找到 Session 证明用户已经登录可执行后面操作。</li>
</ul>
<blockquote>
<p><a name="Y4qiP"></a></p>
</blockquote>
<h3 id="分布式环境下Session怎么处理呢？"><a href="#分布式环境下Session怎么处理呢？" class="headerlink" title="分布式环境下Session怎么处理呢？"></a>分布式环境下Session怎么处理呢？</h3><p>分布式环境下，客户端请求经过负载均衡，可能会分配到不同的服务器上，假如一个用户的请求两次没有落到同一台服务器上，那么在新的服务器上就没有记录用户状态的Session。<br>这时候怎么办呢？<br>可以使用Redis等分布式缓存来存储Session，在多台服务器之间共享。<br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696574479576-f6a13bf1-114c-4ab7-aa11-3197e4192c89.png" style="display: inline; border-style: none;"></p>
<blockquote>
<p><a name="pLVvT"></a></p>
</blockquote>
<h3 id="客户端无法使用Cookie怎么办？"><a href="#客户端无法使用Cookie怎么办？" class="headerlink" title="客户端无法使用Cookie怎么办？"></a>客户端无法使用Cookie怎么办？</h3><p>有可能客户端无法使用Cookie，比如浏览器禁用Cookie，或者客户端是安卓、IOS等等。<br>这时候怎么办？SessionID怎么存？怎么传给服务端呢？<br>首先是SessionID的存储，可以使用客户端的本地存储，比如浏览器的sessionStorage。<br>接下来怎么传呢？</p>
<ul>
<li>拼接到URL里：直接把SessionID作为URL的请求参数</li>
<li>放到请求头里：把SessionID放到请求的Header里，比较常用。</li>
</ul>
<p><a name="GYlFK"></a></p>
<h2 id="HTTPS-TSL和TCP能同时握手吗？"><a href="#HTTPS-TSL和TCP能同时握手吗？" class="headerlink" title="HTTPS TSL和TCP能同时握手吗？"></a>HTTPS TSL和TCP能同时握手吗？</h2><p>HTTPS 是先进行 TCP 三次握手，再进行 TLSv1.2 四次握手<br>这两个协议是可以同时进行握手的，但是有一个前提：</p>
<ol>
<li>客户端和服务端都开启了 <strong>TCP Fast Open 功能</strong>，而且 <strong>TSL 版本是 1.3</strong>；</li>
<li>客户端和服务端已经完成过一次通信了；<br> <a name="z8num"></a></li>
</ol>
<h1 id="💡TCP"><a href="#💡TCP" class="headerlink" title="💡TCP"></a>💡TCP</h1><hr>
<p><a name="qyHLR"></a></p>
<h2 id="请你详细说一下-TCP-的三次握手机制"><a href="#请你详细说一下-TCP-的三次握手机制" class="headerlink" title="请你详细说一下 TCP 的三次握手机制"></a>请你详细说一下 TCP 的三次握手机制</h2><ul>
<li>TCP 三次握手是最重要的知识点，必须要熟悉，因为这道题基本上就是送分题。</li>
</ul>
<p>TCP提供面向连接的可靠服务，因此在数据传送之前必须要先建立连接，TCP 连接是通过三次握手建立的。<br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696614013167-eb741739-de4e-4f8a-84ce-3eed1be4b580.png" style="display: inline; border-style: none;"></p>
<p>三次握手的过程：</p>
<ul>
<li>最开始，客户端和服务端都处于<strong>CLOSE状态</strong>，服务端监听客户端的请求，进入<strong>LISTEN状态</strong></li>
<li>客户端端发送连接请求，<strong>第一次握手</strong> (SYN&#x3D;1, seq&#x3D;x)，发送完毕后，客户端就进入 SYN_SENT 状态</li>
<li>服务端确认连接，<strong>第二次握手</strong> (SYN&#x3D;1, ACK&#x3D;1, seq&#x3D;y, ACKnum&#x3D;x+1)， 发送完毕后，服务器端就进入 SYN_RCV 状态。</li>
<li>客户端收到服务端的确认之后，再次向服务端确认，这就是<strong>第三次握手</strong> (ACK&#x3D;1，ACKnum&#x3D;y+1)，发送完毕后，客户端进入** ESTABLISHED** 状态，当服务器端接收到这个包时，也进入 <strong>ESTABLISHED 状态</strong>。</li>
</ul>
<p>这里举一个通俗的例子，希望可以帮助你们更好地理解 TCP 的三次握手：<br>在二十年前的农村，电话还没有开始普及，手机就更不用说了，所以，人与人之间的通信基本上只能靠吼来实现。<br>老张和老王是邻居，这天老张下地了，结果家里有事，热心的邻居老王赶紧跑到村口，开始叫唤老王。</p>
<ul>
<li>老王：老张唉！我是老王，你能听到吗？</li>
<li>老张一听，是老王的声音：老王老王，我是老张，我能听到，你能听到吗？</li>
<li>老王一听，嗯，没错，是老张：老张，我听到了，我有事要跟你说。</li>
<li>“你老婆要生了，赶紧回家吧！”</li>
</ul>
<p>老张风风火火地赶回家，老婆顺利地生了个带把的大胖小子。握手的故事充满了幸福和美满。</p>
<p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696614253389-b124b2fd-97e7-45f3-9bbd-8a4b909f1c84.png" style="display: inline; border-style: none;"></p>
<p><a name="OjVEI"></a></p>
<h2 id="TCP-为什么握手的次数是三次，为什么不能是两次或者四次？"><a href="#TCP-为什么握手的次数是三次，为什么不能是两次或者四次？" class="headerlink" title="TCP 为什么握手的次数是三次，为什么不能是两次或者四次？"></a>TCP 为什么握手的次数是三次，为什么不能是两次或者四次？</h2><blockquote>
<p><a name="ePp18"></a></p>
</blockquote>
<h3 id="为什么不能是两次？"><a href="#为什么不能是两次？" class="headerlink" title="为什么不能是两次？"></a>为什么不能是两次？</h3><ul>
<li>为了防止服务器端开启一些无用的连接增加服务器开销</li>
<li>防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误。</li>
</ul>
<p>由于网络传输是有延时的(要通过网络光纤和各种中间代理服务器)，在传输的过程中，比如客户端发起了 SYN&#x3D;1 的第一次握手。<br>如果服务器端就直接创建了这个连接并返回包含 SYN、ACK 和 Seq  等内容的数据包给客户端，这个数据包因为网络传输的原因丢失了，丢失之后客户端就一直没有接收到服务器返回的数据包。<br>如果没有第三次握手告诉服务器端客户端收的到服务器端传输的数据的话，服务器端是不知道客户端有没有接收到服务器端返回的信息的。<br>服务端就认为这个连接是可用的，端口就一直开着，等到客户端因超时重新发出请求时，服务器就会重新开启一个端口连接。这样一来，就会有很多无效的连接端口白白地开着，导致资源的浪费。<br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696614419997-9ca0d200-c211-4109-a758-e01d3a0f27fd.png" alt="640.png" style="display: inline; border-style: none;"><br>还有一种情况是已经失效的客户端发出的请求信息，由于某种原因传输到了服务器端，服务器端以为是客户端发出的有效请求，接收后产生错误。<br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696614459554-93f0f9b4-0499-4a57-9e81-2854d7d2f0f8.png" style="display: inline; border-style: none;"><br>所以我们需要“第三次握手”来确认这个过程：<br>通过第三次握手的数据告诉服务端，<strong>客户端有没有收到服务器“第二次握手”时传过去的数据，以及这个连接的序号是不是有效的</strong>。若发送的这个数据是<strong>“收到且没有问题”</strong>的信息，接收后服务器就正常建立 TCP 连接，否则建立 TCP  连接失败，服务器关闭连接端口。由此减少服务器开销和接收到失效请求发生的错误。</p>
<blockquote>
<p><a name="LOYaR"></a></p>
</blockquote>
<h3 id="为什么不能是四次呢？"><a href="#为什么不能是四次呢？" class="headerlink" title="为什么不能是四次呢？"></a>为什么不能是四次呢？</h3><ul>
<li>第一次握手服务端未收到SYN报文</li>
</ul>
<p>服务端不会进行任何的动作，而客户端由于一段时间内没有收到服务端发来的确认报文，等待一段时间后会重新发送SYN报文，如果仍然没有回应，会重复这个过程，直到发送次数超过最大重传次数限制，就会返回连接建立失败。</p>
<ul>
<li>第二次握手客户端未收到服务端响应的ACK报文</li>
</ul>
<p>客户端会继续重传，直到次数限制；而服务端此时会阻塞在accept()处，等待客户端发送ACK报文</p>
<ul>
<li>第三次握手服务端为收到客户端发送过来的ACK报文</li>
</ul>
<p>服务端同样会采用类似客户端的超时重传机制，如果重试次数超过限制，则accept()调用返回-1，服务端建立连接失败；而此时客户端认为自己已经建立连接成功，因此开始向服务端发送数据，但是服务端的accept()系统调用已经返回，此时不在监听状态，因此服务端接收到客户端发送来的数据时会发送RST报文给客户端，消除客户端单方面建立连接的状态。<br><a name="enqlk"></a></p>
<h2 id="三次握手中每一次没收到报文会发生什么情况？"><a href="#三次握手中每一次没收到报文会发生什么情况？" class="headerlink" title="三次握手中每一次没收到报文会发生什么情况？"></a>三次握手中每一次没收到报文会发生什么情况？</h2><p>首先我们来看一下以下这张图片，先简单了解一下 TCP 三次握手的情况。<br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696496177676-1585f9c9-3040-4b8d-9510-a5aa963fdd2a.png" style="display: inline; border-style: none;"></p>
<blockquote>
<p><a name="nJg2r"></a></p>
</blockquote>
<h3 id="TCP第-1-次握手丢失了，会发生什么？"><a href="#TCP第-1-次握手丢失了，会发生什么？" class="headerlink" title="TCP第 1 次握手丢失了，会发生什么？"></a>TCP第 1 次握手丢失了，会发生什么？</h3><ul>
<li>第一次握手服务端未收到SYN报文</li>
<li>服务端不会进行任何的动作，而客户端由于一段时间内没有收到服务端发来的确认报文，等待一段时间后会重新发送SYN报文，如果仍然没有回应，会重复这个过程，直到发送次数超过最大重传次数限制，就会返回连接建立失败。</li>
</ul>
<blockquote>
<p><a name="erEQd"></a></p>
</blockquote>
<h3 id="TCP第-2-次握手丢失了，会发生什么？"><a href="#TCP第-2-次握手丢失了，会发生什么？" class="headerlink" title="TCP第 2 次握手丢失了，会发生什么？"></a>TCP第 2 次握手丢失了，会发生什么？</h3><ul>
<li>第二次握手客户端未收到服务端响应的ACK报文</li>
<li>客户端会继续重传，直到次数限制；而服务端此时会阻塞在accept()处，等待客户端发送ACK报文</li>
</ul>
<blockquote>
<p><a name="OICzO"></a></p>
</blockquote>
<h3 id="TCP第-3-次握手丢失了，会发生什么？"><a href="#TCP第-3-次握手丢失了，会发生什么？" class="headerlink" title="TCP第 3 次握手丢失了，会发生什么？"></a>TCP第 3 次握手丢失了，会发生什么？</h3><ul>
<li>第三次握手服务端为收到客户端发送过来的ACK报文</li>
<li>服务端同样会采用类似客户端的超时重传机制，如果重试次数超过限制，则accept()调用返回-1，服务端建立连接失败；而此时客户端认为自己已经建立连接成功，因此开始向服务端发送数据，但是服务端的accept()系统调用已经返回，此时不在监听状态，因此服务端接收到客户端发送来的数据时会发送RST报文给客户端，消除客户端单方面建立连接的状态。<br>  <a name="JUVsk"></a></li>
</ul>
<h2 id="第-2-次握手传回了-ACK-为什么还要传回-SYN-呢？"><a href="#第-2-次握手传回了-ACK-为什么还要传回-SYN-呢？" class="headerlink" title="第 2 次握手传回了 ACK,为什么还要传回 SYN 呢？"></a>第 2 次握手传回了 ACK,为什么还要传回 SYN 呢？</h2><p>ACK是为了告诉<strong>客户端传来的数据已经接收无误</strong>。<br>而传回 SYN 是为了<strong>告诉客户端</strong>，<strong>服务端响应的确实是客户端发送的报文</strong>。<br><a name="ztB0h"></a></p>
<h2 id="第-3-次握手可以携带数据吗"><a href="#第-3-次握手可以携带数据吗" class="headerlink" title="第 3 次握手可以携带数据吗?"></a>第 3 次握手可以携带数据吗?</h2><p>第3次握手是可以携带数据的。<br>此时客户端已经处于ESTABLISHED状态。对于客户端来说，它已经建立连接成功，并且确认服务端的接收和发送能力是正常的。<br>第一次握手不能携带数据是出于安全的考虑，因为如果允许携带数据，攻击者每次在SYN报文中携带大量数据，就会导致服务端消耗更多的时间和空间去处理这些报文，会造成CPU和内存的消耗。<br><a name="tmd2A"></a></p>
<h2 id="什么是半连接队列？什么是全连接队列？"><a href="#什么是半连接队列？什么是全连接队列？" class="headerlink" title="什么是半连接队列？什么是全连接队列？"></a>什么是半连接队列？什么是全连接队列？</h2><ul>
<li>TCP进入三次握手前，服务端会从 **CLOSED **状态变为 <strong>LISTEN <strong>状态,同时在内部创建了两个队列：</strong>半连接队列（SYN队列）和全连接队列（ACCEPT队列）</strong>。</li>
</ul>
<p>那什么是 <strong>半连接队列（SYN队列）</strong> 呢? 什么又是 <strong>全连接队列（ACCEPT队列）</strong> 呢？我们来回忆一下 TCP 三次握手的图：<br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696617844462-6e545b40-cb26-4cbe-ae58-df1e610142af.png" style="display: inline; border-style: none;"></p>
<ul>
<li>TCP三次握手时，客户端发送SYN到服务端，服务端收到之后，便回复<strong>ACK和SYN</strong>，状态由<strong>LISTEN变为SYN_RCVD</strong>，此时这个连接就被推入了 **SYN队列 **，即半连接队列。</li>
<li>当客户端回复ACK, 服务端接收后，三次握手就完成了。这时连接会等待被具体的应用取走，在被取走之前，它被推入<strong>ACCEPT队列</strong>，即<strong>全连接队列</strong>。</li>
</ul>
<p>综上所述，可以得到以下结论：<strong>半连接队列</strong>存放的是<strong>三次握手未完成的连接</strong>，<strong>全连接队列</strong>存放的是<strong>完成三次握手的连接</strong>。</p>
<p><a name="gaMTP"></a></p>
<h2 id="什么是-SYN-Flood？然后-SYN-Flood-攻击和半连接队列有什么关系呢？"><a href="#什么是-SYN-Flood？然后-SYN-Flood-攻击和半连接队列有什么关系呢？" class="headerlink" title="什么是 SYN Flood？然后 SYN Flood 攻击和半连接队列有什么关系呢？"></a>什么是 SYN Flood？然后 SYN Flood 攻击和半连接队列有什么关系呢？</h2><blockquote>
<p><a name="I8wQY"></a></p>
</blockquote>
<h3 id="什么是-SYN-Flood？"><a href="#什么是-SYN-Flood？" class="headerlink" title="什么是 SYN Flood？"></a>什么是 SYN Flood？</h3><p><strong>SYN Flood 是一种典型的 DDos 攻击</strong>，它在短时间内，伪造 **不存在的 IP 地址 **, 向服务器发送大量SYN 报文。当服务器回复 SYN+ACK 报文后，不会收到 ACK 回应报文，那么SYN队列里的连接旧不会出对队，久⽽久之就会占满服务端的 <strong>SYN</strong> 接收队列（半连接队列），使得服务器不能为正常⽤户服务。<br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696618301150-76925210-591a-4963-a7ae-2d4a2f907195.png" style="display: inline; border-style: none;"></p>
<blockquote>
<p><a name="ZEHuI"></a></p>
</blockquote>
<h3 id="那有什么应对方案呢？"><a href="#那有什么应对方案呢？" class="headerlink" title="那有什么应对方案呢？"></a>那有什么应对方案呢？</h3><p>主要有 <strong>SYN Cookie</strong> 和 **SYN Proxy 防火墙 **等。</p>
<ul>
<li><strong>SYN Cookie</strong>：在收到 SYN 包后，服务器根据一定的方法，以数据包的源地址、端口等信息为参数计算出一个 cookie 值作为自己的 SYNACK 包的序列号，回复 SYN+ACK 后，服务器并不立即分配资源进行处理，等收到发送方的 ACK 包后，重新根据数据包的源地址、端口计算该包中的确认序列号是否正确，如果正确则建立连接，否则丢弃该包。</li>
<li><strong>SYN Proxy 防火墙</strong>：服务器防火墙会对收到的每一个 SYN 报文进行代理和回应，并保持半连接。等发送方将 ACK 包返回后，再重新构造 SYN 包发到服务器，建立真正的 TCP 连接。<br>  <a name="y0MTj"></a></li>
</ul>
<h2 id="说一下-TCP-四次挥手的过程？"><a href="#说一下-TCP-四次挥手的过程？" class="headerlink" title="说一下 TCP 四次挥手的过程？"></a>说一下 TCP 四次挥手的过程？</h2><p>说完三次握手，也该说说四次挥手了，别问为什么，问就是这个也是重点。<br>接下来我们先来看一个图：<br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696618491354-510bd735-2d26-41b7-b670-c138b2dfec87.png" style="display: inline; border-style: none;"></p>
<p>TCP 四次挥手过程：</p>
<ul>
<li>数据传输结束之后，通信双方都可以主动发起断开连接请求，这里假定客户端发起</li>
<li>客户端发送释放连接报文，<strong>第一次挥手</strong> (FIN&#x3D;1，seq&#x3D;u)，发送完毕后，客户端进入 <strong>FIN_WAIT_1</strong> 状态。</li>
<li>服务端发送确认报文，<strong>第二次挥手</strong> (ACK&#x3D;1，ack&#x3D;u+1,seq &#x3D;v)，发送完毕后，服务器端进入 <strong>CLOSE_WAIT</strong> 状态，客户端接收到这个确认包之后，进入 <strong>FIN_WAIT_2</strong> 状态。</li>
<li>服务端发送释放连接报文，<strong>第三次挥手</strong> (FIN&#x3D;1，ACK1,seq&#x3D;w,ack&#x3D;u+1)，发送完毕后，服务器端进入 <strong>LAST_ACK</strong> 状态，等待来自客户端的最后一个 ACK。</li>
<li>客户端发送确认报文，<strong>第四次挥手</strong> (ACK&#x3D;1，seq&#x3D;u+1,ack&#x3D;w+1)，客户端接收到来自服务器端的关闭请求，发送一个确认包，并进入** TIME_WAIT <strong>状态，</strong>等待了某个固定时间（两个最大段生命周期，2MSL，2 Maximum Segment Lifetime）之后**，没有收到服务器端的 ACK ，认为服务器端已经正常关闭连接，于是客户端自己也关闭连接，进入 <strong>CLOSED 状态</strong>。服务器端接收到这个确认包之后，关闭连接，进入 <strong>CLOSED 状态</strong>。</li>
</ul>
<p>这里，我们同样举一个例子来帮助大家理解：<br>假如某单身狗 up 主有一个女朋友，但是呢，由于博主上班九九六，下班又肝视频，导致他没有时间去陪女朋友，于是，有一天他的女朋友忍无可忍，终于选择提出了分手。</p>
<ul>
<li>女朋友：狗男人，最近你都不理我，你是不是不爱我了？你是不是外面有别的狗子了？我要和你分手？</li>
<li>沙雕 up 主听完一愣，怒火攻心：分手就分手，不陪你闹了，等我把东西收拾一下。</li>
</ul>
<p>于是，沙雕 up主小心翼翼地装起了自己的青轴机械键盘。</p>
<ul>
<li>沙雕 up 主：哼，蠢女人，我已经收拾完了，我先滚为敬，再见！</li>
<li>女朋友：滚，滚的远远的，越远越好，我一辈子都不想再见到你。</li>
</ul>
<p>就这样，沙雕 up 主和他的女友选择了分手。<br>哎，从这里可以看出，挥手的故事总是充满了悲伤和遗憾的😩😩😩！<br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696619120849-8dd9b058-7c57-45cd-aaf6-89f2d5b63716.png" style="display: inline; border-style: none;"><br><a name="qQQiy"></a></p>
<h2 id="TCP-为什么需要四次挥手呢？"><a href="#TCP-为什么需要四次挥手呢？" class="headerlink" title="TCP 为什么需要四次挥手呢？"></a>TCP 为什么需要四次挥手呢？</h2><p>再来回顾下四次挥手双方发 <strong>FIN</strong> 包的过程，就能理解 TCP 为什么需要四次了。</p>
<ul>
<li>关闭连接时，客户端向服务端发送  <strong>FIN</strong>  时，仅仅表示客户端不再发送数据了但是还能接收数据。</li>
<li>服务端收到客户端的 <strong>FIN</strong> 报文时，先回一个 <strong>ACK</strong> 应答报文，而服务端可能还有数据需要处理和发送，等服务端不再发送数据时，才发送 <strong>FIN</strong> 报文给客户端来表示同意现在关闭连接。</li>
</ul>
<p>从上面过程可知，服务端通常需要等待完成数据的发送和处理，所以服务端的 <strong>ACK</strong> 和 <strong>FIN</strong> 一般都会分开发送，所以，挥手的过程就比握手的过程多了一次。<br><a name="nKUsC"></a></p>
<h2 id="TCP-四次挥手过程中，为什么需要等待-2MSL-才进入-CLOSED-关闭状态？"><a href="#TCP-四次挥手过程中，为什么需要等待-2MSL-才进入-CLOSED-关闭状态？" class="headerlink" title="TCP 四次挥手过程中，为什么需要等待 2MSL, 才进入 CLOSED 关闭状态？"></a>TCP 四次挥手过程中，为什么需要等待 2MSL, 才进入 CLOSED 关闭状态？</h2><blockquote>
<p><a name="M8HOj"></a></p>
</blockquote>
<h3 id="为什么需要等待？"><a href="#为什么需要等待？" class="headerlink" title="为什么需要等待？"></a>为什么需要等待？</h3><p><strong>1. 为了保证客户端发送的最后一个 ACK 报文段能够到达服务端。</strong> 这个 ACK 报文段有可能丢失，因而使处在 <strong>LAST-ACK</strong> 状态的服务端就收不到对已发送的 <strong>FIN + ACK</strong> 报文段的确认。服务端会超时重传这个 FIN+ACK 报文段，而客户端就能在 2MSL 时间内（<strong>超时 + 1MSL 传输</strong>）收到这个重传的 FIN+ACK 报文段。接着客户端重传一次确认，重新启动 2MSL 计时器。最后，客户端和服务器都正常进入到 <strong>CLOSED</strong> 状态。<br><strong>2. 防止已失效的连接请求报文段出现在本连接中</strong>。客户端在发送完最后一个 ACK 报文段后，再经过时间 2MSL，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。这样就可以使下一个连接中不会出现这种旧的连接请求报文段。</p>
<blockquote>
<p><a name="Y629x"></a></p>
</blockquote>
<h3 id="为什么等待的时间是2MSL？"><a href="#为什么等待的时间是2MSL？" class="headerlink" title="为什么等待的时间是2MSL？"></a>为什么等待的时间是2MSL？</h3><p><strong>MSL 是 Maximum Segment Lifetime，报⽂最⼤⽣存时间</strong>，它是任何报⽂在⽹络上存在的最⻓时间，超过这个时间报⽂将被丢弃。<br><strong>TIME_WAIT 等待 2 倍的 MSL</strong>，⽐较合理的解释是：⽹络中可能存在来⾃发送⽅的数据包，当这些发送⽅的数据包被接收⽅处理后⼜会向对⽅发送响应，所以⼀来⼀回需要等待 <strong>2</strong> 倍的时间。<br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696619526836-f09693f3-2c4d-4e88-9607-121dc99aa868.png" style="display: inline; border-style: none;"><br>⽐如如果被动关闭⽅没有收到断开连接的最后的 ACK 报⽂，就会触发超时重发 Fin 报⽂，另⼀⽅接收到 FIN 后，会重发 ACK 给被动关闭⽅， ⼀来⼀去正好 2 个 MSL。<br><a name="nDNEt"></a></p>
<h2 id="保活计时器有什么作用呢？"><a href="#保活计时器有什么作用呢？" class="headerlink" title="保活计时器有什么作用呢？"></a>保活计时器有什么作用呢？</h2><p>除时间等待计时器外，TCP 还有一个<strong>保活计时器（keepalive timer）</strong>。</p>
<p>设想这样的场景：客户已主动与服务器建立了 TCP 连接。但后来客户端的主机突然发生故障。显然，服务器以后就不能再收到客户端发来的数据。因此，应当有措施使服务器不要再白白等待下去。这就需要使用保活计时器了。</p>
<p>服务器每收到一次客户端的数据，就重新设置保活计时器，时间的设置通常是两个小时。若两个小时都没有收到客户端的数据，服务端就发送一个探测报文段，以后则每隔 75 秒钟发送一次。若连续发送 10 个探测报文段后仍然无客户端的响应，服务端就认为客户端出了故障，接着就关闭这个连接。<br><a name="VMuXX"></a></p>
<h2 id="CLOSE-WAIT-和-TIME-WAIT-的状态和意义？"><a href="#CLOSE-WAIT-和-TIME-WAIT-的状态和意义？" class="headerlink" title="CLOSE-WAIT 和 TIME-WAIT 的状态和意义？"></a>CLOSE-WAIT 和 TIME-WAIT 的状态和意义？</h2><blockquote>
<p><a name="ttP2J"></a></p>
</blockquote>
<h3 id="CLOSE-WAIT状态有什么意义？"><a href="#CLOSE-WAIT状态有什么意义？" class="headerlink" title="CLOSE-WAIT状态有什么意义？"></a>CLOSE-WAIT状态有什么意义？</h3><p>服务端收到客户端关闭连接的请求并确认之后，就会进入CLOSE-WAIT状态。此时服务端可能还有一些数据没有传输完成，因此不能立即关闭连接，而CLOSE-WAIT状态就是为了保证服务端在关闭连接之前将待发送的数据处理完。</p>
<blockquote>
<p><a name="gcv0J"></a></p>
</blockquote>
<h3 id="TIME-WAIT有什么意义？"><a href="#TIME-WAIT有什么意义？" class="headerlink" title="TIME-WAIT有什么意义？"></a>TIME-WAIT有什么意义？</h3><p>TIME-WAIT状态发生在第四次挥手，当客户端向服务端发送ACK确认报文后进入TIME-WAIT状态。<br>它存在的意义主要是两个：<br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696620265513-0aafcf1f-fd15-4b7e-89d4-e7f8e63ff232.png" alt="image.png" style="display: inline; border-style: none;"></p>
<blockquote>
<ol>
<li><strong>保证连接正确关闭</strong></li>
</ol>
</blockquote>
<p>假设客户端最后一次发送的ACK包在传输的时候丢失了，由于TCP协议的超时重传机制，服务端将重发FIN报文，如果客户端没有维持TIME-WAIT状态而直接关闭的话，当收到服务端重新发送的FIN包时，客户端就会使用RST包来响应服务端，导致服务端以为有错误发生，然而实际关闭连接过程是正常的。</p>
<blockquote>
<ol start="2">
<li><strong>防止旧连接数据包</strong></li>
</ol>
</blockquote>
<p>如果客户端收到服务端的FIN报文之后立即关闭连接，但是此时服务端对应的端口并没有关闭，如果客户端在相同端口建立新的连接，可能会导致新连接收到旧连接残留的数据包，导致不可预料的异常发生。<br><a name="YIcPB"></a></p>
<h2 id="TIME-WAIT-状态过多会导致什么问题？怎么解决？"><a href="#TIME-WAIT-状态过多会导致什么问题？怎么解决？" class="headerlink" title="TIME_WAIT 状态过多会导致什么问题？怎么解决？"></a>TIME_WAIT 状态过多会导致什么问题？怎么解决？</h2><blockquote>
<p><a name="KSnZH"></a></p>
</blockquote>
<h3 id="TIME-WAIT-状态过多会导致什么问题"><a href="#TIME-WAIT-状态过多会导致什么问题" class="headerlink" title="TIME_WAIT 状态过多会导致什么问题?"></a>TIME_WAIT 状态过多会导致什么问题?</h3><p>如果服务器有处于 TIME-WAIT 状态的 TCP，则说明是由服务器⽅主动发起的断开请求。<br>过多的 TIME-WAIT 状态主要的危害有两种：</p>
<ol>
<li>内存资源占⽤；</li>
<li>对端⼝资源的占⽤，⼀个 TCP 连接⾄少消耗⼀个本地端⼝；</li>
</ol>
<blockquote>
<p><a name="UreZ3"></a></p>
</blockquote>
<h3 id="怎么解决TIME-WAIT-状态过多？"><a href="#怎么解决TIME-WAIT-状态过多？" class="headerlink" title="怎么解决TIME_WAIT 状态过多？"></a>怎么解决TIME_WAIT 状态过多？</h3><ul>
<li>服务器可以设置SO_REUSEADDR套接字来通知内核，如果端口被占用，但是TCP连接位于TIME_WAIT 状态时可以重用端口。</li>
<li>还可以使用长连接的方式来减少TCP的连接和断开，在长连接的业务里往往不需要考虑TIME_WAIT状态。<br>  <a name="qOf2M"></a></li>
</ul>
<h2 id="说说-TCP-报文首部的格式，以及有什么作用呢？"><a href="#说说-TCP-报文首部的格式，以及有什么作用呢？" class="headerlink" title="说说 TCP 报文首部的格式，以及有什么作用呢？"></a>说说 TCP 报文首部的格式，以及有什么作用呢？</h2><p>看一下TCP报文首部的格式：<br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696620590455-119c65d3-5112-4e16-9c47-fa053c920263.png" style="display: inline; border-style: none;"></p>
<blockquote>
<p><a name="S45DT"></a></p>
</blockquote>
<h3 id="报文格式以及作用如下："><a href="#报文格式以及作用如下：" class="headerlink" title="报文格式以及作用如下："></a>报文格式以及作用如下：</h3><ul>
<li><strong>16 位端口号</strong>：源端口号，主机该报文段是来自哪里；目标端口号，要传给哪个上层协议或应用程序</li>
<li><strong>32 位序号</strong>：一次 TCP 通信（从 TCP 连接建立到断开）过程中某一个传输方向上的字节流的每个字节的编号。</li>
<li><strong>32 位确认号</strong>：用作对另一方发送的 tcp 报文段的响应。其值是收到的 TCP 报文段的序号值加 1。</li>
<li><strong>4 位首部长度</strong>：表示 tcp 头部有多少个 32bit 字（4 字节）。因为 4 位最大能标识 15，所以 TCP 头部最长是 60 字节。</li>
<li><strong>6 位标志位</strong>：URG(紧急指针是否有效)，ACk（表示确认号是否有效），PST（缓冲区尚未填满），RST（表示要求对方重新建立连接），SYN（建立连接消息标志接），FIN（表示告知对方本端要关闭连接了）</li>
<li><strong>16 位窗口大小</strong>：是 TCP 流量控制的一个手段。这里说的窗口，指的是接收通告窗口。它告诉对方本端的 TCP 接收缓冲区还能容纳多少字节的数据，这样对方就可以控制发送数据的速度。</li>
<li><strong>16 位校验和</strong>：由发送端填充，接收端对 TCP 报文段执行 CRC 算法以检验 TCP 报文段在传输过程中是否损坏。注意，这个校验不仅包括 TCP 头部，也包括数据部分。这也是 TCP 可靠传输的一个重要保障。</li>
<li><strong>16 位紧急指针</strong>：一个正的偏移量。它和序号字段的值相加表示最后一个紧急数据的下一字节的序号。因此，确切地说，这个字段是紧急指针相对当前序号的偏移，不妨称之为紧急偏移。TCP 的紧急指针是发送端向接收端发送紧急数据的方法。<br>  <a name="Nne0o"></a></li>
</ul>
<h2 id="TCP-是如何保证连接的可靠性的？"><a href="#TCP-是如何保证连接的可靠性的？" class="headerlink" title="TCP 是如何保证连接的可靠性的？"></a>TCP 是如何保证连接的可靠性的？</h2><p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696622596825-e00d194f-ed48-4dbc-b8f0-e444937aadfc.png" alt="image.png" style="display: inline; border-style: none;"></p>
<ol>
<li><strong>连接管理</strong>：TCP使用三次握手和四次挥手保证可靠地建立连接和释放连接，这里就不用多说了。</li>
<li><strong>校验和</strong>：TCP 将保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果接收端的检验和有差错，TCP 将丢弃这个报文段和不确认收到此报文段。</li>
</ol>
<p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696622672118-84708320-bf8c-4f90-b9b2-fd3899e0dae3.png" style="display: inline; border-style: none;"></p>
<ol start="3">
<li><strong>序列号&#x2F;确认应答</strong>：TCP 给发送的每一个包进行编号，接收方会对收到的包进行应答，发送方就会知道接收方是否收到对应的包，如果发现没有收到，就会重发，这样就能保证数据的完整性。就像老师上课，会问一句，这一章听懂了吗？没听懂再讲一遍。</li>
</ol>
<p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696622739436-36970ca8-8c34-4f87-8c73-6452af6ecabe.png" style="display: inline; border-style: none;"></p>
<ol start="4">
<li><strong>流量控制</strong>：TCP  连接的每一方都有固定大小的缓冲空间，TCP的接收端只允许发送端发送接收端缓冲区能接纳的数据。当接收方来不及处理发送方的数据，能提示发送方降低发送的速率，防止包丢失。TCP 使用的流量控制协议是可变大小的滑动窗口协议。（TCP 利用滑动窗口实现流量控制）</li>
</ol>
<p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696622788329-58332230-e26a-4770-bcde-166b0f4d9f33.png" style="display: inline; border-style: none;"></p>
<ol start="5">
<li><strong>最大消息长度</strong>：在建立TCP连接的时候，双方约定一个最大的长度（MSS）作为发送的单位，重传的时候也是以这个单位来进行重传。理想的情况下是该长度的数据刚好不被网络层分块。</li>
</ol>
<p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696622820706-29e1fa27-08ff-4d22-bd59-e2160bb58d82.png" style="display: inline; border-style: none;"></p>
<ol start="6">
<li><strong>超时重传</strong>：超时重传是指发送出去的数据包到接收到确认包之间的时间，如果超过了这个时间会被认为是丢包了，需要重传。</li>
</ol>
<p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696622859806-4a32c316-33a3-4bcf-9f9e-14352a3cc2fe.png" style="display: inline; border-style: none;"></p>
<ol start="7">
<li><strong>拥塞控制</strong>：如果网络非常拥堵，此时再发送数据就会加重网络负担，那么发送的数据段很可能超过了最大生存时间也没有到达接收方，就会产生丢包问题。为此TCP引入慢启动机制，先发出少量数据，就像探路一样，先摸清当前的网络拥堵状态后，再决定按照多大的速度传送数据。</li>
</ol>
<p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696622895390-f43f1d0f-f0d1-4577-a3e9-8b1c469ef502.png" style="display: inline; border-style: none;"><br><a name="bHuoM"></a></p>
<h2 id="讲述一下-TCP-的流量控制？"><a href="#讲述一下-TCP-的流量控制？" class="headerlink" title="讲述一下 TCP 的流量控制？"></a>讲述一下 TCP 的流量控制？</h2><p>TCP 提供了一种机制，可以让发送端根据接收端的实际接收能力控制发送的数据量，这就是<strong>流量控制</strong>。<br>TCP 通过<strong>滑动窗口</strong>来控制流量，我们看下简要流程：</p>
<ul>
<li>首先双方三次握手，初始化各自的窗口大小，均为 400 个字节。</li>
</ul>
<p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696623017043-ba91409a-2a9f-4543-8747-4826138a44bc.jpeg" style="display: inline; border-style: none;"></p>
<ul>
<li>假如当前发送方给接收方发送了 200 个字节，那么，发送方的 <strong>SND.NXT</strong> 会右移 200 个字节，也就是说当前的可用窗口减少了 200 个字节。</li>
<li>接受方收到后，放到缓冲队列里面，<strong>REV.WND</strong> &#x3D;400-200&#x3D;200 字节，所以 <strong>win</strong>&#x3D;200 字节返回给发送方。接收方会在 ACK 的报文首部带上缩小后的滑动窗口 200 字节</li>
<li>发送方又发送 200 字节过来，200 字节到达，继续放到缓冲队列。不过这时候，由于大量负载的原因，接受方处理不了这么多字节，只能处理 100 字节，剩余的 100 字节继续放到缓冲队列。这时候，<strong>REV.WND</strong> &#x3D; 400-200-100&#x3D;100 字节，即 <strong>win</strong>&#x3D;100 返回发送方。</li>
<li>发送方继续发送 100 字节过来，这时候，接收窗口 <strong>win</strong> 变为 0。</li>
<li>发送方停止发送，开启一个定时任务，每隔一段时间，就去询问接受方，直到 <strong>win</strong> 大于 0，才继续开始发送。<br>  <a name="f3GOa"></a></li>
</ul>
<h2 id="聊一聊-TCP-的滑动窗口"><a href="#聊一聊-TCP-的滑动窗口" class="headerlink" title="聊一聊 TCP 的滑动窗口?"></a>聊一聊 TCP 的滑动窗口?</h2><p>TCP 发送一个数据，如果需要收到确认应答，才会发送下一个数据。这样的话就会有个缺点：效率会比较低。<br>这里举一个例子：“我们在微信上聊天，你打完一句话，我回复一句之后，你才能打下一句。假如我没有及时回复呢？你是把话憋着不说吗？然后傻傻等到我回复之后再接着发下一句？”<br>为了解决这个问题，TCP 引入了<strong>窗口</strong>的概念，它是操作系统开辟的一个缓存空间。<strong>窗口大小值表示无需等待确认应答，而可以继续发送数据的最大值</strong>。<br>TCP 头部有个字段叫 win，也即那个 <strong>16 位的窗口大小</strong>，它告诉对方本端的 TCP 接收缓冲区还能容纳多少字节的数据，这样对方就可以控制发送数据的速度，从而达到 **流量控制 **的目的。<br>“通俗点讲，就是接受方每次收到数据包，在发送确认报文的时候，同时告诉发送方，自己的缓存区还有多少空余空间，缓冲区的空余空间，我们就称之为接受窗口大小。这就是 win。”<br>TCP 滑动窗口分为两种: 发送窗口和接收窗口。</p>
<blockquote>
<p><a name="K0QhM"></a></p>
</blockquote>
<h3 id="TCP-发送窗口"><a href="#TCP-发送窗口" class="headerlink" title="TCP 发送窗口"></a>TCP 发送窗口</h3><p>**发送端的滑动窗口 **包含四大部分，如下：</p>
<ul>
<li>已发送且已收到 ACK 确认</li>
<li>已发送但未收到 ACK 确认</li>
<li>未发送但可以发送</li>
<li>未发送也不可以发送</li>
</ul>
<p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696623150808-d35361f3-64ba-41a5-866b-1874d730a3a3.jpeg" style="display: inline; border-style: none;"></p>
<ul>
<li>深蓝色框里就是<strong>发送窗口</strong>。</li>
<li><strong>SND.WND</strong>: 表示发送窗口的大小, 上图虚线框的格子数是 10个，即发送窗口大小是 10。</li>
<li><strong>SND.NXT</strong>：下一个发送的位置，它指向未发送但可以发送的第一个字节的序列号。</li>
<li><strong>SND.UNA</strong>: 一个绝对指针，它指向的是已发送但未确认的第一个字节的序列号。</li>
</ul>
<blockquote>
<p><a name="P5uDo"></a></p>
</blockquote>
<h3 id="TCP-滑动窗口"><a href="#TCP-滑动窗口" class="headerlink" title="TCP 滑动窗口"></a>TCP 滑动窗口</h3><ul>
<li>已成功接收并确认</li>
<li>未收到数据但可以接收</li>
<li>未收到数据并不可以接收的数据</li>
</ul>
<p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696623497647-d6bf7c53-4d33-456e-a898-2560082351cf.jpeg" style="display: inline; border-style: none;"></p>
<ul>
<li>蓝色框内，就是<strong>接收窗口</strong>。</li>
<li><strong>REV.WND</strong>: 表示接收窗口的大小, 上图虚线框的格子就是 9 个。</li>
<li><strong>REV.NXT</strong>: 下一个接收的位置，它指向未收到但可以接收的第一个字节的序列号。<br>  <a name="cWlTB"></a></li>
</ul>
<h2 id="了解过-Nagle-算法以及延迟确认吗？"><a href="#了解过-Nagle-算法以及延迟确认吗？" class="headerlink" title="了解过 Nagle 算法以及延迟确认吗？"></a>了解过 Nagle 算法以及延迟确认吗？</h2><blockquote>
<p><a name="wTH8j"></a></p>
</blockquote>
<h3 id="Nagle-算法和延迟确认是干什么的？"><a href="#Nagle-算法和延迟确认是干什么的？" class="headerlink" title="Nagle 算法和延迟确认是干什么的？"></a>Nagle 算法和延迟确认是干什么的？</h3><p>当我们 TCP 报⽂的承载的数据⾮常⼩的时候，例如⼏个字节，那么整个⽹络的效率是很低的，因为每个 TCP 报⽂中都会有 20 个字节的 TCP 头部，也会有 20 个字节的 IP 头部，⽽数据只有⼏个字节，所以在整个报⽂中有效数据占有的比例就会⾮常低。<br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696623630076-fe656f22-2c14-4b87-b8de-ca773a2d8556.png" style="display: inline; border-style: none;"></p>
<p>这就好像快递员开着⼤货⻋送⼀个⼩包裹⼀样浪费。<br>那么就出现了常⻅的两种策略，来减少⼩报⽂的传输，分别是：</p>
<ul>
<li>Nagle 算法</li>
<li>延迟确认</li>
</ul>
<blockquote>
<p><a name="ODcQW"></a></p>
</blockquote>
<h3 id="Nagle-算法"><a href="#Nagle-算法" class="headerlink" title="Nagle 算法"></a>Nagle 算法</h3><p>Nagle 算法：<strong>任意时刻，最多只能有一个未被确认的小段</strong>。所谓 “小段”，指的是小于 MSS 尺寸的数据块，所谓 “未被确认”，是指一个数据块发送出去后，没有收到对方发送的 ACK 确认该数据已收到。<br>Nagle 算法的策略：</p>
<ul>
<li>没有已发送未确认报⽂时，⽴刻发送数据。</li>
<li>存在未确认报⽂时，直到「没有已发送未确认报⽂」或「数据⻓度达到 MSS ⼤⼩」时，再发送数据。</li>
</ul>
<p>只要没满⾜上⾯条件中的⼀条，发送⽅⼀直在囤积数据，直到满⾜上⾯的发送条件。</p>
<blockquote>
<p><a name="sfhBO"></a></p>
</blockquote>
<h3 id="延迟确认"><a href="#延迟确认" class="headerlink" title="延迟确认"></a>延迟确认</h3><p>事实上当没有携带数据的 ACK，它的⽹络效率也是很低的，因为它也有 40 个字节的 IP 头 和 TCP 头，但却没有携带数据报⽂。<br>为了解决 ACK 传输效率低问题，所以就衍⽣出了 <strong>TCP</strong> 延迟确认。<br>TCP 延迟确认的策略：</p>
<ul>
<li>当有响应数据要发送时，ACK 会随着响应数据⼀起⽴刻发送给对⽅</li>
<li>当没有响应数据要发送时，ACK 将会延迟⼀段时间，以等待是否有响应数据可以⼀起发送</li>
<li>如果在延迟等待发送 ACK 期间，对⽅的第⼆个数据报⽂⼜到达了，这时就会⽴刻发送 ACK</li>
</ul>
<p>一般情况下，<strong>Nagle 算法和延迟确认</strong>不能一起使用，Nagle 算法意味着延迟发，<strong>延迟确认</strong>意味着延迟接收，两个凑在一起就会造成更大的延迟，会产生性能问题。</p>
<p><a name="AyGwJ"></a></p>
<h2 id="什么是拥塞控制，不是已经有了流量控制了吗？"><a href="#什么是拥塞控制，不是已经有了流量控制了吗？" class="headerlink" title="什么是拥塞控制，不是已经有了流量控制了吗？"></a>什么是拥塞控制，不是已经有了流量控制了吗？</h2><p>前⾯的流量控制是避免发送⽅的数据填满接收⽅的缓存，但是并不知道整个⽹络之中发⽣了什么。<br>⼀般来说，计算机⽹络都处在⼀个共享的环境。因此也有可能会因为其他主机之间的通信使得⽹络拥堵。<br>在⽹络出现拥堵时，如果继续发送⼤量数据包，可能会导致数据包时延、丢失等，这时 <strong>TCP</strong> 就会重传数据，但是⼀重传就会导致⽹络的负担更重，于是会导致更⼤的延迟以及更多的丢包，这个情况就会进⼊恶性循环被不断地放⼤….<br>所以，TCP 不能忽略整个网络中发⽣的事，它被设计成⼀个⽆私的协议，当⽹络发送拥塞时，TCP 会⾃我牺牲，降低发送的数据流。<br>于是，就有了拥塞控制，控制的⽬的就是避免发送⽅的数据填满整个⽹络。<br>就像是一个水管，不能让太多的水（数据流）流入水管，如果超过水管的承受能力，水管会被撑爆（丢包）。</p>
<p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696623963619-ecebd558-68de-426a-98a7-5ecd149bf869.jpeg" style="display: inline; border-style: none;"><br>发送方维护一个<strong>拥塞窗口 cwnd（congestion window)</strong> 的变量，调节所要发送数据的量。</p>
<p><a name="wQE7G"></a></p>
<h2 id="什么是拥塞窗口？和发送窗口有什么关系呢？"><a href="#什么是拥塞窗口？和发送窗口有什么关系呢？" class="headerlink" title="什么是拥塞窗口？和发送窗口有什么关系呢？"></a>什么是拥塞窗口？和发送窗口有什么关系呢？</h2><p>拥塞窗⼝ **cwnd **是发送⽅维护的⼀个的状态变量，它会根据⽹络的拥塞程度动态变化的。<br>发送窗⼝ swnd 和接收窗⼝ rwnd 是约等于的关系，那么由于加⼊了拥塞窗⼝的概念后，此时发送窗⼝的值是 **swnd &#x3D; min(cwnd, rwnd)**，也就是拥塞窗⼝和接收窗⼝中的最⼩值。</p>
<p>拥塞窗⼝ cwnd 变化的规则：</p>
<ul>
<li>只要⽹络中没有出现拥塞， cwnd 就会增⼤；</li>
<li>但⽹络中出现了拥塞， cwnd 就减少；</li>
</ul>
<p><a name="L6F0U"></a></p>
<h2 id="拥塞控制有哪些常用的算法了？"><a href="#拥塞控制有哪些常用的算法了？" class="headerlink" title="拥塞控制有哪些常用的算法了？"></a>拥塞控制有哪些常用的算法了？</h2><p>拥塞控制主要有这几种常用算法，如下图所示：<br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696625888375-61d84643-e312-46ee-9497-d3ada59cea70.jpeg" style="display: inline; border-style: none;"></p>
<blockquote>
<p><a name="GLQ0C"></a></p>
</blockquote>
<h3 id="慢启动算法"><a href="#慢启动算法" class="headerlink" title="慢启动算法"></a>慢启动算法</h3><p>慢启动算法，慢慢启动。<br>它表示 TCP 建立连接完成后，一开始不要发送大量的数据，而是先探测一下网络的拥塞程度。由小到大逐渐增加拥塞窗口的大小，如果没有出现丢包，<strong>每收到一个 ACK，就将拥塞窗口 cwnd 大小就加 1（单位是 MSS）</strong>。<strong>每轮次</strong>发送窗口增加一倍，呈指数增长，如果出现丢包，拥塞窗口就减半，进入拥塞避免阶段。<br>举个例子：</p>
<ul>
<li>连接建⽴完成后，⼀开始初始化 cwnd &#x3D; 1 ，表示可以传⼀个 MSS ⼤⼩的数据。</li>
<li>当收到⼀个 ACK 确认应答后，cwnd 增加 1，于是⼀次能够发送 2 个</li>
<li>当收到 2 个的 ACK 确认应答后， cwnd 增加 2，于是就可以⽐之前多发2 个，所以这⼀次能够发送 4 个</li>
<li>当这 4 个的 ACK 确认到来的时候，每个确认 cwnd 增加 1， 4 个确认 cwnd 增加 4，于是就可以⽐之前多发4 个，所以这⼀次能够发送 8 个。</li>
</ul>
<p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696626018160-76a5e27a-22bf-4187-bdc2-5d888a550f9d.png" style="display: inline; border-style: none;"><br>发包的个数是指数性的增⻓。<br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696626044839-dde7203d-88fc-40f4-9b8e-df87a79a5d84.png" style="display: inline; border-style: none;"><br>为了防止 <strong>cwnd</strong> 增长过大引起网络拥塞，还需设置一个<strong>慢启动阀值 ssthresh</strong>（slow start threshold)状态变量。当 <strong>cwnd</strong> 到达该阀值后，就好像水管被关小了水龙头一样，减少拥塞状态。即当 <strong>cwnd&gt;ssthresh</strong> 时，进入了<strong>拥塞避免</strong>算法。<br> </p>
<blockquote>
<p><a name="m06VM"></a></p>
</blockquote>
<h3 id="拥塞避免算法"><a href="#拥塞避免算法" class="headerlink" title="拥塞避免算法"></a>拥塞避免算法</h3><p>一般来说，慢启动阀值 ssthresh 是 65535 字节，<strong>cwnd</strong> 到达<strong>慢启动阀值</strong>后</p>
<ul>
<li>每收到一个 ACK 时，cwnd &#x3D; cwnd + 1&#x2F;cwnd</li>
<li>当每过一个 RTT 时，cwnd &#x3D; cwnd + 1</li>
</ul>
<p>显然这是一个线性上升的算法，避免过快导致网络拥塞问题。<br>接着上面慢启动的例子，假定 ssthresh 为 8 ：：</p>
<ul>
<li>当 8 个 ACK 应答确认到来时，每个确认增加 1&#x2F;8，8 个 ACK 确认 cwnd ⼀共增加 1，于是这⼀次能够发送 9个 MSS ⼤⼩的数据，变成了线性增⻓。</li>
</ul>
<p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696626204135-d8b50d43-e3c7-4b1d-bd39-ce168a03e848.png" style="display: inline; border-style: none;"><br> </p>
<blockquote>
<p><a name="IZPJ1"></a></p>
</blockquote>
<h3 id="拥塞发生算法"><a href="#拥塞发生算法" class="headerlink" title="拥塞发生算法"></a>拥塞发生算法</h3><p>当网络拥塞发生**丢包 **时，会有两种情况：</p>
<ul>
<li>RTO 超时重传</li>
<li>快速重传</li>
</ul>
<p>如果是发生了 <strong>RTO 超时重传</strong>，就会使用拥塞发生算法</p>
<ul>
<li>慢启动阀值 sshthresh &#x3D;  cwnd &#x2F;2</li>
<li>cwnd 重置为 1</li>
<li>进入新的慢启动过程</li>
</ul>
<p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696626252493-d8f4e2c1-dba7-4fa8-a5c0-8ed6da14df8f.png" style="display: inline; border-style: none;"></p>
<p> <br>发⽣快速重传的拥塞发⽣算法：</p>
<ul>
<li>拥塞窗口大小 cwnd &#x3D; cwnd&#x2F;2</li>
<li>慢启动阀值 ssthresh &#x3D; cwnd</li>
<li>进入快速恢复算法</li>
</ul>
<blockquote>
<p><a name="af29c"></a></p>
</blockquote>
<h3 id="快速恢复算法"><a href="#快速恢复算法" class="headerlink" title="快速恢复算法"></a>快速恢复算法</h3><p>快速重传和快速恢复算法一般同时使用。快速恢复算法认为，还有 3 个重复 ACK 收到，说明网络也没那么糟糕，所以没有必要像 RTO 超时那么强烈。<br>正如前面所说，进入快速恢复之前，cwnd 和 sshthresh 已被更新：</p>
<ul>
<li><p>cwnd &#x3D; cwnd &#x2F;2</p>
</li>
<li><p>sshthresh &#x3D; cwnd<br>然后，进⼊快速恢复算法如下：</p>
</li>
<li><p>cwnd &#x3D; sshthresh  + 3</p>
</li>
<li><p>重传重复的那几个 ACK（即丢失的那几个数据包）</p>
</li>
<li><p>如果再收到重复的 ACK，那么 cwnd &#x3D; cwnd +1</p>
</li>
<li><p>如果收到新数据的 ACK 后, cwnd &#x3D; sshthresh。因为收到新数据的 ACK，表明恢复过程已经结束，可以再次进入了拥塞避免的算法了。</p>
</li>
</ul>
<p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696626301973-3ba280f3-0365-4083-97e4-86e4661869a7.png" style="display: inline; border-style: none;"></p>
<p><a name="crHut"></a></p>
<h2 id="可以简单说一下TCP-的重传机制吗？"><a href="#可以简单说一下TCP-的重传机制吗？" class="headerlink" title="可以简单说一下TCP 的重传机制吗？"></a>可以简单说一下TCP 的重传机制吗？</h2><p>重传包括<strong>超时重传、快速重传、带选择确认的重传（SACK）、重复 SACK 四种</strong>。<br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696626570300-3ba63f10-7328-40bc-b6ae-5acf753a7ccb.png" style="display: inline; border-style: none;"></p>
<blockquote>
<p><a name="T8eHE"></a></p>
</blockquote>
<h3 id="超时重传"><a href="#超时重传" class="headerlink" title="超时重传"></a>超时重传</h3><p>超时重传，是 TCP 协议保证数据可靠性的另一个重要机制，其原理是在发送某一个数据以后就开启一个计时器，在一定时间内如果没有得到发送的数据报的 ACK 报文，那么就重新发送数据，直到发送成功为止。</p>
<blockquote>
<p><a name="M4XOl"></a></p>
</blockquote>
<h4 id="超时时间应该设置为多少呢？"><a href="#超时时间应该设置为多少呢？" class="headerlink" title="超时时间应该设置为多少呢？"></a>超时时间应该设置为多少呢？</h4><p>先来看下什么叫 <strong>RTT（Round-Trip Time，往返时间）</strong>。<br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696626655002-a8d28bfb-9086-490e-b887-8dcd60dc706e.png" style="display: inline; border-style: none;"><br>RTT 就是数据完全发送完，到收到确认信号的时间，即数据包的一次往返时间。<br>超时重传时间，就是 RTO（Retransmission Timeout)。那么，<strong>RTO 到底设置多大呢？</strong></p>
<ul>
<li>如果 RTO 设置很大，等了很久都没重发，这样肯定就不行。</li>
<li>如果 RTO 设置很小，那很可能数据都没有丢失，就开始重发了，这会导致网络阻塞，从而恶性循环，导致更多的超时出现。</li>
</ul>
<p>一般来说，RTO 略微大于 RTT，效果是最佳的。<br>其实，RTO 有个标准方法的计算公式，也叫 <strong>Jacobson &#x2F; Karels 算法</strong>。</p>
<ol>
<li>首先计算 <strong>SRTT（即计算平滑的 RTT）</strong></li>
</ol>
<p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696626770084-f850b21e-41c2-47ed-a7b8-a22bbe2a9bc2.png" alt="image.png" style="display: inline; border-style: none;"></p>
<ol start="2">
<li>其次，计算 <strong>RTTVAR (round-trip time variation)</strong></li>
</ol>
<p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696626850170-ccde8f96-e268-45a9-bb2e-5df6e2a7cca6.png" alt="image.png" style="display: inline; border-style: none;"></p>
<ol start="3">
<li>最后，得出最终的 RTO</li>
</ol>
<p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696626882509-41c7fa34-a533-4e95-8f76-9c5f893c4591.png" alt="image.png" style="display: inline; border-style: none;"><br>在 Linux 下，<strong>α &#x3D; 0.125</strong>，<strong>β &#x3D; 0.25</strong>， <strong>μ &#x3D; 1</strong>，<strong>∂ &#x3D; 4</strong>。别问这些参数是怎么来的，它们是大量实践，调出的最优参数。</p>
<blockquote>
<p><strong>超时重传并不是一个十分完美的重传方案</strong>，它有这些缺点：</p>
<ul>
<li>当一个报文丢失时，会等待一定的超时周期，才重传分组，增加了端到端的时延。</li>
<li>当一个报文丢失时，在其等待超时的过程中，可能会出现这种情况：其后的报文段已经被接收端接收但却迟迟得不到确认，发送端会认为也丢失了，从而引起不必要的重传，既浪费资源也浪费时间。</li>
</ul>
</blockquote>
<p>并且，<strong>对于 TCP，如果发生一次超时重传，时间间隔下次就会加倍</strong>。<br> </p>
<blockquote>
<p><a name="TqxEM"></a></p>
</blockquote>
<h3 id="快速重传"><a href="#快速重传" class="headerlink" title="快速重传"></a>快速重传</h3><p>TCP 还有另外⼀种<strong>快速重传（Fast Retransmit）</strong>机制，它不以时间为驱动，⽽是以数据驱动重传。<br>它不以时间驱动，而是以数据驱动。它是基于接收端的反馈信息来引发重传的。<br>可以用它来解决超时重发的时间等待问题，快速重传流程如下：<br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696626962200-4f514273-1f42-4f37-accb-7b97d4aab6c5.png" style="display: inline; border-style: none;"><br>在上图，发送⽅发出了 1，2，3，4，5 份数据：</p>
<ul>
<li>第⼀份 Seq1 先送到了，于是就 Ack 回 2；</li>
<li>结果 Seq2 因为某些原因没收到，Seq3 到达了，于是还是 Ack 回 2；</li>
<li>后⾯的 Seq4 和 Seq5 都到了，但还是 Ack 回 2，因为 Seq2 还是没有收到；</li>
<li>发送端收到了三个 <strong>Ack &#x3D; 2</strong> 的确认，知道了 <strong>Seq2</strong> 还没有收到，就会在定时器过期之前，重传丢失的 <strong>Seq2</strong>。</li>
<li>最后，收到了 Seq2，此时因为 Seq3，Seq4，Seq5 都收到了，于是 Ack 回 6 。</li>
</ul>
<p>快速重传机制只解决了⼀个问题，就是超时时间的问题，但是它依然⾯临着另外⼀个问题。就是重传的时候，是重传之前的⼀个，还是重传所有的问题。<br>⽐如对于上⾯的例⼦，是重传 Seq2 呢？还是重传 Seq2、Seq3、Seq4、Seq5 呢？因为发送端并不清楚这连续的三个 Ack 2 是谁传回来的。<br>根据 TCP 不同的实现，以上两种情况都是有可能的。可⻅，这是⼀把双刃剑。<br>为了解决不知道该重传哪些 TCP 报⽂，于是就有 SACK ⽅法。</p>
<blockquote>
<p><a name="IAvD1"></a></p>
</blockquote>
<h3 id="带选择确认的重传（SACK）"><a href="#带选择确认的重传（SACK）" class="headerlink" title="带选择确认的重传（SACK）"></a>带选择确认的重传（SACK）</h3><p>为了解决应该重传多少个包的问题? TCP 提供了<br><strong>带选择确认的重传（即 SACK，Selective Acknowledgment）</strong>。<br><strong>SACK 机制 <strong>就是，</strong>在快速重传的基础</strong>上，<strong>接收方返回最近收到报文段的序列号范围</strong>，这样发送方就知道接收方哪些数据包是没收到的。这样就很清楚应该重传哪些数据包。<br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696627070521-cdc233b3-3755-470b-8c5a-f7ef151d5f73.png" style="display: inline; border-style: none;"><br>如上图中，发送⽅收到了三次同样的 ACK 确认报⽂，于是就会触发快速重发机制，通过 SACK 信息发现只有200~299 这段数据丢失，则重发时，就只选择了这个 TCP 段进⾏重发。</p>
<blockquote>
<p><a name="rCx5h"></a></p>
</blockquote>
<h3 id="重复-SACK（D-SACK）"><a href="#重复-SACK（D-SACK）" class="headerlink" title="重复 SACK（D-SACK）"></a>重复 SACK（D-SACK）</h3><p><strong>D-SACK，英文是 Duplicate SACK</strong>，是<strong>在 SACK 的基础上做了一些扩展</strong>，主要用来<strong>告诉发送方，有哪些数据包，自己重复接受了</strong>。<br>DSACK 的目的是<strong>帮助发送方判断，是否发生了包失序、ACK 丢失、包重复或伪重传</strong>，从而让 TCP 可以更好的做网络流控。<br>例如ACK丢包导致的数据包重复：<br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696627157075-8520f0c9-42b9-4afb-aa21-2b4605f6b33f.png" style="display: inline; border-style: none;"></p>
<ul>
<li>接收⽅发给发送⽅的两个 ACK 的确认应答都丢失了，所以发送⽅超时后，重传了第⼀个数据包（3000 ~3499）</li>
<li>于是接收⽅发现数据是重复收到的，于是回了⼀个 <strong>SACK &#x3D; 3000~3500</strong>，告诉「发送⽅」 3000~3500的数据早已被接收了，因为 ACK 都到了 4000 了，已经意味着 4000 之前的所有数据都已收到，所以这个SACK 就代表着 D-SACK 。这样发送⽅就知道了，数据没有丢，是接收⽅的 ACK 确认报⽂丢了。</li>
</ul>
<p><a name="nLcPk"></a></p>
<h2 id="说一下-TCP-的粘包和拆包？"><a href="#说一下-TCP-的粘包和拆包？" class="headerlink" title="说一下 TCP 的粘包和拆包？"></a>说一下 TCP 的粘包和拆包？</h2><blockquote>
<p><a name="L8ISk"></a></p>
</blockquote>
<h3 id="什么是TCP粘包和拆包"><a href="#什么是TCP粘包和拆包" class="headerlink" title="什么是TCP粘包和拆包?"></a>什么是TCP粘包和拆包?</h3><p>TCP 是面向流，没有界限的一串数据。TCP 底层并不了解上层业务数据的具体含义，它会根据 TCP 缓冲区的实际情况进行包的划分，所以在业务上认为，一<strong>个完整的包可能会被 TCP 拆分成多个包进行发送</strong>，<strong>也有可能把多个小的包封装成一个大的数据包发送</strong>，这就是所谓的 TCP 粘包和拆包问题。<br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696621029691-2df14eba-501a-4b5e-a33f-4b591b299ec7.png" style="display: inline; border-style: none;"></p>
<blockquote>
<p><a name="ndLJT"></a></p>
</blockquote>
<h3 id="为什么会产生粘包和拆包？"><a href="#为什么会产生粘包和拆包？" class="headerlink" title="为什么会产生粘包和拆包？"></a>为什么会产生粘包和拆包？</h3><ul>
<li>要发送的数据小于 TCP 发送缓冲区的大小，TCP 将多次写入缓冲区的数据一次发送出去，将会发生粘包；</li>
<li>接收数据端的应用层没有及时读取接收缓冲区中的数据，将发生粘包；</li>
<li>要发送的数据大于 TCP 发送缓冲区剩余空间大小，将会发生拆包；</li>
<li>待发送数据大于 MSS（最大报文长度），TCP 在传输前将进行拆包。即 TCP 报文长度 - TCP 头部长度 &gt; MSS。</li>
</ul>
<blockquote>
<p><a name="CMDZa"></a></p>
</blockquote>
<h3 id="怎么解决粘包和拆包"><a href="#怎么解决粘包和拆包" class="headerlink" title="怎么解决粘包和拆包"></a>怎么解决粘包和拆包</h3><ul>
<li>发送端将每个数据包封装为固定长度</li>
<li>在数据尾部增加特殊字符进行分割</li>
<li>将数据分为两部分，一部分是头部，一部分是内容体；其中头部结构大小固定，且有一个字段声明内容体的大小。<br>  <a name="KGKkG"></a></li>
</ul>
<h2 id="一台机器最多可以支撑多少个-TCP-连接？"><a href="#一台机器最多可以支撑多少个-TCP-连接？" class="headerlink" title="一台机器最多可以支撑多少个 TCP 连接？"></a>一台机器最多可以支撑多少个 TCP 连接？</h2><p>一台机器最大究竟能支持多少个网络连接？这个简单的问题里其实埋了坑，导致无数的英雄好汉被困惑不解。就和树上九只鸟打死一只还剩几只的问题一样，没有和你说清楚树上是真鸟，还是假鸟，也没有说枪是有声还是无声的。所有，我们今天来做一个总结：</p>
<ul>
<li><strong>TCP连接的服务端机：</strong>对于有1个 IP 的客户端来说，受限于 IP_LOCAL_PORT_RANGE 参数，也受限于65535。但单Linux可以配置多个 IP ，有几个 IP，最大理论值就翻几倍。</li>
</ul>
<blockquote>
<p>多张网卡不是必须的。即使只有一张网卡，也可以配置多 IP。K8S 就是这么干的，在K8S里面，一台物理机上可以部署多个Pod。但每一个 Pod 都会被分配一个独立的 IP，所以完全不用担心物理机上部署了过多的 Pod 而影响你用的 Pod 里的TCP连接数量。在 IP 给你的那一刻，你的 Pod 就和其它应用隔离开了。</p>
</blockquote>
<ul>
<li><strong>TCP连接的服务器机：</strong>每一个监听的端口虽然理论值很大，但这个数字没有实际意义。最大并发数取决你的内存大小。一条TCP连接如果不发送数据的话，消耗内存是3.3K左右，<strong>假设你只保持连接不发送数据，那么你服务器可以建立的连接最大数量 &#x3D; 你的内存&#x2F;3.3K。</strong> 假如是4GB的内存，那么大约可接受的TCP连接数量是100万左右。</li>
</ul>
<blockquote>
<p>这个例子里，我们考虑的前提是在一个进程下 Hold 所有的服务器端连接。而在实际中的项目里，为了收发数据方便，很多网络IO模型还会为TCP连接再创建一个线程或协程。拿最轻量的 Golang 来说，一个协程栈也需要2KB的内存开销。</p>
</blockquote>
<p><a name="Y6J5c"></a></p>
<h2 id="拔掉网线之后，原有的-TCP-连接还在吗？"><a href="#拔掉网线之后，原有的-TCP-连接还在吗？" class="headerlink" title="拔掉网线之后，原有的 TCP 连接还在吗？"></a>拔掉网线之后，原有的 TCP 连接还在吗？</h2><p> TCP 连接在 Linux 内核中是一个名为 <strong>Struct Socket 的结构体</strong>，该结构体的内容包含 <strong>TCP 连接的状态等信息</strong>。当拔掉网线的时候，操作系统并不会变更该结构体的任何内容，所以 TCP 连接的状态也不会发生改变。 </p>
<p><a name="DIxCu"></a></p>
<h2 id="如何在-Linux-上查看-TCP-状态呢？"><a href="#如何在-Linux-上查看-TCP-状态呢？" class="headerlink" title="如何在 Linux 上查看 TCP 状态呢？"></a>如何在 Linux 上查看 TCP 状态呢？</h2><p> TCP 的连接状态查看，在 Linux 可以通过 **netstat -napt **命令查看 <br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696495995736-432b3d26-4aaf-41ec-900d-0bb0b29f7042.png" style="display: inline; border-style: none;"></p>
<p><a name="hqeOs"></a></p>
<h1 id="✨UDP"><a href="#✨UDP" class="headerlink" title="✨UDP"></a>✨UDP</h1><p>网上看了很多的面经，感觉 UDP 问的不多，基本上都是拿来和 TCP 作比较了。</p>
<hr>
<p><a name="RLXaE"></a></p>
<h2 id="什么是-UDP-的单播、广播、多播？"><a href="#什么是-UDP-的单播、广播、多播？" class="headerlink" title="什么是 UDP 的单播、广播、多播？"></a>什么是 UDP 的单播、广播、多播？</h2><p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696496893385-2543ec8f-b4bc-46ef-8b3b-87587a2ac5fb.png" style="display: inline; border-style: none;"><br>:::success</p>
<ol>
<li>UDP 单播：单播用于两个主机之间的端对端通信。</li>
<li>广播 UDP 与单播 UDP 的主要区别就是 IP 地址不同，<strong>广播使用广播地址 255.255.255.255</strong>，通过该 IP 地址可将消息发送到在同一广播网络上的每个主机。值得强调的是：本地广播信息是不会被路由器转发。当然这是十分容易理解的，因为如果路由器转发了广播信息，那么势必会引起网络瘫痪。这也是为什么IP协议的设计者故意没有定义互联网范围的广播机制。广播地址通常用于在<strong>网络游戏</strong>中处于同一本地网络的玩家之间交流状态信息等。其实广播顾名思义，就是想局域网内所有的人说话，但是广播还是要指明接收者的端口号的，因为不可能接受者的所有端口都来收听广播。</li>
<li>多播，也称为“组播”，将网络中同一业务类型主机进行了逻辑上的分组，进行数据收发的时候其数据仅仅在同一分组中进行，其他的主机没有加入此分组不能收发对应的数据。</li>
</ol>
<p>多播的应用主要有<strong>网上视频、网上会议</strong>等。<br>:::<br><a name="C6mfJ"></a></p>
<h2 id="说说-TCP-和-UDP-之间的区别？"><a href="#说说-TCP-和-UDP-之间的区别？" class="headerlink" title="说说 TCP 和 UDP 之间的区别？"></a>说说 TCP 和 UDP 之间的区别？</h2><p>最根本区别：<strong>TCP 是面向连接，而 UDP 是无连接</strong>。<br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696575016381-24584c53-6bfa-441e-9c83-8bfac87ff094.png" style="display: inline; border-style: none;"><br>你可以类比一下：TCP是打电话，UDP是村口的广播。<br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696575084023-7cb767a9-364c-4c87-af4f-934446b677b4.png" style="display: inline; border-style: none;"><br><a name="NsZA8"></a></p>
<h2 id="TCP-和-UDP-的应用场景有哪些？"><a href="#TCP-和-UDP-的应用场景有哪些？" class="headerlink" title="TCP 和 UDP 的应用场景有哪些？"></a>TCP 和 UDP 的应用场景有哪些？</h2><blockquote>
<p>这个问题你可以结合上面结合 TCP 和 UDP 之间的区别一起记忆。</p>
</blockquote>
<ul>
<li><strong>TCP应用场景：</strong> 效率要求相对低，但对准确性要求相对高的场景。因为传输中需要对数据确认、重发、排序等操作，相比之下效率没有UDP高。例如：文件传输（准确高要求高、但是速度可以相对慢）、收发邮件、远程登录。</li>
<li><strong>UDP应用场景：</strong> 效率要求相对高，对准确性要求相对低的场景。例如：QQ聊天、在线视频、网络语音电话（即时通讯，速度要求高，但是出现偶尔断续不是太大问题，并且此处完全不可以使用重发机制）、广播通信（广播、多播）。<br>  <a name="sbor3"></a></li>
</ul>
<h2 id="TCP-和-UDP-分别对应的常见应用层协议有哪些？"><a href="#TCP-和-UDP-分别对应的常见应用层协议有哪些？" class="headerlink" title="TCP 和 UDP 分别对应的常见应用层协议有哪些？"></a>TCP 和 UDP 分别对应的常见应用层协议有哪些？</h2><blockquote>
<p><a name="nAyE5"></a></p>
</blockquote>
<h3 id="基于TCP的应用层协议有：HTTP、FTP、SMTP、TELNET、SSH"><a href="#基于TCP的应用层协议有：HTTP、FTP、SMTP、TELNET、SSH" class="headerlink" title="基于TCP的应用层协议有：HTTP、FTP、SMTP、TELNET、SSH"></a>基于TCP的应用层协议有：HTTP、FTP、SMTP、TELNET、SSH</h3><ul>
<li><strong>HTTP</strong>：HyperText Transfer Protocol（超文本传输协议），默认端口80</li>
<li><strong>FTP</strong>: File Transfer Protocol (文件传输协议), 默认端口(20用于传输数据，21用于传输控制信息)</li>
<li><strong>SMTP</strong>: Simple Mail Transfer Protocol (简单邮件传输协议) ,默认端口25</li>
<li><strong>TELNET</strong>: Teletype over the Network (网络电传), 默认端口23</li>
<li><strong>SSH</strong>：Secure Shell（安全外壳协议），默认端口 22</li>
</ul>
<blockquote>
<p><a name="oQMbK"></a></p>
</blockquote>
<h3 id="基于UDP的应用层协议：NFS、DHCP、DNS、TFTP、SNMP"><a href="#基于UDP的应用层协议：NFS、DHCP、DNS、TFTP、SNMP" class="headerlink" title="基于UDP的应用层协议：NFS、DHCP、DNS、TFTP、SNMP"></a>基于UDP的应用层协议：NFS、DHCP、DNS、TFTP、SNMP</h3><ul>
<li><strong>NFS</strong> : 网络文件系统</li>
<li>**DHCP **: 动态主机配置协议</li>
<li><strong>DNS</strong> : Domain Name Service (域名服务),默认端口 53</li>
<li><strong>BOOTP</strong>: </li>
<li><strong>TFTP</strong>: Trivial File Transfer Protocol (简单文件传输协议)，默认端口69</li>
<li><strong>SNMP</strong>：Simple Network Management Protocol（简单网络管理协议），通过UDP端口161接收，只有Trap信息采用UDP端口162。<br>  <a name="dDnLP"></a></li>
</ul>
<h2 id="简单说说-UDP-的协议格式？"><a href="#简单说说-UDP-的协议格式？" class="headerlink" title="简单说说 UDP 的协议格式？"></a>简单说说 UDP 的协议格式？</h2><blockquote>
<p><a name="BjNfs"></a></p>
<h3 id="UDP-协议格式"><a href="#UDP-协议格式" class="headerlink" title="UDP 协议格式"></a>UDP 协议格式</h3></blockquote>
<p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696576627993-be7caaa7-603a-42a9-b629-9a3886809420.png" style="display: inline; border-style: none;"></p>
<blockquote>
<p><a name="qGQs6"></a></p>
</blockquote>
<h3 id="UDP报文格式参数解析"><a href="#UDP报文格式参数解析" class="headerlink" title="UDP报文格式参数解析"></a>UDP报文格式参数解析</h3><ol>
<li>16位源端口号：表示数据从哪里来</li>
<li>16位目的端口号：表示数据要到哪里去</li>
<li>16位UDP长度：表示整个数据报（UDP首部+UDP数据）的长度</li>
<li>16位UDP检验和：如果UDP报文的检验和出错，就会直接将报文丢弃</li>
</ol>
<p>注：<strong>端口号大部分都是16位的，其根本原因就是因为传输层协议当中的端口号就是16位的</strong></p>
<ul>
<li>UDP如何将报头与有效载荷进行分离：</li>
</ul>
<blockquote>
<p>UDP报头是一种定长报头，UDP在读取报文时读取完前8个字节(报头)后剩下的就都是有效载荷了</p>
</blockquote>
<ul>
<li>UDP如何将有效载荷交付给上层协议：</li>
</ul>
<blockquote>
<p>获取到一个报文后从该报文的前8个字节中提取出对应的目的端口号，通过目的端口号找到对应的上层应用层进程进行交付</p>
</blockquote>
<ul>
<li>UDP 使用注意事项：</li>
</ul>
<blockquote>
<ol>
<li>UDP协议首部中有一个16位的最大长度，也就是说一个UDP能传输的数据最大长度是64K(包含UDP首部)</li>
<li>如果我们需要传输的数据超过64K, 就需要在应用层手动的分包，多次发送，并在接收端手动拼装</li>
</ol>
</blockquote>
<p><a name="X6VGk"></a></p>
<h2 id="UDP-协议存在的意义"><a href="#UDP-协议存在的意义" class="headerlink" title="UDP 协议存在的意义"></a>UDP 协议存在的意义</h2><ol>
<li>TCP协议是可靠的协议，也就意味着TCP协议需要做更多的工作来保证传输数据的可靠，此时需要的成本相比于UDP更高 </li>
<li>UDP协议是不可靠的协议，也就意味着UDP协议不需要考虑数据传输时可能出现的问题，但UDP无论是使用还是维护都足够简单 </li>
<li>虽然TCP复杂，但TCP的效率不一定比UDP低，TCP当中不仅有保证可靠性的机制，还有保证传输效率的其他机制 </li>
<li>网络通信时具体采用TCP还是UDP完全取决于上层的应用场景。如果应用场景严格要求数据在传输过程中的可靠性，那么就必须采用TCP协议，如果应用场景允许数据传输出现少量丢包，那么肯定优先选择UDP协议，因为UDP协议足够简单<br> <a name="kxWBx"></a></li>
</ol>
<h2 id="为什么-QQ-采用-UDP-协议作为传输协议？"><a href="#为什么-QQ-采用-UDP-协议作为传输协议？" class="headerlink" title="为什么 QQ 采用 UDP 协议作为传输协议？"></a>为什么 QQ 采用 UDP 协议作为传输协议？</h2><p>这个是之前在知乎上看到的一个话题，在整理的时候刚好又遇到了，所以来讲一讲。<br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696577648941-b8fcd316-f91f-4c14-8515-576ec0497ed3.png" style="display: inline; border-style: none;"><br> </p>
<ul>
<li>首先，QQ并不是完全基于UDP实现。比如在使用QQ进行文件传输等活动的时候，就会使用TCP作为可靠传输的保证。</li>
<li>使用UDP进行交互通信的好处在于，延迟较短，对数据丢失的处理比较简单。同时，TCP是一个全双工协议，需要建立连接，所以网络开销也会相对大。</li>
<li>如果使用QQ语音和QQ视频的话，UDP的优势就更为突出了，首先延迟较小。最重要的一点是不可靠传输，这意味着如果数据丢失的话，不会有重传。因为用户一般来说可以接受图像稍微模糊一点，声音稍微不清晰一点，但是如果在几秒钟以后再出现之前丢失的画面和声音，这恐怕是很难接受的。</li>
<li>由于QQ的服务器设计容量是海量级的应用，一台服务器要同时容纳十几万的并发连接，因此服务器端只有采用UDP协议与客户端进行通讯才能保证这种超大规模的服务</li>
</ul>
<p>简单总结一下：UDP协议是无连接方式的协议，它的效率高，速度快，占资源少，对服务器的压力比较小。但是其传输机制为不可靠传送，必须依靠辅助的算法来完成传输控制。QQ采用的通信协议以UDP为主，辅以TCP协议。<br><a name="shvpq"></a></p>
<h2 id="UDP-协议为什么不可靠？"><a href="#UDP-协议为什么不可靠？" class="headerlink" title="UDP 协议为什么不可靠？"></a>UDP 协议为什么不可靠？</h2><p>UDP 在传输数据之前不需要先建立连接，服务器的传输层在接收到 UDP 报文之后，由于其没有确认机制，所以不需要进行确认，也不需要提供可靠交付，综上所述，可以大致总结为以下几个方面：</p>
<ol>
<li><strong>不保证消息交付</strong>：不确认，不重传，无超时</li>
<li><strong>不保证交付顺序</strong>：不设置包序号，不重排，不会发生队首阻塞</li>
<li><strong>不进行拥塞控制</strong>：不内置客户端或网络反馈机制</li>
<li><strong>不跟踪连接转态</strong>：不内置客户端或网络反馈机制<br> <a name="z4otd"></a></li>
</ol>
<h2 id="DNS-为什么要使用-UDP协议？"><a href="#DNS-为什么要使用-UDP协议？" class="headerlink" title="DNS 为什么要使用 UDP协议？"></a>DNS 为什么要使用 UDP协议？</h2><p>准确来说，TCP 和 QQ 一样，也是即使用 TCP，又使用 UCP 的。</p>
<ul>
<li>当客户端想DNS服务器查询域名（域名解析）的时候，一般返回的内容不会超过UDP报文的最大长度，即512字节，用UDP传输时，不需要创建连接，从而大大提高了响应速度，但这要求域名解析服务器和域名服务器都必须自己处理超时和重传从而保证可靠性。</li>
<li>当进行区域传送（主域名服务器向辅助域名服务器传送变化的那部分数据）时会使用TCP，因为数据同步传送的数据量比一个请求和应答的数据量要多，而TCP允许的报文长度更长，因此为了保证数据的正确性，会使用基于可靠连接的TCP。<br>  <a name="UYURK"></a></li>
</ul>
<h2 id="TCP-和-UDP-可以同时绑定相同的端口吗？"><a href="#TCP-和-UDP-可以同时绑定相同的端口吗？" class="headerlink" title="TCP 和 UDP 可以同时绑定相同的端口吗？"></a>TCP 和 UDP 可以同时绑定相同的端口吗？</h2><blockquote>
<p>可以的，传输层的「端口号」的作用，是为了区分同一个主机上不同应用程序的数据包，传输层有两个传输协议分别是 TCP 和 UDP，在内核中是两个完全独立的软件模块。<br>当主机收到数据包后，可以在 IP 包头的「协议号」字段知道该数据包是 TCP&#x2F;UDP，所以可以根据这个信息确定送给哪个模块（TCP&#x2F;UDP）处理，送给 TCP&#x2F;UDP 模块的报文根据「端口号」确定送给哪个应用程序处理。 </p>
</blockquote>
<p><a name="y1K6Z"></a></p>
<h1 id="🌕IP"><a href="#🌕IP" class="headerlink" title="🌕IP"></a>🌕IP</h1><hr>
<p><a name="mjeZK"></a></p>
<h2 id="VIP-协议以及地址漂移？"><a href="#VIP-协议以及地址漂移？" class="headerlink" title="VIP 协议以及地址漂移？"></a>VIP 协议以及地址漂移？</h2><p>VIP 即虚拟 IP 地址是一个不与特定计算机或一个计算机中的网络接口卡（NIC）相连的 IP 地址。数据包被发送到这个 VIP 地址，但是所有的数据还是经过真实的网络接口。</p>
<p>何为虚拟IP，就是一个未分配给真实主机的IP，也就是说对外提供数据库服务器的主机除了有一个真实IP外还有一个虚拟IP，使用这两个IP中的 任意一个都可以连接到这台主机，所有项目中数据库链接一项配置的都是这个虚IP，当服务器发生故障无法对外提供服务时，动态将这个虚IP切换到备用主机。</p>
<p>至于如何切换，其实现原理主要是靠 TCP&#x2F;IP 的 ARP 协议。因为 IP 地址只是一个逻辑地址，在以太网中 MAC 地址才是真正用来进行数据传输的物理地址，每台主机中都有一个 ARP 高速缓存，存储同一个网络内的 IP 地址与 MAC 地址的对应关系，以太网中的主机发送数据时会先从这个缓存中查询目标 IP 对应的 MAC 地址，会向这个 MAC 地址发送数据。操作系统会自动维护这个缓存，这就是整个实现的关键。<br><a name="iFWC6"></a></p>
<h2 id="端到端、点到点之间的区别是什么？"><a href="#端到端、点到点之间的区别是什么？" class="headerlink" title="端到端、点到点之间的区别是什么？"></a>端到端、点到点之间的区别是什么？</h2><p>数据传输的可靠性是通过数据链路层和网络层的点对点和传输层的端对端保证的。端到端与点到点是针对网络中传输的两端设备间的关系而言的。</p>
<ul>
<li><strong>端到端通信是针对传输层来说的</strong>。它是一个网络连接，指的是在数据传输之前，在发送端与接收端之间（忽略中间有多少设备）为数据的传输建立一条链路，链路建立以后，发送端就可以发送数据，知道数据发送完毕，接收端确认接收成功。 也就是说在数据传输之前，先为数据的传输开辟一条通道，然后在进行传输。从发送端发出数据到接收端接收完毕结束。</li>
<li><strong>点到点通信是针对数据链路层或网络层来说的</strong>。点对点是基于 MAC 地址或 IP 地址。指一个设备发数据给与该该设备直接连接的其他设备，这台设备又在合适的时候将数据传递给与它相连的下一个设备，通过一台一台直接相连的设备把数据传递到接收端。</li>
</ul>
<p>其主要区别还是，<strong>端到端关心的开始与结束，点到点关心的中间过程</strong>。可以说 端到端是由无数个点到点构成的。<br><a name="v1OPo"></a></p>
<h2 id="IP-协议是什么？IP-协议有什么作用吗？"><a href="#IP-协议是什么？IP-协议有什么作用吗？" class="headerlink" title="IP 协议是什么？IP 协议有什么作用吗？"></a>IP 协议是什么？IP 协议有什么作用吗？</h2><blockquote>
<p><a name="TqbfA"></a></p>
</blockquote>
<h3 id="IP协议是什么？"><a href="#IP协议是什么？" class="headerlink" title="IP协议是什么？"></a>IP协议是什么？</h3><p>IP协议（Internet Protocol）又被称为互联网协议，是支持网间互联的数据包协议，工作在<strong>网际层</strong>，主要目的就是为了提高网络的可扩展性。<br>通过<strong>网际协议IP</strong>，可以把参与互联的，性能各异的网络<strong>看作一个统一的网络</strong>。<br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696591047476-5a3c20d5-9faa-4d4d-b4c1-e06df31aa78f.png" style="display: inline; border-style: none;"><br>和传输层TCP相比，IP协议是一种无连接&#x2F;不可靠、尽力而为的数据包传输服务，和TCP协议一起构成了TCP&#x2F;IP协议的核心。</p>
<blockquote>
<p><strong>IP协议有哪些作用？</strong></p>
</blockquote>
<p>IP协议主要有以下几个作用：</p>
<ul>
<li><strong>寻址和路由</strong>：在IP数据报中携带源IP地址和目的IP地址来表示该数据包的源主机和目标主机。IP数据报在传输过程中，每个中间节点（IP网关、路由器）只根据网络地址来进行转发，如果中间节点是路由器，则路由器会根据路由表选择合适的路径。IP协议根据路由选择协议提供的路由信息对IP数据报进行转发，直至目标主机。</li>
<li><strong>分段和重组</strong>：IP数据报在传输过程中可能会经过不同的网络，在不同的网络中数据报的最大长度限制是不同的，IP协议通过给每个IP数据报分配一个标识符以及分段与组装的相关信息，使得数据报在不同的网络中能够被传输，被分段后的IP数据报可以独立地在网络中进行转发，在达到目标主机后由目标主机完成重组工作，恢复出原来的IP数据报。</li>
</ul>
<blockquote>
<p><strong>传输层协议和网络层协议有什么区别？</strong></p>
</blockquote>
<p>网络层协议负责提供主机间的逻辑通信；传输层协议负责提供进程间的逻辑通信。<br><a name="NimH4"></a></p>
<h2 id="IP-地址有哪些分类？"><a href="#IP-地址有哪些分类？" class="headerlink" title="IP 地址有哪些分类？"></a>IP 地址有哪些分类？</h2><p>一个IP地址在互联网范围内是惟一的，一般可以这么认为，IP 地址 &#x3D; {&lt;网络号&gt;，&lt;主机号&gt;}。</p>
<ol>
<li><strong>网络号</strong>：它标志主机所连接的网络地址表示属于互联网的哪一个网络。</li>
<li><strong>主机号</strong>：它标志主机地址表示其属于该网络中的哪一台主机。</li>
</ol>
<p>IP 地址分为 A，B，C，D，E 五大类：</p>
<ul>
<li>A 类地址 (1~126)：以 0 开头，网络号占前 8 位，主机号占后面 24 位。</li>
<li>B 类地址 (128~191)：以 10 开头，网络号占前 16 位，主机号占后面 16 位。</li>
<li>C 类地址 (192~223)：以 110 开头，网络号占前 24 位，主机号占后面 8 位。</li>
<li>D 类地址 (224~239)：以 1110 开头，保留为多播地址。</li>
<li>E 类地址 (240~255)：以 1111开头，保留位为将来使用</li>
</ul>
<p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696591140929-3be2ae74-2b5e-43bb-bccf-aae649f3f804.png" style="display: inline; border-style: none;"><br><a name="R3vGR"></a></p>
<h2 id="域名-和-IP-有什么关系？一个-IP-可以对应多个域名吗？"><a href="#域名-和-IP-有什么关系？一个-IP-可以对应多个域名吗？" class="headerlink" title="域名 和 IP 有什么关系？一个 IP 可以对应多个域名吗？"></a>域名 和 IP 有什么关系？一个 IP 可以对应多个域名吗？</h2><ul>
<li>IP地址在同一个网络中是惟一的，用来标识每一个网络上的设备，其相当于一个人的身份证号</li>
<li>域名在同一个网络中也是惟一的，就像是一个人的名字、绰号</li>
</ul>
<p>假如你有多个不用的绰号，你的朋友可以用其中任何一个绰号叫你，但你的身份证号码却是惟一的。但同时你的绰号也可能和别人重复，假如你不在，有人叫你的绰号，其它人可能就答应了。</p>
<p>一个域名可以对应多个IP，但这种情况DNS做负载均衡的，在用户访问过程中，一个域名只能对应一个IP。而一个IP却可以对应多个域名，是一对多的关系。<br><a name="CAH7y"></a></p>
<h2 id="IPV4-地址不够，这个问题怎么解决？"><a href="#IPV4-地址不够，这个问题怎么解决？" class="headerlink" title="IPV4 地址不够，这个问题怎么解决？"></a>IPV4 地址不够，这个问题怎么解决？</h2><p>我们知道，IP地址有32位，可以标记2的32次方个地址，听起来很多，但是全球的网络设备数量已经远远超过这个数字，所以IPV4地址已经不够用了，那怎么解决呢？<br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696591885888-e90f55bf-5474-4dac-aa47-1d2b1402ad18.png" alt="image.png" style="display: inline; border-style: none;"></p>
<ul>
<li>DHCP：动态主机配置协议，动态分配IP地址，只给接入网络的设备分配IP地址，因此同一个MAC地址的设备，每次接入互联网时，得到的IP地址不一定是相同的，该协议使得空闲的IP地址可以得到充分利用。</li>
<li>CIDR：无类别域间路由。CIDR消除了传统的A类、B类、C类地址以及划分子网的概念，因而更加有效地分配IPv4的地址空间，但无法从根本上解决地址耗尽的问题。</li>
<li>NAT：网络地址转换协议，我们知道属于不同局域网的主机可以使用相同的IP地址，从而一定程度上缓解了IP资源枯竭的问题，然而主机在局域网中使用的IP地址是不能在公网中使用的，当局域网主机想要与公网主机进行通信时，NAT方法可以将该主机IP地址转换为全球IP地址。该协议能够有效解决IP地址不足的问题。</li>
<li>IPv6：作为接替IPv4的下一代互联网协议，其可以实现2的128次方个地址，而这个数量级，即使给地球上每一粒沙子都分配一个IP地址也够用，该协议能够从根本上解决IPv4地址不够用的问题。<br>  <a name="GU9Fy"></a></li>
</ul>
<h2 id="说一-ARP-协议的工作流程？"><a href="#说一-ARP-协议的工作流程？" class="headerlink" title="说一 ARP 协议的工作流程？"></a>说一 ARP 协议的工作流程？</h2><p>ARP 协议，<strong>Address Resolution Protocol</strong>，地址解析协议，它是用于实现 IP 地址到 MAC 地址的映射。<br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696591932863-3dc4d550-728f-4883-a71e-ca1b931559c0.png" style="display: inline; border-style: none;"></p>
<ol>
<li>首先，每台主机都会在自己的** ARP 缓冲区中建立一个 ARP 列表**，以表示 IP 地址和 MAC 地址的对应关系。</li>
<li>当源主机需要将一个数据包要发送到目的主机时，会首先<strong>检查自己的 ARP 列表，是否存在该 IP 地址对应的 MAC 地址</strong>；如果有,就<strong>直接将数据包发送到这个 MAC 地址</strong>；如果没有，就<strong>向本地网段发起一个 ARP 请求的广播包，查询此目的主机对应的 MAC 地址</strong>。此 ARP 请求的数据包里，包括源主机的 IP 地址、硬件地址、以及目的主机的 IP 地址。</li>
<li>网络中所有的主机收到这个 ARP 请求后，会检查数据包中的目的 IP 是否和自己的 IP 地址一致。如果不相同，就会忽略此数据包；如果相同，该主机首先将发送端的 MAC 地址和 IP 地址添加到自己的 ARP 列表中，如果 ARP 表中已经存在该 IP 的信息，则将其覆盖，然后给源主机发送一个 ARP 响应数据包，告诉对方自己是它需要查找的 MAC 地址。</li>
<li>源主机收到这个 ARP 响应数据包后，将得到的目的主机的 IP 地址和 MAC 地址添加到自己的 ARP 列表中，并利用此信息开始数据的传输。如果源主机一直没有收到 ARP 响应数据包，表示 ARP 查询失败。<br> <a name="AwPEP"></a></li>
</ol>
<h2 id="IP-地址和-MAC-地址都有什么作用呢"><a href="#IP-地址和-MAC-地址都有什么作用呢" class="headerlink" title="IP 地址和 MAC 地址都有什么作用呢?"></a>IP 地址和 MAC 地址都有什么作用呢?</h2><ul>
<li>MAC地址是数据链路层和物理层使用的地址，是写在网卡上的物理地址，用来定义网络设备的位置，不可变更。</li>
<li>IP地址是网络层和以上各层使用的地址，是一种逻辑地址。IP地址用来区别网络上的计算机。<br>  <a name="uyjuN"></a></li>
</ul>
<h2 id="为什么已经有了-IP-地址，还需要有-MAC-地址呢？"><a href="#为什么已经有了-IP-地址，还需要有-MAC-地址呢？" class="headerlink" title="为什么已经有了 IP 地址，还需要有 MAC 地址呢？"></a>为什么已经有了 IP 地址，还需要有 MAC 地址呢？</h2><ul>
<li>如果我们只使用MAC地址进行寻址的话，我们需要路由器记住每个MAC地址属于哪个子网，不然一次路由器收到数据包都要满世界寻找目的MAC地址。而我们知道MAC地址的长度为48位，也就是最多共有2的48次方个MAC地址，这就意味着每个路由器需要256T的内存，显然是不现实的。</li>
<li>和MAC地址不同，IP地址是和地域相关的，在一个子网中的设备，我们给其分配的IP地址前缀都是一样的，这样路由器就能根据IP地址的前缀知道这个设备属于哪个子网，剩下的寻址就交给子网内部实现，从而大大减少了路由器所需要的内存。<br>  <a name="CcXV2"></a></li>
</ul>
<h2 id="为什么有了-MAC-地址还需要有-IP-地址呢？"><a href="#为什么有了-MAC-地址还需要有-IP-地址呢？" class="headerlink" title="为什么有了 MAC 地址还需要有 IP 地址呢？"></a>为什么有了 MAC 地址还需要有 IP 地址呢？</h2><p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696592093409-2e5e5e4d-089c-4999-bf90-14e77cdda117.png" style="display: inline; border-style: none;"></p>
<ul>
<li>只有当设备连入网络时，才能根据他进入了哪个子网来为其分配IP地址，在设备还没有IP地址的时候，或者在分配IP的过程中。我们需要MAC地址来区分不同的设备。</li>
<li>IP 地址可以比作为地址，MAC 地址为收件人，在一次通信过程中，两者是缺一不可的。<br>  <a name="AfKoL"></a></li>
</ul>
<h2 id="简单说一-ICMP-协议的功能？"><a href="#简单说一-ICMP-协议的功能？" class="headerlink" title="简单说一 ICMP 协议的功能？"></a>简单说一 ICMP 协议的功能？</h2><p>ICMP（Internet Control Message Protocol） ，网际控制报文协议。</p>
<ul>
<li>ICMP 协议是一种面向无连接的协议，用于传输出错报告控制信息。</li>
<li>它是一个非常重要的协议，它对于网络安全具有极其重要的意义。它属于网络层协议，主要用于在主机与路由器之间传递控制信息，包括<strong>报告错误、交换受限控制和状态信息</strong>等。</li>
<li>当遇到 IP 数据无法访问目标、IP 路由器无法按当前的传输速率转发数据包等情况时，会自动发送 ICMP 消息。</li>
</ul>
<p>比如我们日常使用的比较多的 <strong>ping</strong>，就是基于 <strong>ICMP</strong> 的。<br><a name="Vo0r9"></a></p>
<h2 id="说一下-ping-的原理？"><a href="#说一下-ping-的原理？" class="headerlink" title="说一下 ping 的原理？"></a>说一下 ping 的原理？</h2><p>ping，<strong>Packet Internet Groper</strong>，是一种因特网包探索器，用于测试网络连接量的程序。Ping 是工作在 TCP&#x2F;IP 网络体系结构中应用层的一个服务命令， 主要是向特定的目的主机发送 ICMP（Internet Control Message Protocol 因特网报文控制协议） 请求报文，测试目的站是否可达及了解其有关状态。</p>
<p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696592980433-7f3748a6-c88c-4024-9d9c-82a7e6494e6c.png" alt="image.png" style="display: inline; border-style: none;"></p>
<p>一般来说，ping 可以用来检测网络通不通。它是基于ICMP协议工作的。假设<strong>机器 A</strong> ping <strong>机器 B</strong>，工作过程如下：</p>
<ol>
<li>ping 通知系统，新建一个固定格式的 ICMP 请求数据包</li>
<li>ICMP 协议，将该数据包和目标机器 B 的 IP 地址打包，一起转交给 IP 协议层</li>
<li>IP 层协议将本机 IP 地址为源地址，机器 B 的 IP 地址为目标地址，加上一些其他的控制信息，构建一个 IP 数据包</li>
<li>先获取目标机器 B 的 MAC 地址。</li>
<li>数据链路层构建一个数据帧，目的地址是 IP 层传过来的 <strong>MAC 地址</strong>，源地址是本机的 <strong>MAC 地址</strong></li>
<li>机器 B 收到后，对比目标地址，和自己本机的 MAC 地址是否一致，符合就处理返回，不符合就丢弃。</li>
<li>根据目的主机返回的 ICMP 回送回答报文中的时间戳，从而计算出往返时间</li>
<li>最终显示结果有这几项：发送到目的主机的 IP 地址、发送 &amp; 收到 &amp; 丢失的分组数、往返时间的最小、最大 &amp; 平均值</li>
</ol>
<p><a name="IcVFC"></a></p>
<h2 id="什么是-TTL？TTL-的作用是什么？"><a href="#什么是-TTL？TTL-的作用是什么？" class="headerlink" title="什么是 TTL？TTL 的作用是什么？"></a>什么是 TTL？TTL 的作用是什么？</h2><p>TTL 是 Time To Live 的缩写，该字段指定 IP包被路由器丢弃之前允许通过的最大网段数量。（需要注意的是 TTL 与 DNS TTL 二者都是生存时间，前者指 ICMP 包的转发次数或跳数，后者指域名解析信息在DNS中的存在时间。）<br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696496561333-3ffd3879-e399-4b89-ab97-d6ec44b6f934.png" style="display: inline; border-style: none;"><br>TTL 的作用是限制 IP数据包在计算机网络中的存在的时间，以避免IP包在网络中的无限循环和收发，节省了网络资源，并能使IP包的发送者能收到告警消息。TTL的最大值是255，TTL的一个推荐值是64。</p>
<p><a name="IWBso"></a></p>
<h1 id="🛡️网络安全"><a href="#🛡️网络安全" class="headerlink" title="🛡️网络安全"></a>🛡️网络安全</h1><hr>
<p><a name="GiCOt"></a></p>
<h2 id="说说有哪些安全攻击？"><a href="#说说有哪些安全攻击？" class="headerlink" title="说说有哪些安全攻击？"></a>说说有哪些安全攻击？</h2><p>网络安全攻击主要分为两种类型，<strong>被动攻击</strong>和<strong>主动攻击</strong>：<br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696578747835-a3c0c791-8c97-4382-a768-b0949f3ec91d.png" style="display: inline; border-style: none;"></p>
<ul>
<li><strong>被动攻击</strong>：是指攻击者从网络上窃听他人的通信内容，通常把这类攻击称为截获，被动攻击主要有两种形式：消息内容泄露攻击和流量分析攻击。由于攻击者没有修改数据，使得这种攻击很难被检测到。</li>
<li><strong>主动攻击</strong>：直接对现有的数据和服务造成影响，常见的主动攻击类型有：<ul>
<li><strong>篡改</strong>：攻击者故意篡改网络上送的报文，甚至把完全伪造的报文传送给接收方。</li>
<li><strong>恶意程序</strong>：恶意程序种类繁多，包括计算机病毒、计算机蠕虫、特洛伊木马、后门入侵、流氓软件等等。</li>
<li><strong>拒绝服务Dos</strong>：攻击者向服务器不停地发送分组，使服务器无法提供正常服务。<br>  <a name="ZZ7ue"></a></li>
</ul>
</li>
</ul>
<h2 id="DNS-劫持了解吗？"><a href="#DNS-劫持了解吗？" class="headerlink" title="DNS 劫持了解吗？"></a>DNS 劫持了解吗？</h2><p>NS劫持即域名劫持，是通过将原域名对应的IP地址进行替换，从而使用户访问到错误的网站，或者使用户无法正常访问网站的一种攻击方式。</p>
<p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696578791900-6612f769-9858-4f65-be69-42a01744396e.png" style="display: inline; border-style: none;"></p>
<p>域名劫持往往只能在特定的网络范围内进行，范围外的DNS服务器能够返回正常的IP地址。攻击者可以冒充原域名所属机构，通过电子邮件的方式修改组织机构的域名注册信息，或者将域名转让给其它主持，并将新的域名信息保存在所指定的DNS服务器中，从而使用户无法对原域名来进行解析以访问目标地址。</p>
<blockquote>
<p><a name="XWXz7"></a></p>
</blockquote>
<h3 id="DNS-劫持的步骤是什么？"><a href="#DNS-劫持的步骤是什么？" class="headerlink" title="DNS 劫持的步骤是什么？"></a>DNS 劫持的步骤是什么？</h3><ol>
<li><strong>获取要劫持的域名信息</strong>：攻击者会首先访问域名查询要劫持的站点的域名信息。</li>
<li><strong>控制域名响应的E-Mail账号</strong>：在获取到域名信息后，攻击者通过暴力破解或者专门的方法破解公司注册域名时使用的E-mail账号所对应的密码，更高级的攻击者甚至能够直接对E-Mail进行信息窃取。</li>
<li><strong>修改注册信息</strong>：当攻击者破解了E-Mail后，会利用相关的更改功能修改该域名的注册信息，包括域名拥有者信息，DNS服务器信息等。</li>
<li><strong>使用E-Mail收发确认函</strong>：在修改完注册信息后，攻击者E-Mail在真正拥有者之前收到修改域名注册信息的相关确认信息，并回复确认修改文件，待网络公司恢复已成功修改信件后，攻击者便成功完成DNS劫持。</li>
</ol>
<blockquote>
<p><a name="uArQ6"></a></p>
</blockquote>
<h3 id="怎么应对DNS劫持？"><a href="#怎么应对DNS劫持？" class="headerlink" title="怎么应对DNS劫持？"></a>怎么应对DNS劫持？</h3><ul>
<li>直接通过IP地址访问网站，避开DNS劫持</li>
<li>由于域名劫持往往只能在特定的网络范围内进行，因此一些高级用户可以通过网络设置让DNS指向正常的域名服务器以实现对目标网址的正常访问，例如计算机首选DNS服务器的地址固定为8.8.8.8（这个也是解决 DNS 污染的一个方法）。</li>
</ul>
<p><a name="mAMFm"></a></p>
<h2 id="什么是-CSRF-攻击？如何避免？"><a href="#什么是-CSRF-攻击？如何避免？" class="headerlink" title="什么是 CSRF 攻击？如何避免？"></a>什么是 CSRF 攻击？如何避免？</h2><blockquote>
<p><a name="abIkL"></a></p>
</blockquote>
<h4 id="什么是-CSRF-攻击？"><a href="#什么是-CSRF-攻击？" class="headerlink" title="什么是 CSRF 攻击？"></a>什么是 CSRF 攻击？</h4><p>CSRF，跨站请求伪造（英文全称是 Cross-site request forgery），是一种挟持用户在当前已登录的 Web 应用程序上执行非本意的操作的攻击方法。</p>
<blockquote>
<p><a name="s57yg"></a></p>
</blockquote>
<h3 id="CSRF-是如何进行攻击的呢？"><a href="#CSRF-是如何进行攻击的呢？" class="headerlink" title="CSRF 是如何进行攻击的呢？"></a>CSRF 是如何进行攻击的呢？</h3><p>来看一个例子：<br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696580669057-17a171e7-41e9-44c9-a64f-82df901eef57.png" style="display: inline; border-style: none;"></p>
<ol>
<li>用户登陆银行，没有退出，浏览器包含了 用户 在银行的身份认证信息。</li>
<li>攻击者将伪造的转账请求包含在帖子中</li>
<li>用户在银行网站保持登陆的情况下，浏览帖子</li>
<li>将伪造的转账请求连同身份认证信息，发送到银行网站</li>
<li>银行网站看到身份认证信息，以为就是 用户的合法操作，最后造成用户资金损失。</li>
</ol>
<blockquote>
<p><a name="KX6b0"></a></p>
</blockquote>
<h3 id="怎么应对-CSRF-攻击呢？"><a href="#怎么应对-CSRF-攻击呢？" class="headerlink" title="怎么应对 CSRF 攻击呢？"></a>怎么应对 CSRF 攻击呢？</h3><ul>
<li><strong>检查 Referer 字段</strong>HTTP头中的Referer字段记录了该 HTTP 请求的来源地址。在通常情况下，访问一个安全受限页面的请求来自于同一个网站，而如果黑客要对其实施 CSRF攻击，他一般只能在他自己的网站构造请求。因此，可以通过验证Referer值来防御CSRF 攻击。</li>
<li><strong>添加校验 token</strong>以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有token或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。</li>
<li><strong>敏感操作多重校验</strong>对一些敏感的操作，除了需要校验用户的认证信息，还可以通过邮箱确认、验证码确认这样的方式多重校验。<br>  <a name="uNVuZ"></a></li>
</ul>
<h2 id="什么是-DoS、DDoS、DRDoS-攻击？"><a href="#什么是-DoS、DDoS、DRDoS-攻击？" class="headerlink" title="什么是 DoS、DDoS、DRDoS 攻击？"></a>什么是 DoS、DDoS、DRDoS 攻击？</h2><p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696580848066-18190f6a-2bdf-4aad-9e89-5e3ccc55cbe6.png" style="display: inline; border-style: none;"></p>
<ul>
<li><strong>DOS</strong>: (Denial of Service), 翻译过来就是拒绝服务, 一切能引起拒绝 行为的攻击都被称为 DOS 攻击。最常见的 DoS 攻击就有<strong>计算机网络宽带攻击</strong>、<strong>连通性攻击</strong>。</li>
<li><strong>DDoS</strong>: (Distributed Denial of Service)，翻译过来是分布式拒绝服务。是指处于不同位置的多个攻击者同时向一个或几个目标发动攻击，或者一个攻击者控制了位于不同位置的多台机器，并利用这些机器对受害者同时实施攻击。主要形式有流量攻击和资源耗尽攻击，常见的 DDoS攻击有：<strong>SYN Flood、Ping of Death、ACK Flood、UDP Flood</strong> 等。</li>
<li><strong>DRDoS</strong>: (Distributed Reflection Denial of Service)，中文是分布式反射拒绝服务，该方式靠的是发送大量带有被害者 IP 地址的数据包给攻击主机，然后攻击主机对 IP 地址源做出大量回应，从而形成拒绝服务攻击。</li>
</ul>
<blockquote>
<p><a name="mpkpa"></a></p>
</blockquote>
<h3 id="如何防范DDoS"><a href="#如何防范DDoS" class="headerlink" title="如何防范DDoS?"></a>如何防范DDoS?</h3><p><strong>1、屏蔽未经请求发送的DNS响应信息</strong><br>一个典型的DNS交换信息是由请求信息组成的。DNS解析器会将用户的请求信息发送至DNS服务器中，在DNS服务器对查询请求进行处理之后，服务器会将响应信息返回给DNS解析器。但值得注意的是，响应信息是不会主动发送的。服务器在没有接收到查询请求之前，就已经生成了对应的响应信息，回应就被丢弃丢弃快速重传数据包。1.即便是在数据包丢失的情况下，任何合法的DNS客户端都不会在较短的时间间隔内向同一DNS服务器发送相同的DNS查询请求。2.如果从相同IP地址发送至同一目标地址的相同查询请求发送频率过高，这些请求数据包可丢弃。<br>2、<strong>启用TTL</strong><br>如果DNS服务器已经将响应信息成功发送了，应该禁止服务器在较短的时间间隔内对相同的查询请求信息进行响应。1.对于一个合法的DNS客户端如果已经接收到了响应信息，就不会再次发送相同的查询请求。2.每一个响应信息都应进行缓存处理直到TTL过期。3.当DNS服务器遭遇大量查询请求时，可以屏蔽掉不需要的数据包。丢弃未知来源的DNS查询请求和响应数据通常情况下，攻击者会利用脚本来对目标进行分布式拒绝服务攻击（DDoS攻击），而且这些脚本通常是有漏洞的。因此，在服务器中部署简单的匿名检测机制，在某种程度上可以限制传入服务器的数据包数量。丢弃未经请求或突发的DNS请求这类请求信息很可能是由伪造的代理服务器所发送的，或是由于客户端配置错误或者是攻击流量。所以无论是哪一种情况，都应该直接丢弃这类数据包。非泛洪攻击 (non-flood) 时段，创建一个白名单，添加允许服务器处理的合法请求信息。白名单可以屏蔽掉非法的查询请求信息以及此前从未见过的数据包。这种方法能够有效地保护服务器不受泛洪攻击的威胁，也能保证合法的域名服务器只对合法的DNS查询请求进行处理和响应。<br><strong>3、启动DNS客户端验证</strong><br>伪造是DNS攻击中常用的一种技术。如果设备可以启动客户端验证信任状，便可以用于从伪造泛洪数据中筛选出非泛洪数据包。对响应信息进行缓存处理如果某一查询请求对应的响应信息已经存在于服务器的DNS缓存之中，缓存可以直接对请求进行处理。这样可以有效地防止服务器因过载而发生宕机。<br>很多请求中包含了服务器不具有或不支持的信息，我们可以进行简单的阻断设置，例如外部IP地址请求区域转换或碎片化数据包，直接将这类请求数据包丢弃。利用ACL，BCP38，及IP信誉功能的使用托管DNS服务器的任何企业都有用户轨迹的限制，当攻击数据包被伪造，伪造请求来自世界各地的源地址。设置一个简单的过滤器可阻断不需要的地理位置的IP地址请求或只允许在地理位置白名单内的IP请求。<br>还有一种情况，某些伪造的数据包可能来自与内部网络地址，可以利用BCP38通过硬件过滤也可以清除异常来源地址的请求。BCP38对于提供DNS解析的服务提供商也相当有用，可以避免用户向外发送攻击或受到内部地址请求的攻击，过滤用户并保证其数据传输。<br><strong>4、提供余量带宽</strong><br>如果服务器日常需要处理的DNS通信量达到了X Gbps，请确保流量通道不止是日常的量，有一定的带宽余量可以有利于处理大规模攻击。结语，目前针对DNS的攻击已成为最严重的网络威胁之一。目前越来越多的大型网站注重DNS保护这一块。为保障网站安全，保障网站利益，选择高防型的DNS为自己的域名进行解析已经迫在眉睫。<br><a name="RsAoM"></a></p>
<h2 id="什么是-XSS-攻击，如何避免"><a href="#什么是-XSS-攻击，如何避免" class="headerlink" title="什么是 XSS 攻击，如何避免?"></a>什么是 XSS 攻击，如何避免?</h2><p>XSS 攻击也是比较常见，XSS，叫<strong>跨站脚本攻击（Cross-Site Scripting）</strong>，因为会与层叠样式表 (Cascading Style Sheets, CSS) 的缩写混淆，因此有人将跨站脚本攻击缩写为 XSS。它指的是恶意攻击者往 Web 页面里插入恶意 html 代码，当用户浏览网页的时候，嵌入其中 Web 里面的 html 代码会被执行，从而达到恶意攻击用户的特殊目的。<br>XSS 攻击一般分三种类型：<strong>存储型 、反射型 、DOM 型 XSS</strong><br><a name="Dl2Su"></a></p>
<h2 id="XSS是如何攻击的呢？"><a href="#XSS是如何攻击的呢？" class="headerlink" title="XSS是如何攻击的呢？"></a>XSS是如何攻击的呢？</h2><p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696584639532-000eb728-138b-48c7-9fe7-8974d7950e0d.png" style="display: inline; border-style: none;"><br>简单说，XSS的攻击方式就是想办法“教唆”用户的浏览器去执行一些这个网页中原本不存在的前端代码。<br>拿反射型举个例子吧，流程图如下：</p>
<ol>
<li>攻击者构造出特殊的 URL，其中包含恶意代码。</li>
<li>用户打开带有恶意代码的 URL 时，访问正常网站服务器</li>
<li>网站服务端将恶意代码从 URL 中取出，拼接在 HTML 中返回给浏览器。</li>
<li>用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行，请求恶意服务器，发送用户数据</li>
<li>攻击者就可以窃取用户的数据，以此冒充用户的行为，调用目标网站接口执行攻击者指定的操作。<br> <a name="OAoqK"></a></li>
</ol>
<h2 id="如何解决-XSS-攻击问题？"><a href="#如何解决-XSS-攻击问题？" class="headerlink" title="如何解决 XSS 攻击问题？"></a>如何解决 XSS 攻击问题？</h2><ul>
<li>对输入进行过滤，过滤标签等，只允许合法值。</li>
<li>HTML 转义</li>
<li>对于链接跳转，如&lt;a href&#x3D;”xxx” 等，要校验内容，禁止以 script 开头的非法链接。</li>
<li>限制输入长度</li>
</ul>
<p><a name="Dbijw"></a></p>
<h2 id="对称加密和非对称加密之间有什么区别？"><a href="#对称加密和非对称加密之间有什么区别？" class="headerlink" title="对称加密和非对称加密之间有什么区别？"></a>对称加密和非对称加密之间有什么区别？</h2><p><strong>对称加密</strong>：指加密和解密使用同一密钥，优点是运算速度较快，缺点是如何安全将密钥传输给另一方。常见的对称加密算法有：DES、AES 等。</p>
<p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696573101495-3e7bd5cf-7ecf-4061-9b56-647313c07fb5.png" style="display: inline; border-style: none;"></p>
<p><strong>非对称加密</strong>：指的是加密和解密使用不同的密钥（即公钥和私钥）。公钥与私钥是成对存在的，如果用公钥对数据进行加密，只有对应的私钥才能解密。常见的非对称加密算法有 RSA。</p>
<p><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696573115170-3c4303e0-eb00-4edf-9bf1-bc1208505b90.png" style="display: inline; border-style: none;"></p>
 <br> 
<a name="mFM48"></a>

<h2 id="RSA和AES算法有什么区别？"><a href="#RSA和AES算法有什么区别？" class="headerlink" title="RSA和AES算法有什么区别？"></a>RSA和AES算法有什么区别？</h2><ul>
<li><strong>RSA</strong>采用非对称加密的方式，采用公钥进行加密，私钥解密的形式。其私钥长度一般较长，由于需要大数的乘幂求模等运算，其运算速度较慢，不合适大量数据文件加密。</li>
<li><strong>AES</strong>采用对称加密的方式，其秘钥长度最长只有256个比特，加密和解密速度较快，易于硬件实现。由于是对称加密，通信双方在进行数据传输前需要获知加密密钥。<br>  <a name="Z5lWm"></a></li>
</ul>
<h2 id="简单聊一下-SQL-注入？SQL-注入是怎么进行攻击的？"><a href="#简单聊一下-SQL-注入？SQL-注入是怎么进行攻击的？" class="headerlink" title="简单聊一下 SQL 注入？SQL 注入是怎么进行攻击的？"></a>简单聊一下 SQL 注入？SQL 注入是怎么进行攻击的？</h2><p> SQL注入是最经典的安全问题。无论你是前端开发还是后端开发，都必须掌握的。</p>
<blockquote>
<p>SQL注入是一种代码注入技术，一般被应用于攻击web应用程序。它通过在web应用接口传入一些特殊参数字符，来欺骗应用服务器，执行恶意的SQL命令，以达到非法获取系统信息的目的。它目前是黑客对数据库进行攻击的最常用手段之一。</p>
</blockquote>
<p><strong>那SQL 注入是怎么进行攻击的呢？</strong><br>举个常见的<strong>业务场景</strong>：在web表单搜索框输入员工名字，然后后台查询出对应名字的员工。<br><img src="/blog/2023/10/08/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1696580193440-7215c52d-a796-4c7a-99f7-3691e091ec50.png" style="display: inline; border-style: none;"><br>这种场景下，一般都是前端页面,把一个名字参数name传到后台，然后后台通过SQL把结果查询出来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name = &quot;田螺&quot;; //前端传过来的</span><br><span class="line">SQL= &quot;select * from staff where name=&quot; + name;  //根据前端传过来的name参数，查询数据库员工表staff</span><br></pre></td></tr></table></figure>

<p>因为SQL是直接拼接的，如果我们完全信任前端传的参数的话。假如前端传这么一个参数时’’ or ‘1’&#x3D;’1’，SQL就变成酱紫的啦。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from staff where name=&#x27;&#x27; or &#x27;1&#x27;=&#x27;1&#x27;;</span><br></pre></td></tr></table></figure>

<p>这个SQL会把所有的员工信息全都查出来了，酱紫就请求用户已经越权啦。请求者可以获取所有员工的信息，信息已经暴露了啦。<br><a name="UXskm"></a></p>
<h2 id="如何预防-SQL-注入问题？"><a href="#如何预防-SQL-注入问题？" class="headerlink" title="如何预防 SQL 注入问题？"></a>如何预防 SQL 注入问题？</h2><ol>
<li>** 使用#{}而不是 ${}**</li>
</ol>
<p>在MyBatis中,使用**#{}<strong>而不是</strong>${}**，可以很大程度防止sql注入。(Go 和 C++ 的 ORM 框架都有对应的解决方法，这里就不做过多的赘述了)</p>
<ul>
<li>因为**#{}<strong>是一个参数占位符，对于字符串类型，会自动加上””，其他类型不加。由于Mybatis采用</strong>预编译**，其后的参数不会再进行SQL编译，所以一定程度上防止SQL注入。</li>
<li>${}是一个简单的字符串替换，字符串是什么，就会解析成什么，存在SQL注入风险</li>
</ul>
<ol start="2">
<li><strong>不要暴露一些不必要的日志或者安全信息，比如避免直接响应一些sql异常信息。</strong></li>
</ol>
<ul>
<li>如果SQL发生异常了，不要把这些信息暴露响应给用户，可以自定义异常进行响应</li>
</ul>
<ol start="3">
<li>** 不相信任何外部输入参数，过滤参数中含有的一些数据库关键词关键词**</li>
</ol>
<ul>
<li>可以加个参数校验过滤的方法，过滤union，or等数据库关键词</li>
</ul>
<ol start="4">
<li><strong>适当的权限控制</strong></li>
</ol>
<ul>
<li>在你查询信息时，先校验下当前用户是否有这个权限。比如说，实现代码的时候，可以让用户多传一个企业Id什么的，或者获取当前用户的session信息等，在查询前，先校验一下当前用户是否是这个企业下的等等，是的话才有这个查询员工的权限。<br>  <a name="ftm02"></a></li>
</ul>
<h2 id="简单聊一下防盗链"><a href="#简单聊一下防盗链" class="headerlink" title="简单聊一下防盗链"></a>简单聊一下防盗链</h2><p><strong>盗链</strong>是指服务提供商自己不提供服务的内容，通过技术手段（可以理解成爬虫）去获取其他网站的资源展示在自己的网站上。常见的盗链有以下几种：图片盗链、音频盗链、视频盗链等。<br>网站盗链会大量消耗被盗链网站的带宽，而真正的点击率也许会很小，严重损害了被盗链网站的利益。<br>被盗网站就自然会<strong>防盗链</strong>，可以通过经常更换图片名，也可以通过检测referer。因为正常用户访问一张图片一定是从自己的网站点击链接进去的，如果一个请求的referer是其他网站，就说明这是一个爬虫。</p>
<blockquote>
<p><a name="BTsZH"></a></p>
</blockquote>
<h3 id="什么是-Referer？"><a href="#什么是-Referer？" class="headerlink" title="什么是 Referer？"></a>什么是 Referer？</h3><p>这里的 Referer 指的是 HTTP 头部的一个字段，也称为 HTTP 来源地址（HTTP Referer），用来表示从哪儿链接到目前的网页，采用的格式是 URL。换句话说，借着 HTTP Referer 头部网页可以检查访客从哪里而来，这也常被用来对付伪造的跨网站请求。<br>盗链网站会针对性进行<strong>反盗链</strong>，可以通过在请求的headers中设置referer来绕过<strong>防盗链</strong>，我们现在使用爬虫抓取别人的网站也是这样。</p>
<blockquote>
<p><a name="MClnB"></a></p>
</blockquote>
<h3 id="什么是空-Referer，什么时候会出现空-Referer？"><a href="#什么是空-Referer，什么时候会出现空-Referer？" class="headerlink" title="什么是空 Referer，什么时候会出现空 Referer？"></a>什么是空 Referer，什么时候会出现空 Referer？</h3><p>首先，我们对空 Referer 的定义为，Referer 头部的内容为空，或者，一个 HTTP 请求中根本不包含 Referer 头部。<br>那么什么时候 HTTP 请求会不包含 Referer 字段呢？根据 Referer 的定义，它的作用是指示一个请求是从哪里链接过来，那么当一个请求并不是由链接触发产生的，那么自然也就不需要指定这个请求的链接来源。<br>比如，直接在浏览器的地址栏中输入一个资源的 URL 地址，那么这种请求是不会包含 Referer 字段的，因为这是一个 “凭空产生” 的 HTTP 请求，并不是从一个地方链接过去的。</p>
<p>本文转载自：<a href="https://www.yuque.com/zeovo-10k9s/lqwlrb/tk6pus58hvr61lcd?singleDoc">柒夭日志：计算机网络</a></p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
</search>
